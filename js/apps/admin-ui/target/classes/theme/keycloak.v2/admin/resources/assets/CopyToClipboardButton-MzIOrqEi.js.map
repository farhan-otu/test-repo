{"version":3,"file":"CopyToClipboardButton-MzIOrqEi.js","sources":["../../../../../../../src/utils/useQueryPermission.ts","../../../../../../../src/components/copy-to-clipboard-button/CopyToClipboardButton.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** A 'plain' object version of the permission status. */\nexport type PlainPermissionStatus = {\n  readonly name: string;\n  readonly state: PermissionState;\n};\n\nexport default function useQueryPermission(\n  name: PermissionName,\n): PlainPermissionStatus | null {\n  const [status, setStatus] = useState<PermissionStatus | null>(null);\n  const [plainStatus, setPlainStatus] = useState<PlainPermissionStatus | null>(\n    null,\n  );\n\n  function updatePlainStatus(newStatus: PermissionStatus) {\n    setPlainStatus({\n      name: newStatus.name,\n      state: newStatus.state,\n    });\n  }\n\n  // Query the permission status when the name changes.\n  useEffect(() => {\n    setStatus(null);\n    setPlainStatus(null);\n\n    navigator.permissions.query({ name }).then((newStatus) => {\n      setStatus(newStatus);\n      updatePlainStatus(newStatus);\n    });\n  }, [name]);\n\n  // Update the 'plain' status when the permission status changes.\n  useEffect(() => {\n    if (!status) {\n      return;\n    }\n\n    function onStatusChange() {\n      if (!status) {\n        return;\n      }\n\n      updatePlainStatus(status);\n    }\n\n    status.addEventListener(\"change\", onStatusChange);\n    return () => status.removeEventListener(\"change\", onStatusChange);\n  }, [status]);\n\n  return plainStatus;\n}\n","import { useSetTimeout } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopyButton,\n  ClipboardCopyButtonProps,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useQueryPermission from \"../../utils/useQueryPermission\";\n\nenum CopyState {\n  Ready,\n  Copied,\n  Error,\n}\n\ntype CopyToClipboardButtonProps = Pick<ClipboardCopyButtonProps, \"variant\"> & {\n  id: string;\n  label: string;\n  text: string;\n};\n\nexport const CopyToClipboardButton = ({\n  id,\n  label,\n  text,\n  variant = \"plain\",\n}: CopyToClipboardButtonProps) => {\n  const { t } = useTranslation();\n  const setTimeout = useSetTimeout();\n  const permission = useQueryPermission(\"clipboard-write\" as PermissionName);\n  const permissionDenied = permission?.state === \"denied\";\n  const [copyState, setCopyState] = useState(CopyState.Ready);\n\n  // Determine the message to use for the copy button.\n  const copyMessageKey = useMemo(() => {\n    if (permissionDenied) {\n      return \"clipboardCopyDenied\";\n    }\n\n    switch (copyState) {\n      case CopyState.Ready:\n        return \"copyToClipboard\";\n      case CopyState.Copied:\n        return \"copySuccess\";\n      case CopyState.Error:\n        return \"clipboardCopyError\";\n    }\n  }, [permissionDenied, copyState]);\n\n  // Reset the message of the copy button after copying to the clipboard.\n  useEffect(() => {\n    if (copyState !== CopyState.Ready) {\n      return setTimeout(() => setCopyState(CopyState.Ready), 1000);\n    }\n  }, [copyState, setTimeout]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopyState(CopyState.Copied);\n    } catch {\n      setCopyState(CopyState.Error);\n    }\n  };\n\n  return (\n    <ClipboardCopyButton\n      id={`copy-button-${id}`}\n      textId={label}\n      aria-label={t(\"copyToClipboard\")}\n      onClick={() => copyToClipboard(text)}\n      exitDelay={600}\n      variant={variant}\n    >\n      {t(copyMessageKey)}\n    </ClipboardCopyButton>\n  );\n};\n"],"names":["useQueryPermission","name","status","setStatus","useState","plainStatus","setPlainStatus","updatePlainStatus","newStatus","useEffect","onStatusChange","CopyToClipboardButton","id","label","text","variant","t","useTranslation","setTimeout","useSetTimeout","permissionDenied","copyState","setCopyState","copyMessageKey","useMemo","copyToClipboard","jsx","ClipboardCopyButton"],"mappings":"iMAQA,SAAwBA,EACtBC,EAC8B,CAC9B,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAkC,IAAI,EAC5D,CAACC,EAAaC,CAAc,EAAIF,EACpC,IACF,EAEA,SAASG,EAAkBC,EAA6B,CACvCF,EAAA,CACb,KAAME,EAAU,KAChB,MAAOA,EAAU,KAAA,CAClB,CAAA,CAIH,OAAAC,EAAU,IAAM,CACdN,EAAU,IAAI,EACdG,EAAe,IAAI,EAET,UAAA,YAAY,MAAM,CAAE,KAAAL,CAAA,CAAM,EAAE,KAAMO,GAAc,CACxDL,EAAUK,CAAS,EACnBD,EAAkBC,CAAS,CAAA,CAC5B,CAAA,EACA,CAACP,CAAI,CAAC,EAGTQ,EAAU,IAAM,CACd,GAAI,CAACP,EACH,OAGF,SAASQ,GAAiB,CACnBR,GAILK,EAAkBL,CAAM,CAAA,CAGnB,OAAAA,EAAA,iBAAiB,SAAUQ,CAAc,EACzC,IAAMR,EAAO,oBAAoB,SAAUQ,CAAc,CAAA,EAC/D,CAACR,CAAM,CAAC,EAEJG,CACT,CC/BO,MAAMM,EAAwB,CAAC,CACpC,GAAAC,EACA,MAAAC,EACA,KAAAC,EACA,QAAAC,EAAU,OACZ,IAAkC,CAC1B,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvBC,EAAaC,EAAc,EAE3BC,EADapB,EAAmB,iBAAmC,GACpC,QAAU,SACzC,CAACqB,EAAWC,CAAY,EAAIlB,EAAS,CAAe,EAGpDmB,EAAiBC,EAAQ,IAAM,CACnC,GAAIJ,EACK,MAAA,sBAGT,OAAQC,EAAW,CACjB,IAAK,GACI,MAAA,kBACT,IAAK,GACI,MAAA,cACT,IAAK,GACI,MAAA,oBAAA,CACX,EACC,CAACD,EAAkBC,CAAS,CAAC,EAGhCZ,EAAU,IAAM,CACd,GAAIY,IAAc,EAChB,OAAOH,EAAW,IAAMI,EAAa,CAAA,EAAkB,GAAI,CAC7D,EACC,CAACD,EAAWH,CAAU,CAAC,EAEpB,MAAAO,EAAkB,MAAOX,GAAiB,CAC1C,GAAA,CACI,MAAA,UAAU,UAAU,UAAUA,CAAI,EACxCQ,EAAa,CAAgB,CAAA,MACvB,CACNA,EAAa,CAAe,CAAA,CAEhC,EAGE,OAAAI,EAACC,EAAA,CACC,GAAI,eAAef,CAAE,GACrB,OAAQC,EACR,aAAYG,EAAE,iBAAiB,EAC/B,QAAS,IAAMS,EAAgBX,CAAI,EACnC,UAAW,IACX,QAAAC,EAEC,WAAEQ,CAAc,CAAA,CACnB,CAEJ"}