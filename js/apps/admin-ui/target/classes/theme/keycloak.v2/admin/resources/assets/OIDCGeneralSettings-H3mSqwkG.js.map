{"version":3,"file":"OIDCGeneralSettings-H3mSqwkG.js","sources":["../../../../../../../src/identity-providers/component/FormGroupField.tsx","../../../../../../../src/identity-providers/component/SwitchField.tsx","../../../../../../../src/identity-providers/component/TextField.tsx","../../../../../../../src/identity-providers/add/DiscoverySettings.tsx","../../../../../../../src/identity-providers/add/OIDCAuthentication.tsx","../../../../../../../src/identity-providers/add/OIDCGeneralSettings.tsx"],"sourcesContent":["import { FormGroup } from \"@patternfly/react-core\";\nimport { PropsWithChildren } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\nexport type FieldProps = { label: string; field: string; isReadOnly?: boolean };\nexport type FormGroupFieldProps = { label: string };\n\nexport const FormGroupField = ({\n  label,\n  children,\n}: PropsWithChildren<FormGroupFieldProps>) => {\n  const { t } = useTranslation();\n  return (\n    <FormGroup\n      label={t(label)}\n      fieldId={label}\n      labelIcon={<HelpItem helpText={t(`${label}Help`)} fieldLabelId={label} />}\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import { Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FieldProps, FormGroupField } from \"./FormGroupField\";\n\ntype FieldType = \"boolean\" | \"string\";\n\ntype SwitchFieldProps = FieldProps & {\n  fieldType?: FieldType;\n  defaultValue?: string | boolean;\n};\n\nexport const SwitchField = ({\n  label,\n  field,\n  fieldType = \"string\",\n  isReadOnly = false,\n  defaultValue,\n}: SwitchFieldProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  return (\n    <FormGroupField label={label}>\n      <Controller\n        name={field}\n        defaultValue={\n          defaultValue ? defaultValue : fieldType === \"string\" ? \"false\" : false\n        }\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={label}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            isChecked={\n              fieldType === \"string\"\n                ? field.value === \"true\"\n                : (field.value as boolean)\n            }\n            onChange={(_event, value) =>\n              field.onChange(fieldType === \"string\" ? \"\" + value : value)\n            }\n            isDisabled={isReadOnly}\n            aria-label={label}\n          />\n        )}\n      />\n    </FormGroupField>\n  );\n};\n","import { TextInput } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport { FieldProps, FormGroupField } from \"./FormGroupField\";\n\nexport const TextField = ({ label, field, isReadOnly = false }: FieldProps) => {\n  const { register } = useFormContext();\n  return (\n    <FormGroupField label={label}>\n      <TextInput\n        id={label}\n        data-testid={label}\n        readOnly={isReadOnly}\n        {...register(field)}\n      />\n    </FormGroupField>\n  );\n};\n","import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { ExpandableSection } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  SelectControl,\n  TextAreaControl,\n  TextControl,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\n\nimport \"./discovery-settings.css\";\n\nconst PKCE_METHODS = [\"plain\", \"S256\"] as const;\n\ntype DiscoverySettingsProps = {\n  readOnly: boolean;\n};\n\nconst Fields = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext<IdentityProviderRepresentation>();\n\n  const validateSignature = useWatch({\n    control,\n    name: \"config.validateSignature\",\n  });\n  const useJwks = useWatch({\n    control,\n    name: \"config.useJwksUrl\",\n  });\n  const isPkceEnabled = useWatch({\n    control,\n    name: \"config.pkceEnabled\",\n  });\n\n  return (\n    <div className=\"pf-v5-c-form pf-m-horizontal\">\n      <TextControl\n        name=\"config.authorizationUrl\"\n        label={t(\"authorizationUrl\")}\n        type=\"url\"\n        readOnly={readOnly}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n      <TextControl\n        name=\"config.tokenUrl\"\n        label={t(\"tokenUrl\")}\n        type=\"url\"\n        readOnly={readOnly}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n      <TextControl\n        name=\"config.logoutUrl\"\n        label={t(\"logoutUrl\")}\n        readOnly={readOnly}\n      />\n      <TextControl\n        name=\"config.userInfoUrl\"\n        label={t(\"userInfoUrl\")}\n        readOnly={readOnly}\n      />\n      <TextControl\n        name=\"config.issuer\"\n        label={t(\"issuer\")}\n        readOnly={readOnly}\n      />\n      <DefaultSwitchControl\n        name=\"config.validateSignature\"\n        label={t(\"validateSignature\")}\n        isDisabled={readOnly}\n        stringify\n      />\n      {validateSignature === \"true\" && (\n        <>\n          <DefaultSwitchControl\n            name=\"config.useJwksUrl\"\n            label={t(\"useJwksUrl\")}\n            isDisabled={readOnly}\n            stringify\n          />\n          {useJwks === \"true\" ? (\n            <TextAreaControl\n              name=\"config.jwksUrl\"\n              label={t(\"jwksUrl\")}\n              readOnly={readOnly}\n            />\n          ) : (\n            <>\n              <TextAreaControl\n                name=\"config.publicKeySignatureVerifier\"\n                label={t(\"validatingPublicKey\")}\n              />\n              <TextControl\n                name=\"config.publicKeySignatureVerifierKeyId\"\n                label={t(\"validatingPublicKeyId\")}\n                readOnly={readOnly}\n              />\n            </>\n          )}\n        </>\n      )}\n      <DefaultSwitchControl\n        name=\"config.pkceEnabled\"\n        label={t(\"pkceEnabled\")}\n        isDisabled={readOnly}\n        stringify\n      />\n      {isPkceEnabled === \"true\" && (\n        <SelectControl\n          name=\"config.pkceMethod\"\n          label={t(\"pkceMethod\")}\n          labelIcon={t(\"pkceMethodHelp\")}\n          controller={{\n            defaultValue: PKCE_METHODS[0],\n          }}\n          options={PKCE_METHODS.map((option) => ({\n            key: option,\n            value: t(option),\n          }))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const DiscoverySettings = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <>\n      {readOnly && (\n        <ExpandableSection\n          className=\"keycloak__discovery-settings__metadata\"\n          toggleText={isExpanded ? t(\"hideMetaData\") : t(\"showMetaData\")}\n          onToggle={() => setIsExpanded(!isExpanded)}\n          isExpanded={isExpanded}\n        >\n          <Fields readOnly={readOnly} />\n        </ExpandableSection>\n      )}\n      {!readOnly && <Fields readOnly={readOnly} />}\n    </>\n  );\n};\n","import { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { sortProviders } from \"../../util\";\nimport { ClientIdSecret } from \"../component/ClientIdSecret\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nconst clientAuthentications = [\n  \"client_secret_post\",\n  \"client_secret_basic\",\n  \"client_secret_jwt\",\n  \"private_key_jwt\",\n];\n\nexport const OIDCAuthentication = ({ create = true }: { create?: boolean }) => {\n  const providers = useServerInfo().providers!.clientSignature.providers;\n  const { t } = useTranslation();\n\n  const { control } = useFormContext();\n\n  const clientAuthMethod = useWatch({\n    control: control,\n    name: \"config.clientAuthMethod\",\n  });\n\n  return (\n    <>\n      <SelectControl\n        name=\"config.clientAuthMethod\"\n        label={t(\"clientAuthentication\")}\n        labelIcon={t(\"clientAuthenticationHelp\")}\n        options={clientAuthentications.map((auth) => ({\n          key: auth,\n          value: t(`clientAuthentications.${auth}`),\n        }))}\n        controller={{\n          defaultValue: clientAuthentications[0],\n        }}\n      />\n      <ClientIdSecret\n        secretRequired={clientAuthMethod !== \"private_key_jwt\"}\n        create={create}\n      />\n      <SelectControl\n        name=\"config.clientAssertionSigningAlg\"\n        label={t(\"clientAssertionSigningAlg\")}\n        labelIcon={t(\"clientAssertionSigningAlgHelp\")}\n        options={[\n          { key: \"\", value: t(\"algorithmNotSpecified\") },\n          ...sortProviders(providers).map((p) => ({ key: p, value: p })),\n        ]}\n        controller={{\n          defaultValue: \"\",\n        }}\n      />\n      {(clientAuthMethod === \"private_key_jwt\" ||\n        clientAuthMethod === \"client_secret_jwt\") && (\n        <TextField\n          field=\"config.clientAssertionAudience\"\n          label=\"clientAssertionAudience\"\n        />\n      )}\n      {clientAuthMethod === \"private_key_jwt\" && (\n        <SwitchField\n          field=\"config.jwtX509HeadersEnabled\"\n          label=\"jwtX509HeadersEnabled\"\n        />\n      )}\n    </>\n  );\n};\n","import { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\nimport { RedirectUrl } from \"../component/RedirectUrl\";\nimport type { IdentityProviderParams } from \"../routes/IdentityProvider\";\n\nexport const OIDCGeneralSettings = () => {\n  const { t } = useTranslation();\n  const { tab } = useParams<IdentityProviderParams>();\n\n  const { control } = useFormContext();\n  const alias = useWatch({ control, name: \"alias\" });\n\n  return (\n    <>\n      <RedirectUrl id={alias} />\n\n      <TextControl\n        name=\"alias\"\n        label={t(\"alias\")}\n        labelIcon={t(\"aliasHelp\")}\n        readOnly={tab === \"settings\"}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n\n      <TextControl name=\"displayName\" label={t(\"displayName\")} />\n      <DisplayOrder />\n    </>\n  );\n};\n"],"names":["FormGroupField","label","children","t","useTranslation","jsx","FormGroup","HelpItem","SwitchField","field","fieldType","isReadOnly","defaultValue","control","useFormContext","Controller","Switch","_event","value","TextField","register","TextInput","PKCE_METHODS","Fields","readOnly","validateSignature","useWatch","useJwks","isPkceEnabled","jsxs","TextControl","DefaultSwitchControl","Fragment","TextAreaControl","SelectControl","option","DiscoverySettings","isExpanded","setIsExpanded","useState","ExpandableSection","clientAuthentications","OIDCAuthentication","create","providers","useServerInfo","clientAuthMethod","auth","ClientIdSecret","sortProviders","p","OIDCGeneralSettings","tab","useParams","alias","RedirectUrl","DisplayOrder"],"mappings":"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"}