{"version":3,"file":"GroupsSection-aPYRqiCg.js","sources":["../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-styles@5.4.1/node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-icons@5.4.2_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-icons/dist/esm/icons/tree-icon.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/unionBy.js","../../../../../../../src/components/bread-crumb/GroupBreadCrumbs.tsx","../../../../../../../src/groups/groupIdUtils.ts","../../../../../../../src/groups/GroupAttributes.tsx","../../../../../../../src/groups/GroupRoleMapping.tsx","../../../../../../../src/groups/GroupsModal.tsx","../../../../../../../src/groups/components/DeleteGroup.tsx","../../../../../../../src/groups/components/GroupToolbar.tsx","../../../../../../../src/groups/components/MoveDialog.tsx","../../../../../../../src/groups/GroupTable.tsx","../../../../../../../src/groups/MembershipsModal.tsx","../../../../../../../src/groups/Members.tsx","../../../../../../../src/groups/components/GroupTree.tsx","../../../../../../../src/groups/GroupsSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const DrawerPanelBody = (_a) => {\n    var { className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.drawerBody, hasNoPadding && styles.modifiers.noPadding, className) }, props), children));\n};\nDrawerPanelBody.displayName = 'DrawerPanelBody';\n//# sourceMappingURL=DrawerPanelBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer.mjs';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerPanelBody } from './DrawerPanelBody';\nexport const DrawerHead = (_a) => {\n    var { className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(DrawerPanelBody, { hasNoPadding: hasNoPadding },\n        React.createElement(\"div\", Object.assign({ className: css(styles.drawerHead, className) }, props), children)));\n};\nDrawerHead.displayName = 'DrawerHead';\n//# sourceMappingURL=DrawerHead.js.map","import './tree-view.css';\nexport default {\n  \"badge\": \"pf-v5-c-badge\",\n  \"dirRtl\": \"pf-v5-m-dir-rtl\",\n  \"modifiers\": {\n    \"compact\": \"pf-m-compact\",\n    \"guides\": \"pf-m-guides\",\n    \"expanded\": \"pf-m-expanded\",\n    \"noBackground\": \"pf-m-no-background\",\n    \"current\": \"pf-m-current\",\n    \"read\": \"pf-m-read\",\n    \"selectable\": \"pf-m-selectable\",\n    \"truncate\": \"pf-m-truncate\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\",\n  \"treeView\": \"pf-v5-c-tree-view\",\n  \"treeViewAction\": \"pf-v5-c-tree-view__action\",\n  \"treeViewContent\": \"pf-v5-c-tree-view__content\",\n  \"treeViewListItem\": \"pf-v5-c-tree-view__list-item\",\n  \"treeViewNode\": \"pf-v5-c-tree-view__node\",\n  \"treeViewNodeCheck\": \"pf-v5-c-tree-view__node-check\",\n  \"treeViewNodeContainer\": \"pf-v5-c-tree-view__node-container\",\n  \"treeViewNodeContent\": \"pf-v5-c-tree-view__node-content\",\n  \"treeViewNodeCount\": \"pf-v5-c-tree-view__node-count\",\n  \"treeViewNodeIcon\": \"pf-v5-c-tree-view__node-icon\",\n  \"treeViewNodeText\": \"pf-v5-c-tree-view__node-text\",\n  \"treeViewNodeTitle\": \"pf-v5-c-tree-view__node-title\",\n  \"treeViewNodeToggle\": \"pf-v5-c-tree-view__node-toggle\",\n  \"treeViewNodeToggleIcon\": \"pf-v5-c-tree-view__node-toggle-icon\",\n  \"treeViewSearch\": \"pf-v5-c-tree-view__search\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, isMultiSelectable = false, toolbar, children, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby } = _a, props = __rest(_a, [\"isNested\", \"isMultiSelectable\", \"toolbar\", \"children\", 'aria-label', 'aria-labelledby']);\n    return (React.createElement(React.Fragment, null,\n        toolbar && (React.createElement(React.Fragment, null,\n            toolbar,\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css(`${styles.treeView}__list`), role: isNested ? 'group' : 'tree', \"aria-multiselectable\": isNested ? undefined : isMultiSelectable, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledby }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map","import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onExpand, onCollapse, onCheck, hasCheckbox = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheckbox) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheckbox || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheckbox) {\n                if (internalIsExpanded) {\n                    onCollapse && onCollapse(evt, itemData, parentItem);\n                }\n                else {\n                    onExpand && onExpand(evt, itemData, parentItem);\n                }\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheckbox || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), (ToggleComponent === 'button' && { type: 'button' }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const isCheckboxChecked = checkProps.checked === null ? false : checkProps.checked;\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: (elem) => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: isCheckboxChecked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText), type: \"button\" }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    const isSelected = (!children || isSelectable) &&\n        activeItems &&\n        activeItems.length > 0 &&\n        activeItems.some((item) => compareItems && item && compareItems(item, itemData));\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded), \"aria-expanded\": internalIsExpanded, role: \"treeitem\", tabIndex: -1 }, (hasCheckbox && { 'aria-checked': isCheckboxChecked }), (!hasCheckbox && { 'aria-selected': isSelected })),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, (randomId) => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheckbox) && styles.modifiers.selectable, isSelected && styles.modifiers.current), onClick: (evt) => {\n                    if (!hasCheckbox) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            if (internalIsExpanded) {\n                                onCollapse && onCollapse(evt, itemData, parentItem);\n                            }\n                            else {\n                                onExpand && onExpand(evt, itemData, parentItem);\n                            }\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheckbox && { htmlFor: randomId }), ((hasCheckbox || (isSelectable && children)) && { id: `label-${randomId}` }), (Component === 'button' && { type: 'button' })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheckbox && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some((item) => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some((item) => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.onExpand !== nextProps.onExpand ||\n        prevProps.onCollapse !== nextProps.onCollapse ||\n        prevProps.hasCheckbox !== nextProps.hasCheckbox ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view.mjs';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nclass TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target) ||\n                !event.target.classList.contains(styles.treeViewNode)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode)).filter((el) => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains(styles.treeViewNodeToggle);\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasCheckboxes || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName(styles.treeViewNodeToggle)[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasCheckboxes) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName(styles.treeViewNodeText)[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(styles.treeViewNode)[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasCheckboxes, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasCheckboxes\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\nexport { TreeViewRoot };\n//# sourceMappingURL=TreeViewRoot.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasCheckboxes = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, isMultiSelectable = false, expandedIcon, parentItem, onSelect, onCheck, onExpand, onCollapse, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasCheckboxes\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"isMultiSelectable\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"onExpand\", \"onCollapse\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\", 'aria-label', 'aria-labelledby']);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar, isMultiSelectable: isMultiSelectable, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledby }, data.map((item) => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, onExpand: onExpand, onCollapse: onCollapse, hasCheckbox: item.hasCheckbox !== undefined ? item.hasCheckbox : hasCheckboxes, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasCheckboxes: hasCheckboxes, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, onExpand: onExpand, onCollapse: onCollapse, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasCheckboxes: hasCheckboxes, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map","import { createIcon } from '../createIcon';\n\nexport const TreeIconConfig = {\n  name: 'TreeIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M378.31 378.49L298.42 288h30.63c9.01 0 16.98-5 20.78-13.06 3.8-8.04 2.55-17.26-3.28-24.05L268.42 160h28.89c9.1 0 17.3-5.35 20.86-13.61 3.52-8.13 1.86-17.59-4.24-24.08L203.66 4.83c-6.03-6.45-17.28-6.45-23.32 0L70.06 122.31c-6.1 6.49-7.75 15.95-4.24 24.08C69.38 154.65 77.59 160 86.69 160h28.89l-78.14 90.91c-5.81 6.78-7.06 15.99-3.27 24.04C37.97 283 45.93 288 54.95 288h30.63L5.69 378.49c-6 6.79-7.36 16.09-3.56 24.26 3.75 8.05 12 13.25 21.01 13.25H160v24.45l-30.29 48.4c-5.32 10.64 2.42 23.16 14.31 23.16h95.96c11.89 0 19.63-12.52 14.31-23.16L224 440.45V416h136.86c9.01 0 17.26-5.2 21.01-13.25 3.8-8.17 2.44-17.47-3.56-24.26z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TreeIcon = createIcon(TreeIconConfig);\n\nexport default TreeIcon;","import baseFlatten from './_baseFlatten.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\n\nexport default unionBy;\n","import { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Breadcrumb, BreadcrumbItem } from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../../groups/SubGroupsContext\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport const GroupBreadCrumbs = () => {\n  const { t } = useTranslation();\n  const { clear, remove, subGroups } = useSubGroups();\n  const { realm } = useRealm();\n  const location = useLocation();\n\n  useEffect(() => {\n    const { pathname } = location;\n\n    if (!pathname.includes(\"/groups\") || pathname.endsWith(\"/groups\")) {\n      clear();\n    }\n  }, [location]);\n\n  return subGroups.length !== 0 ? (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to={`/${realm}/groups`}>{t(\"groups\")}</Link>\n      </BreadcrumbItem>\n      {subGroups.map((group, i) => {\n        const isLastGroup = i === subGroups.length - 1;\n        return (\n          <BreadcrumbItem key={group.id} isActive={isLastGroup}>\n            {!isLastGroup && (\n              <Link\n                to={location.pathname.substring(\n                  0,\n                  location.pathname.indexOf(group.id!) + group.id!.length,\n                )}\n                onClick={() => remove(group)}\n              >\n                {group.name}\n              </Link>\n            )}\n            {isLastGroup &&\n              (group.id === \"search\" ? group.name : t(\"groupDetails\"))}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  ) : null;\n};\n","export const getId = (pathname: string) => {\n  const pathParts = pathname.substring(1).split(\"/\");\n  return pathParts.length > 1 ? pathParts.splice(2) : undefined;\n};\n\nexport const getLastId = (pathname: string) => {\n  const pathParts = getId(pathname);\n  return pathParts ? pathParts[pathParts.length - 1] : undefined;\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport { arrayToKeyValue } from \"../components/key-value-form/key-value-convert\";\nimport { convertFormValuesToObject } from \"../util\";\nimport { getLastId } from \"./groupIdUtils\";\n\nexport const GroupAttributes = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n\n  const location = useLocation();\n  const id = getLastId(location.pathname)!;\n  const [currentGroup, setCurrentGroup] = useState<GroupRepresentation>();\n\n  useFetch(\n    () => adminClient.groups.findOne({ id }),\n    (group) => {\n      form.reset({\n        attributes: arrayToKeyValue(group?.attributes!),\n      });\n      setCurrentGroup(group);\n    },\n    [id],\n  );\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const attributes = convertFormValuesToObject(attributeForm).attributes;\n      await adminClient.groups.update(\n        { id: id! },\n        { ...currentGroup, attributes },\n      );\n\n      setCurrentGroup({ ...currentGroup, attributes });\n      addAlert(t(\"groupUpdated\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={currentGroup?.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: arrayToKeyValue(currentGroup?.attributes!),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype GroupRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const GroupRoleMapping = ({ id, name }: GroupRoleMappingProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.groups.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.groups.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"groups\" save={assignRoles} />;\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  FormSubmitButton,\n  TextControl,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useState } from \"react\";\n\ntype GroupsModalProps = {\n  id?: string;\n  rename?: GroupRepresentation;\n  duplicateId?: string;\n  handleModalToggle: () => void;\n  refresh: (group?: GroupRepresentation) => void;\n};\n\ntype RoleMappingPayload = {\n  id: string;\n  name?: string;\n  clientUniqueId?: string;\n};\n\ntype ClientRoleMapping = {\n  clientId: string;\n  roles: RoleMappingPayload[];\n};\n\nexport const GroupsModal = ({\n  id,\n  rename,\n  duplicateId,\n  handleModalToggle,\n  refresh,\n}: GroupsModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const [duplicateGroupDetails, setDuplicateGroupDetails] =\n    useState<GroupRepresentation | null>(null);\n\n  const form = useForm({\n    defaultValues: { name: \"\" },\n  });\n  const { handleSubmit, formState } = form;\n\n  useFetch(\n    async () => {\n      if (duplicateId) {\n        return adminClient.groups.findOne({ id: duplicateId });\n      }\n    },\n    (group) => {\n      if (group) {\n        setDuplicateGroupDetails(group);\n        form.reset({ name: t(\"copyOf\", { name: group.name }) });\n      }\n    },\n    [duplicateId],\n  );\n\n  const fetchClientRoleMappings = async (groupId: string) => {\n    try {\n      const clientRoleMappings: ClientRoleMapping[] = [];\n      const clients = await adminClient.clients.find();\n\n      for (const client of clients) {\n        const roles = await adminClient.groups.listClientRoleMappings({\n          id: groupId,\n          clientUniqueId: client.id!,\n        });\n\n        const clientRoles = roles\n          .filter((role) => role.id && role.name)\n          .map((role) => ({\n            id: role.id!,\n            name: role.name!,\n          }));\n\n        if (clientRoles.length > 0) {\n          clientRoleMappings.push({ clientId: client.id!, roles: clientRoles });\n        }\n      }\n\n      return clientRoleMappings;\n    } catch (error) {\n      addError(\"couldNotFetchClientRoleMappings\", error);\n      throw error;\n    }\n  };\n\n  const duplicateGroup = async (\n    sourceGroup: GroupRepresentation,\n    parentId?: string,\n    isSubGroup: boolean = false,\n  ) => {\n    try {\n      const newGroup: GroupRepresentation = {\n        ...sourceGroup,\n        name: isSubGroup\n          ? sourceGroup.name\n          : t(\"copyOf\", { name: sourceGroup.name }),\n        ...(parentId ? {} : { attributes: duplicateGroupDetails?.attributes }),\n      };\n\n      delete newGroup.id;\n\n      const createdGroup = parentId\n        ? await adminClient.groups.createChildGroup({ id: parentId }, newGroup)\n        : await adminClient.groups.create(newGroup);\n\n      const members = await adminClient.groups.listMembers({\n        id: sourceGroup.id!,\n      });\n\n      for (const member of members) {\n        await adminClient.users.addToGroup({\n          id: member.id!,\n          groupId: createdGroup.id,\n        });\n      }\n\n      const permissions = await adminClient.groups.listPermissions({\n        id: sourceGroup.id!,\n      });\n\n      if (permissions) {\n        await adminClient.groups.updatePermission(\n          { id: createdGroup.id },\n          permissions,\n        );\n      }\n\n      const realmRoles = await adminClient.groups.listRealmRoleMappings({\n        id: sourceGroup.id!,\n      });\n\n      const realmRolesPayload: RoleMappingPayload[] = realmRoles.map(\n        (role) => ({ id: role.id!, name: role.name! }),\n      );\n\n      const clientRoleMappings = await fetchClientRoleMappings(sourceGroup.id!);\n\n      const clientRolesPayload: RoleMappingPayload[] =\n        clientRoleMappings?.flatMap((clientRoleMapping) =>\n          clientRoleMapping.roles.map((role) => ({\n            id: role.id!,\n            name: role.name!,\n            clientUniqueId: clientRoleMapping.clientId,\n          })),\n        );\n\n      const rolesToAssign: RoleMappingPayload[] = [\n        ...realmRolesPayload,\n        ...clientRolesPayload,\n      ];\n\n      await assignRoles(rolesToAssign, createdGroup.id);\n\n      const subGroups = await adminClient.groups.listSubGroups({\n        parentId: sourceGroup.id!,\n      });\n\n      for (const childGroup of subGroups) {\n        const childAttributes = childGroup.attributes;\n        await duplicateGroup(\n          { ...childGroup, attributes: childAttributes },\n          createdGroup.id,\n          true,\n        );\n      }\n\n      return createdGroup;\n    } catch (error) {\n      addError(\"couldNotDuplicateGroup\", error);\n      throw error;\n    }\n  };\n\n  const assignRoles = async (roles: RoleMappingPayload[], groupId: string) => {\n    try {\n      const realmRoles = roles.filter(\n        (role) => !role.clientUniqueId && role.name,\n      );\n      const clientRoles = roles.filter(\n        (role) => role.clientUniqueId && role.name,\n      );\n\n      await adminClient.groups.addRealmRoleMappings({\n        id: groupId,\n        roles: realmRoles.map(({ id, name }) => ({ id, name: name! })),\n      });\n\n      await Promise.all(\n        clientRoles.map((clientRole) => {\n          if (clientRole.clientUniqueId && clientRole.name) {\n            return adminClient.groups.addClientRoleMappings({\n              id: groupId,\n              clientUniqueId: clientRole.clientUniqueId,\n              roles: [{ id: clientRole.id, name: clientRole.name }],\n            });\n          }\n          return Promise.resolve();\n        }),\n      );\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n\n  const submitForm = async (group: GroupRepresentation) => {\n    group.name = group.name?.trim();\n\n    try {\n      if (duplicateId && duplicateGroupDetails) {\n        await duplicateGroup(duplicateGroupDetails);\n      } else if (!id) {\n        await adminClient.groups.create(group);\n      } else if (rename) {\n        await adminClient.groups.update(\n          { id },\n          { ...rename, name: group.name },\n        );\n      } else {\n        await adminClient.groups.updateChildGroup({ id }, group);\n      }\n\n      refresh(rename ? { ...rename, name: group.name } : undefined);\n      handleModalToggle();\n      addAlert(\n        t(\n          rename\n            ? \"groupUpdated\"\n            : duplicateId\n              ? \"groupDuplicated\"\n              : \"groupCreated\",\n        ),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"couldNotCreateGroup\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={\n        rename\n          ? t(\"renameAGroup\")\n          : duplicateId\n            ? t(\"duplicateAGroup\")\n            : t(\"createAGroup\")\n      }\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <FormSubmitButton\n          formState={formState}\n          data-testid={`${rename ? \"rename\" : duplicateId ? \"duplicate\" : \"create\"}Group`}\n          key=\"confirm\"\n          form=\"group-form\"\n          allowInvalid\n          allowNonDirty\n        >\n          {t(rename ? \"rename\" : duplicateId ? \"duplicate\" : \"create\")}\n        </FormSubmitButton>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={handleModalToggle}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"group-form\" isHorizontal onSubmit={handleSubmit(submitForm)}>\n          {duplicateId && (\n            <Alert\n              variant=\"warning\"\n              component=\"h2\"\n              isInline\n              title={t(\"duplicateGroupWarning\")}\n            />\n          )}\n          <TextControl\n            name=\"name\"\n            label={t(\"name\")}\n            rules={{ required: t(\"required\") }}\n            autoFocus\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { ButtonVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\n\ntype DeleteConfirmProps = {\n  selectedRows: GroupRepresentation[];\n  show: boolean;\n  toggleDialog: () => void;\n  refresh: () => void;\n};\n\nexport const DeleteGroup = ({\n  selectedRows,\n  show,\n  toggleDialog,\n  refresh,\n}: DeleteConfirmProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const multiDelete = async () => {\n    try {\n      for (const group of selectedRows) {\n        await adminClient.groups.del({\n          id: group.id!,\n        });\n      }\n      refresh();\n      addAlert(t(\"groupDeleted\", { count: selectedRows.length }));\n    } catch (error) {\n      addError(\"groupDeleteError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"deleteConfirmTitle\", { count: selectedRows.length })}\n      messageKey={t(\"deleteConfirmGroup\", {\n        count: selectedRows.length,\n        groupName: selectedRows[0]?.name,\n      })}\n      continueButtonLabel=\"delete\"\n      continueButtonVariant={ButtonVariant.danger}\n      onConfirm={multiDelete}\n      open={show}\n      toggleDialog={toggleDialog}\n    />\n  );\n};\n","import {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\nimport { useSubGroups } from \"../SubGroupsContext\";\n\ntype GroupToolbarProps = {\n  toggleCreate: () => void;\n  toggleDelete: () => void;\n  kebabDisabled: boolean;\n};\n\nexport const GroupToolbar = ({\n  toggleCreate,\n  toggleDelete,\n  kebabDisabled,\n}: GroupToolbarProps) => {\n  const { t } = useTranslation();\n  const { currentGroup } = useSubGroups();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const [openKebab, toggleKebab] = useToggle();\n\n  if (!isManager) return <div />;\n\n  return (\n    <>\n      <ToolbarItem>\n        <Button\n          data-testid=\"openCreateGroupModal\"\n          variant=\"primary\"\n          onClick={toggleCreate}\n        >\n          {t(\"createGroup\")}\n        </Button>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Dropdown\n          onOpenChange={toggleKebab}\n          toggle={(ref) => (\n            <MenuToggle\n              ref={ref}\n              isExpanded={openKebab}\n              onClick={toggleKebab}\n              isDisabled={kebabDisabled}\n              variant=\"plain\"\n              aria-label=\"Actions\"\n            >\n              <EllipsisVIcon />\n            </MenuToggle>\n          )}\n          isOpen={openKebab}\n        >\n          <DropdownList>\n            <DropdownItem\n              key=\"action\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"delete\")}\n            </DropdownItem>\n          </DropdownList>\n        </Dropdown>\n      </ToolbarItem>\n    </>\n  );\n};\n","import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { GroupPickerDialog } from \"../../components/group/GroupPickerDialog\";\n\ntype MoveDialogProps = {\n  source: GroupRepresentation;\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst moveToRoot = (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation,\n) =>\n  source.id\n    ? adminClient.groups.updateRoot(source)\n    : adminClient.groups.create(source);\n\nconst moveToGroup = async (\n  adminClient: KeycloakAdminClient,\n  source: GroupRepresentation,\n  dest: GroupRepresentation,\n) => adminClient.groups.updateChildGroup({ id: dest.id! }, source);\n\nexport const MoveDialog = ({ source, onClose, refresh }: MoveDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const moveGroup = async (group?: GroupRepresentation[]) => {\n    try {\n      await (group\n        ? moveToGroup(adminClient, source, group[0])\n        : moveToRoot(adminClient, source));\n      refresh();\n      addAlert(t(\"moveGroupSuccess\"));\n    } catch (error) {\n      addError(\"moveGroupError\", error);\n    }\n  };\n\n  return (\n    <GroupPickerDialog\n      type=\"selectOne\"\n      filterGroups={[source]}\n      text={{\n        title: \"moveToGroup\",\n        ok: \"moveHere\",\n      }}\n      onClose={onClose}\n      onConfirm={moveGroup}\n      isMove\n    />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  GroupQuery,\n  SubGroupQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport { SearchInput, ToolbarItem } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../context/access/Access\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupToolbar } from \"./components/GroupToolbar\";\nimport { MoveDialog } from \"./components/MoveDialog\";\nimport { getLastId } from \"./groupIdUtils\";\n\ntype GroupTableProps = {\n  refresh: () => void;\n};\n\nexport const GroupTable = ({ refresh: viewRefresh }: GroupTableProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [isCreateModalOpen, toggleCreateOpen] = useToggle();\n  const [duplicateId, setDuplicateId] = useState<string>();\n  const [showDelete, toggleShowDelete] = useToggle();\n  const [move, setMove] = useState<GroupRepresentation>();\n  const { currentGroup } = useSubGroups();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [search, setSearch] = useState<string>();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const loader = async (first?: number, max?: number) => {\n    let groupsData = undefined;\n    if (id) {\n      const args: SubGroupQuery = {\n        search: search || \"\",\n        first: first,\n        max: max,\n        parentId: id,\n      };\n      groupsData = await adminClient.groups.listSubGroups(args);\n    } else {\n      const args: GroupQuery = {\n        search: search || \"\",\n        first: first || undefined,\n        max: max || undefined,\n      };\n      groupsData = await adminClient.groups.find(args);\n    }\n\n    return groupsData;\n  };\n\n  return (\n    <>\n      <DeleteGroup\n        show={showDelete}\n        toggleDialog={toggleShowDelete}\n        selectedRows={selectedRows}\n        refresh={() => {\n          refresh();\n          viewRefresh();\n          setSelectedRows([]);\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={rename.id}\n          rename={rename}\n          refresh={() => {\n            refresh();\n            viewRefresh();\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      {isCreateModalOpen && (\n        <GroupsModal\n          id={selectedRows[0]?.id || id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={() => {\n            setSelectedRows([]);\n            refresh();\n            viewRefresh();\n          }}\n        />\n      )}\n      {duplicateId && (\n        <GroupsModal\n          id={duplicateId}\n          duplicateId={duplicateId}\n          refresh={() => {\n            refresh();\n            viewRefresh();\n          }}\n          handleModalToggle={() => setDuplicateId(undefined)}\n        />\n      )}\n      {move && (\n        <MoveDialog\n          source={move}\n          refresh={() => {\n            setMove(undefined);\n            refresh();\n            viewRefresh();\n          }}\n          onClose={() => setMove(undefined)}\n        />\n      )}\n      <KeycloakDataTable\n        key={`${id}${key}`}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        canSelectAll\n        loader={loader}\n        ariaLabelKey=\"groups\"\n        isPaginated\n        isSearching={!!search}\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInput\n                data-testid=\"group-search\"\n                placeholder={t(\"filterGroups\")}\n                value={search}\n                onChange={(_, value) => {\n                  setSearch(value);\n                }}\n                onSearch={refresh}\n                onClear={() => {\n                  setSearch(\"\");\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            <GroupToolbar\n              toggleCreate={toggleCreateOpen}\n              toggleDelete={toggleShowDelete}\n              kebabDisabled={selectedRows!.length === 0}\n            />\n          </>\n        }\n        actions={\n          !isManager\n            ? []\n            : [\n                {\n                  title: t(\"rename\"),\n                  onRowClick: async (group) => {\n                    setRename(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"moveTo\"),\n                  onRowClick: async (group) => {\n                    setMove(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"createChildGroup\"),\n                  onRowClick: async (group) => {\n                    setSelectedRows([group]);\n                    toggleCreateOpen();\n                    return false;\n                  },\n                },\n                ...(!id\n                  ? [\n                      {\n                        title: t(\"duplicate\"),\n                        onRowClick: async (group: GroupRepresentation) => {\n                          setDuplicateId(group.id);\n                          return false;\n                        },\n                      },\n                    ]\n                  : []),\n                {\n                  isSeparator: true,\n                },\n                {\n                  title: t(\"delete\"),\n                  onRowClick: async (group: GroupRepresentation) => {\n                    setSelectedRows([group]);\n                    toggleShowDelete();\n                    return true;\n                  },\n                },\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groupName\",\n            cellRenderer: (group) =>\n              group.access?.view ? (\n                <Link key={group.id} to={`${location.pathname}/${group.id}`}>\n                  {group.name}\n                </Link>\n              ) : (\n                <span>{group.name}</span>\n              ),\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(`noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}`)}\n            instructions={t(\n              `noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}Instructions`,\n            )}\n            primaryActionText={t(\"createGroup\")}\n            onPrimaryAction={toggleCreateOpen}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport UserRepresentation from \"js/libs/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport {\n  Button,\n  ButtonVariant,\n  Checkbox,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useHelp } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { sortBy, uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { GroupPath } from \"../components/group/GroupPath\";\n\ntype CredentialDataDialogProps = {\n  user: UserRepresentation;\n  onClose: () => void;\n};\n\nexport const MembershipsModal = ({\n  user,\n  onClose,\n}: CredentialDataDialogProps) => {\n  const { t } = useTranslation();\n  const { adminClient } = useAdminClient();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [isDirectMembership, setDirectMembership] = useState(true);\n  const { enabled } = useHelp();\n  const alphabetize = (groupsList: GroupRepresentation[]) => {\n    return sortBy(groupsList, (group) => group.path?.toUpperCase());\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n    }\n\n    const joinedUserGroups = await adminClient.users.listGroups({\n      ...params,\n      id: user.id!,\n    });\n\n    const indirect: GroupRepresentation[] = [];\n    if (!isDirectMembership)\n      joinedUserGroups.forEach((g) => {\n        const paths = (\n          g.path?.substring(1).match(/((~\\/)|[^/])+/g) || []\n        ).slice(0, -1);\n\n        indirect.push(\n          ...paths.map((p) => ({\n            name: p,\n            path: g.path?.substring(0, g.path.indexOf(p) + p.length),\n          })),\n        );\n      });\n\n    return alphabetize(uniqBy([...joinedUserGroups, ...indirect], \"path\"));\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={t(\"showMembershipsTitle\", { username: user.username })}\n      data-testid=\"showMembershipsDialog\"\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.primary}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        className=\"keycloak_user-section_groups-table\"\n        isPaginated\n        ariaLabelKey=\"roleList\"\n        searchPlaceholderKey=\"searchGroup\"\n        toolbarItem={\n          <>\n            <Checkbox\n              label={t(\"directMembership\")}\n              key=\"direct-membership-check\"\n              id=\"kc-direct-membership-checkbox\"\n              onChange={() => {\n                setDirectMembership(!isDirectMembership);\n                refresh();\n              }}\n              isChecked={isDirectMembership}\n              className=\"pf-v5-u-mt-sm\"\n            />\n            {enabled && (\n              <Popover\n                aria-label=\"Basic popover\"\n                position=\"bottom\"\n                bodyContent={<div>{t(\"whoWillAppearPopoverTextUsers\")}</div>}\n              >\n                <Button\n                  variant=\"link\"\n                  className=\"kc-who-will-appear-button\"\n                  key=\"who-will-appear-button\"\n                  icon={<QuestionCircleIcon />}\n                >\n                  {t(\"whoWillAppearLinkTextUsers\")}\n                </Button>\n              </Popover>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"groupMembership\",\n            displayKey: \"groupMembership\",\n            cellRenderer: (group: GroupRepresentation) => group.name || \"-\",\n            transforms: [cellWidth(40)],\n          },\n          {\n            name: \"path\",\n            displayKey: \"path\",\n            cellRenderer: (group: GroupRepresentation) => (\n              <GroupPath group={group} />\n            ),\n            transforms: [cellWidth(45)],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noGroupMemberships\")}\n            instructions={t(\"noGroupMembershipsText\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { SubGroupQuery } from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport {\n  Action,\n  KeycloakDataTable,\n  ListEmptyState,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  Label,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon, InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport { emptyFormatter } from \"../util\";\nimport { MemberModal } from \"./MembersModal\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { getLastId } from \"./groupIdUtils\";\nimport { MembershipsModal } from \"./MembershipsModal\";\nimport useToggle from \"../utils/useToggle\";\n\nconst UserDetailLink = (user: UserRepresentation) => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  return (\n    <Link key={user.id} to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}{\" \"}\n      {!user.enabled && (\n        <Label color=\"red\" icon={<InfoCircleIcon />}>\n          {t(\"disabled\")}\n        </Label>\n      )}\n    </Link>\n  );\n};\n\nexport const Members = () => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const [includeSubGroup, setIncludeSubGroup] = useState(false);\n  const { currentGroup: group } = useSubGroups();\n  const [currentGroup, setCurrentGroup] = useState<GroupRepresentation>();\n  const [addMembers, setAddMembers] = useState(false);\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const [selectedUser, setSelectedUser] = useState<UserRepresentation>();\n  const [showMemberships, toggleShowMemberships] = useToggle();\n  const { hasAccess } = useAccess();\n\n  useFetch(\n    () => adminClient.groups.findOne({ id: group()!.id! }),\n    setCurrentGroup,\n    [],\n  );\n\n  const isManager =\n    hasAccess(\"manage-users\") || currentGroup?.access!.manageMembership;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  // this queries the subgroups using the new search paradigm but doesn't\n  // account for pagination and therefore isn't going to scale well\n  const getSubGroups = async (groupId?: string, count = 0) => {\n    let nestedGroups: GroupRepresentation[] = [];\n    if (!count || !groupId) {\n      return nestedGroups;\n    }\n    const args: SubGroupQuery = {\n      parentId: groupId,\n      first: 0,\n      max: count,\n    };\n    const subGroups: GroupRepresentation[] =\n      await adminClient.groups.listSubGroups(args);\n    nestedGroups = nestedGroups.concat(subGroups);\n\n    await Promise.all(\n      subGroups.map((g) => getSubGroups(g.id, g.subGroupCount)),\n    ).then((values: GroupRepresentation[][]) => {\n      values.forEach((groups) => (nestedGroups = nestedGroups.concat(groups)));\n    });\n    return nestedGroups;\n  };\n\n  const loader = async (first?: number, max?: number) => {\n    if (!id) {\n      return [];\n    }\n\n    let members = await adminClient.groups.listMembers({\n      id: id!,\n      briefRepresentation: true,\n      first,\n      max,\n    });\n\n    if (includeSubGroup && currentGroup?.subGroupCount && currentGroup.id) {\n      const subGroups = await getSubGroups(\n        currentGroup.id,\n        currentGroup.subGroupCount,\n      );\n      await Promise.all(\n        subGroups.map((g) =>\n          adminClient.groups.listMembers({\n            id: g.id!,\n            briefRepresentation: true,\n          }),\n        ),\n      ).then((values: UserRepresentation[][]) => {\n        values.forEach((users) => (members = members.concat(users)));\n      });\n      members = uniqBy(members, (member) => member.username);\n    }\n\n    return members;\n  };\n\n  if (!currentGroup) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      {addMembers && (\n        <MemberModal\n          membersQuery={(first, max) =>\n            adminClient.groups.listMembers({ id: id!, first, max })\n          }\n          onAdd={async (selectedRows) => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.users.addToGroup({ id: user.id!, groupId: id! }),\n                ),\n              );\n              addAlert(t(\"usersAdded\", { count: selectedRows.length }));\n            } catch (error) {\n              addError(\"usersAddedError\", error);\n            }\n          }}\n          onClose={() => {\n            setAddMembers(false);\n            refresh();\n          }}\n        />\n      )}\n      {showMemberships && (\n        <MembershipsModal\n          onClose={() => {\n            toggleShowMemberships();\n          }}\n          user={selectedUser!}\n        />\n      )}\n      <KeycloakDataTable\n        data-testid=\"members-table\"\n        key={`${id}${key}${includeSubGroup}`}\n        loader={loader}\n        ariaLabelKey=\"members\"\n        isPaginated\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        toolbarItem={\n          isManager && (\n            <>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"addMember\"\n                  variant=\"primary\"\n                  onClick={() => setAddMembers(true)}\n                >\n                  {t(\"addMember\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <Checkbox\n                  data-testid=\"includeSubGroupsCheck\"\n                  label={t(\"includeSubGroups\")}\n                  id=\"kc-include-sub-groups\"\n                  isChecked={includeSubGroup}\n                  onChange={() => setIncludeSubGroup(!includeSubGroup)}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  onOpenChange={(isOpen) => setIsKebabOpen(isOpen)}\n                  toggle={(ref) => (\n                    <MenuToggle\n                      ref={ref}\n                      variant=\"plain\"\n                      onClick={() => setIsKebabOpen(!isKebabOpen)}\n                      isExpanded={isKebabOpen}\n                      isDisabled={selectedRows.length === 0}\n                      aria-label=\"Actions\"\n                    >\n                      <EllipsisVIcon />\n                    </MenuToggle>\n                  )}\n                  shouldFocusToggleOnSelect\n                  isOpen={isKebabOpen}\n                >\n                  <DropdownList>\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      onClick={async () => {\n                        try {\n                          await Promise.all(\n                            selectedRows.map((user) =>\n                              adminClient.users.delFromGroup({\n                                id: user.id!,\n                                groupId: id!,\n                              }),\n                            ),\n                          );\n                          setIsKebabOpen(false);\n                          addAlert(\n                            t(\"usersLeft\", { count: selectedRows.length }),\n                          );\n                        } catch (error) {\n                          addError(\"usersLeftError\", error);\n                        }\n\n                        refresh();\n                      }}\n                    >\n                      {t(\"leave\")}\n                    </DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              </ToolbarItem>\n            </>\n          )\n        }\n        actions={[\n          ...(isManager\n            ? [\n                {\n                  title: t(\"leave\"),\n                  onRowClick: async (user) => {\n                    try {\n                      await adminClient.users.delFromGroup({\n                        id: user.id!,\n                        groupId: id!,\n                      });\n                      addAlert(t(\"usersLeft\", { count: 1 }));\n                    } catch (error) {\n                      addError(\"usersLeftError\", error);\n                    }\n                    return true;\n                  },\n                } as Action<UserRepresentation>,\n              ]\n            : []),\n          {\n            title: t(\"showMemberships\"),\n            onRowClick: (user) => {\n              setSelectedUser(user);\n              toggleShowMemberships();\n            },\n          } as Action<UserRepresentation>,\n        ]}\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"name\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n            displayKey: \"email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noUsersFound\")}\n            instructions={isManager ? t(\"emptyInstructions\") : undefined}\n            primaryActionText={isManager ? t(\"addMember\") : undefined}\n            onPrimaryAction={() => setAddMembers(true)}\n            secondaryActions={[\n              {\n                text: t(\"includeSubGroups\"),\n                onClick: () => setIncludeSubGroup(true),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  Checkbox,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  InputGroup,\n  InputGroupItem,\n  MenuToggle,\n  Spinner,\n  Tooltip,\n  TreeView,\n  TreeViewDataItem,\n} from \"@patternfly/react-core\";\n\nimport {\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport { AngleRightIcon, EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { unionBy } from \"lodash-es\";\nimport { useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { GroupsModal } from \"../GroupsModal\";\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { toGroups } from \"../routes/Groups\";\nimport { DeleteGroup } from \"./DeleteGroup\";\nimport { MoveDialog } from \"./MoveDialog\";\n\nimport \"./group-tree.css\";\n\ntype ExtendedTreeViewDataItem = TreeViewDataItem & {\n  access?: Record<string, boolean>;\n};\n\ntype GroupTreeContextMenuProps = {\n  group: GroupRepresentation;\n  refresh: () => void;\n};\n\nexport function countGroups(groups: GroupRepresentation[]) {\n  let count = groups.length;\n  for (const group of groups) {\n    if (group.subGroups) {\n      count += countGroups(group.subGroups);\n    }\n  }\n  return count;\n}\n\nconst GroupTreeContextMenu = ({\n  group,\n  refresh,\n}: GroupTreeContextMenuProps) => {\n  const { t } = useTranslation();\n\n  const [isOpen, toggleOpen] = useToggle();\n  const [renameOpen, toggleRenameOpen] = useToggle();\n  const [createOpen, toggleCreateOpen] = useToggle();\n  const [moveOpen, toggleMoveOpen] = useToggle();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {renameOpen && (\n        <GroupsModal\n          id={group.id}\n          rename={group}\n          refresh={() => {\n            navigate(toGroups({ realm }));\n            refresh();\n          }}\n          handleModalToggle={toggleRenameOpen}\n        />\n      )}\n      {createOpen && (\n        <GroupsModal\n          id={group.id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={refresh}\n        />\n      )}\n      {moveOpen && (\n        <MoveDialog source={group} refresh={refresh} onClose={toggleMoveOpen} />\n      )}\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[group]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      <Dropdown\n        popperProps={{\n          position: \"right\",\n        }}\n        onOpenChange={toggleOpen}\n        toggle={(ref) => (\n          <MenuToggle\n            ref={ref}\n            onClick={toggleOpen}\n            isExpanded={isOpen}\n            variant=\"plain\"\n            aria-label=\"Actions\"\n          >\n            <EllipsisVIcon />\n          </MenuToggle>\n        )}\n        isOpen={isOpen}\n      >\n        <DropdownList>\n          <DropdownItem key=\"rename\" onClick={toggleRenameOpen}>\n            {t(\"rename\")}\n          </DropdownItem>\n          <DropdownItem key=\"move\" onClick={toggleMoveOpen}>\n            {t(\"moveTo\")}\n          </DropdownItem>\n          <DropdownItem key=\"create\" onClick={toggleCreateOpen}>\n            {t(\"createChildGroup\")}\n          </DropdownItem>\n          <Divider key=\"separator\" />\n          <DropdownItem key=\"delete\" onClick={toggleDeleteOpen}>\n            {t(\"delete\")}\n          </DropdownItem>\n        </DropdownList>\n      </Dropdown>\n    </>\n  );\n};\n\ntype GroupTreeProps = {\n  refresh: () => void;\n  canViewDetails: boolean;\n};\n\nconst SUBGROUP_COUNT = 50;\n\nconst TreeLoading = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Spinner size=\"sm\" /> {t(\"spinnerLoading\")}\n    </>\n  );\n};\n\nconst LOADING_TREE = [\n  {\n    name: <TreeLoading />,\n  },\n];\n\nexport const GroupTree = ({\n  refresh: viewRefresh,\n  canViewDetails,\n}: GroupTreeProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const { addAlert } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const [data, setData] = useState<ExtendedTreeViewDataItem[]>();\n  const { subGroups, clear } = useSubGroups();\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(20);\n  const [first, setFirst] = useState(0);\n  const prefFirst = useRef(0);\n  const prefMax = useRef(20);\n  const [count, setCount] = useState(0);\n  const [exact, setExact] = useState(false);\n  const [activeItem, setActiveItem] = useState<ExtendedTreeViewDataItem>();\n\n  const [firstSub, setFirstSub] = useState(0);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n    viewRefresh();\n  };\n\n  const mapGroup = (\n    group: GroupRepresentation,\n    refresh: () => void,\n  ): ExtendedTreeViewDataItem => {\n    const hasSubGroups = group.subGroupCount;\n    return {\n      id: group.id,\n      name: (\n        <Tooltip content={group.name}>\n          <span>{group.name}</span>\n        </Tooltip>\n      ),\n      access: group.access || {},\n      children: hasSubGroups\n        ? search.length === 0\n          ? LOADING_TREE\n          : group.subGroups?.map((g) => mapGroup(g, refresh))\n        : undefined,\n      action: (hasAccess(\"manage-users\") || group.access?.manage) && (\n        <GroupTreeContextMenu group={group} refresh={refresh} />\n      ),\n      defaultExpanded: subGroups.map((g) => g.id).includes(group.id),\n    };\n  };\n\n  useFetch(\n    async () => {\n      const groups = await fetchAdminUI<GroupRepresentation[]>(\n        adminClient,\n        \"groups\",\n        Object.assign(\n          {\n            first: `${first}`,\n            max: `${max + 1}`,\n            exact: `${exact}`,\n            global: `${search !== \"\"}`,\n          },\n          search === \"\" ? null : { search },\n        ),\n      );\n      let subGroups: GroupRepresentation[] = [];\n      if (activeItem) {\n        subGroups = await fetchAdminUI<GroupRepresentation[]>(\n          adminClient,\n          `groups/${activeItem.id}/children`,\n          {\n            first: `${firstSub}`,\n            max: `${SUBGROUP_COUNT}`,\n          },\n        );\n      }\n      return { groups, subGroups };\n    },\n    ({ groups, subGroups }) => {\n      if (activeItem) {\n        const found = findGroup(data || [], activeItem.id!, []);\n        if (found.length && subGroups.length) {\n          const foundTreeItem = found.pop()!;\n          foundTreeItem.children = [\n            ...(unionBy(foundTreeItem.children || []).splice(0, SUBGROUP_COUNT),\n            subGroups.map((g) => mapGroup(g, refresh), \"id\")),\n            ...(subGroups.length === SUBGROUP_COUNT\n              ? [\n                  {\n                    id: \"next\",\n                    name: (\n                      <Button\n                        variant=\"plain\"\n                        onClick={() => setFirstSub(firstSub + SUBGROUP_COUNT)}\n                      >\n                        <AngleRightIcon />\n                      </Button>\n                    ),\n                  },\n                ]\n              : []),\n          ];\n        }\n      }\n      if (search || prefFirst.current !== first || prefMax.current !== max) {\n        setData(groups.map((g) => mapGroup(g, refresh)));\n      } else {\n        setData(\n          unionBy(\n            data,\n            groups.map((g) => mapGroup(g, refresh)),\n            \"id\",\n          ),\n        );\n      }\n      setCount(countGroups(groups));\n      prefFirst.current = first;\n      prefMax.current = max;\n    },\n    [key, first, firstSub, max, search, exact, activeItem],\n  );\n\n  const findGroup = (\n    groups: ExtendedTreeViewDataItem[],\n    id: string,\n    path: ExtendedTreeViewDataItem[],\n  ) => {\n    for (let index = 0; index < groups.length; index++) {\n      const group = groups[index];\n      if (group.id === id) {\n        path.push(group);\n        return path;\n      }\n\n      if (group.children) {\n        path.push(group);\n        findGroup(group.children, id, path);\n        if (path[path.length - 1].id !== id) {\n          path.pop();\n        }\n      }\n    }\n    return path;\n  };\n\n  const nav = (item: TreeViewDataItem, data: ExtendedTreeViewDataItem[]) => {\n    if (item.id === \"next\") return;\n    setActiveItem(item);\n\n    const path = findGroup(data, item.id!, []);\n    if (!subGroups.every(({ id }) => path.find((t) => t.id === id))) clear();\n    if (\n      canViewDetails ||\n      path.at(-1)?.access?.view ||\n      subGroups.at(-1)?.access?.view\n    ) {\n      navigate(\n        toGroups({\n          realm,\n          id: path.map((g) => g.id).join(\"/\"),\n        }),\n      );\n    } else {\n      addAlert(t(\"noViewRights\"), AlertVariant.warning);\n      navigate(toGroups({ realm }));\n    }\n  };\n\n  return data ? (\n    <PaginatingTableToolbar\n      count={count}\n      first={first}\n      max={max}\n      onNextClick={setFirst}\n      onPreviousClick={setFirst}\n      onPerPageSelect={(first, max) => {\n        setFirst(first);\n        setMax(max);\n      }}\n      inputGroupName=\"searchForGroups\"\n      inputGroupPlaceholder={t(\"searchForGroups\")}\n      inputGroupOnEnter={setSearch}\n      toolbarItem={\n        <InputGroup className=\"pf-v5-u-pt-sm\">\n          <InputGroupItem>\n            <Checkbox\n              id=\"exact\"\n              data-testid=\"exact-search\"\n              name=\"exact\"\n              isChecked={exact}\n              onChange={(_event, value) => setExact(value)}\n              className=\"pf-v5-u-mr-xs\"\n            />\n          </InputGroupItem>\n          <InputGroupItem>\n            <label htmlFor=\"exact\" className=\"pf-v5-u-pl-sm\">\n              {t(\"exactSearch\")}\n            </label>\n          </InputGroupItem>\n        </InputGroup>\n      }\n    >\n      {data.length > 0 && (\n        <TreeView\n          data={data.slice(0, max)}\n          allExpanded={search.length > 0}\n          activeItems={activeItem ? [activeItem] : undefined}\n          hasGuides\n          hasSelectableNodes\n          className=\"keycloak_groups_treeview\"\n          onExpand={(_, item) => {\n            nav(item, data);\n          }}\n          onSelect={(_, item) => {\n            nav(item, data);\n          }}\n        />\n      )}\n    </PaginatingTableToolbar>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  DropdownItem,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabTitleText,\n  Tabs,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { AngleLeftIcon, TreeIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { GroupBreadCrumbs } from \"../components/bread-crumb/GroupBreadCrumbs\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupAttributes } from \"./GroupAttributes\";\nimport { GroupRoleMapping } from \"./GroupRoleMapping\";\nimport { GroupTable } from \"./GroupTable\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { Members } from \"./Members\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupTree } from \"./components/GroupTree\";\nimport { getId, getLastId } from \"./groupIdUtils\";\nimport { toGroups } from \"./routes/Groups\";\n\nimport \"./GroupsSection.css\";\n\nexport default function GroupsSection() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const { subGroups, setSubGroups, currentGroup } = useSubGroups();\n  const { realm } = useRealm();\n\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const [open, toggle] = useToggle(true);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const canViewPermissions =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) &&\n    hasAccess(\"manage-authorization\", \"manage-users\", \"manage-clients\");\n  const canManageGroup =\n    hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n  const canManageRoles = hasAccess(\"manage-users\");\n  const canViewDetails =\n    hasAccess(\"query-groups\", \"view-users\") ||\n    hasAccess(\"manage-users\", \"query-groups\");\n  const canViewMembers =\n    hasAccess(\"view-users\") ||\n    currentGroup()?.access?.viewMembers ||\n    currentGroup()?.access?.manageMembers;\n\n  useFetch(\n    async () => {\n      const ids = getId(location.pathname);\n      const isNavigationStateInValid = ids && ids.length > subGroups.length;\n\n      if (isNavigationStateInValid) {\n        const groups: GroupRepresentation[] = [];\n        for (const i of ids!) {\n          let group = undefined;\n          if (i !== \"search\") {\n            group = await adminClient.groups.findOne({ id: i });\n          } else {\n            group = { name: t(\"searchGroups\"), id: \"search\" };\n          }\n          if (group) {\n            groups.push(group);\n          } else {\n            throw new Error(t(\"notFound\"));\n          }\n        }\n        return groups;\n      }\n      return [];\n    },\n    (groups: GroupRepresentation[]) => {\n      if (groups.length) setSubGroups(groups);\n    },\n    [id],\n  );\n\n  return (\n    <>\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[currentGroup()!]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={id}\n          rename={rename}\n          refresh={(group) => {\n            refresh();\n            setSubGroups([...subGroups.slice(0, subGroups.length - 1), group!]);\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      <PageSection variant={PageSectionVariants.light} className=\"pf-v5-u-p-0\">\n        <Drawer isInline isExpanded={open} key={key} position=\"left\">\n          <DrawerContent\n            panelContent={\n              <DrawerPanelContent isResizable>\n                <DrawerHead>\n                  <GroupTree\n                    refresh={refresh}\n                    canViewDetails={canViewDetails}\n                  />\n                </DrawerHead>\n              </DrawerPanelContent>\n            }\n          >\n            <DrawerContentBody>\n              <Tooltip content={open ? t(\"hide\") : t(\"show\")}>\n                <Button\n                  aria-label={open ? t(\"hide\") : t(\"show\")}\n                  variant=\"plain\"\n                  icon={open ? <AngleLeftIcon /> : <TreeIcon />}\n                  onClick={toggle}\n                />\n              </Tooltip>\n              <GroupBreadCrumbs />\n              <ViewHeader\n                titleKey={!id ? \"groups\" : currentGroup()?.name!}\n                subKey={!id ? \"groupsDescription\" : \"\"}\n                helpUrl={!id ? helpUrls.groupsUrl : \"\"}\n                divider={!id}\n                dropdownItems={\n                  id && canManageGroup\n                    ? [\n                        <DropdownItem\n                          data-testid=\"renameGroupAction\"\n                          key=\"renameGroup\"\n                          onClick={() => setRename(currentGroup())}\n                        >\n                          {t(\"renameGroup\")}\n                        </DropdownItem>,\n                        <DropdownItem\n                          data-testid=\"deleteGroup\"\n                          key=\"deleteGroup\"\n                          onClick={toggleDeleteOpen}\n                        >\n                          {t(\"deleteGroup\")}\n                        </DropdownItem>,\n                      ]\n                    : undefined\n                }\n              />\n              {subGroups.length > 0 && (\n                <Tabs\n                  inset={{\n                    default: \"insetNone\",\n                    md: \"insetSm\",\n                    xl: \"insetLg\",\n                    \"2xl\": \"inset2xl\",\n                  }}\n                  activeKey={activeTab}\n                  onSelect={(_, key) => setActiveTab(key as number)}\n                  isBox\n                  mountOnEnter\n                  unmountOnExit\n                >\n                  <Tab\n                    data-testid=\"groups\"\n                    eventKey={0}\n                    title={<TabTitleText>{t(\"childGroups\")}</TabTitleText>}\n                  >\n                    <GroupTable refresh={refresh} />\n                  </Tab>\n                  {canViewMembers && (\n                    <Tab\n                      data-testid=\"members\"\n                      eventKey={1}\n                      title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n                    >\n                      <Members />\n                    </Tab>\n                  )}\n                  <Tab\n                    data-testid=\"attributes\"\n                    eventKey={2}\n                    title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n                  >\n                    <GroupAttributes />\n                  </Tab>\n                  {canManageRoles && (\n                    <Tab\n                      eventKey={3}\n                      data-testid=\"role-mapping-tab\"\n                      title={<TabTitleText>{t(\"roleMapping\")}</TabTitleText>}\n                    >\n                      <GroupRoleMapping id={id!} name={currentGroup()?.name!} />\n                    </Tab>\n                  )}\n                  {canViewPermissions && (\n                    <Tab\n                      eventKey={4}\n                      data-testid=\"permissionsTab\"\n                      title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                    >\n                      <PermissionsTab id={id} type=\"groups\" />\n                    </Tab>\n                  )}\n                </Tabs>\n              )}\n              {subGroups.length === 0 && <GroupTable refresh={refresh} />}\n            </DrawerContentBody>\n          </DrawerContent>\n        </Drawer>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["DrawerPanelBody","_a","className","children","hasNoPadding","props","__rest","React","css","styles","DrawerHead","TreeViewList","isNested","isMultiSelectable","toolbar","ariaLabel","ariaLabelledby","Divider","TreeViewListItemBase","name","title","id","isExpanded","defaultExpanded","onSelect","onExpand","onCollapse","onCheck","hasCheckbox","checkProps","hasBadge","customBadgeContent","badgeProps","isSelectable","isCompact","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","internalIsExpanded","setIsExpanded","useState","useEffect","Component","ToggleComponent","renderToggle","randomId","evt","AngleRightIcon","isCheckboxChecked","renderCheck","elem","iconRendered","renderNodeContent","content","badgeRendered","Badge","isSelected","item","GenerateId","TreeViewListItem","prevProps","nextProps","prevIncludes","nextIncludes","TreeViewRoot","event","_b","_c","_d","_e","_f","_g","activeElement","key","treeItems","el","KeyTypes","handleArrows","element","isExpandable","parentList","parentButton","childElement","treeNodes","canUseDOM","firstToggle","firstInput","firstTextButton","hasCheckboxes","hasGuides","variant","hasSelectableNodes","TreeView","data","hasBadges","defaultAllExpanded","allExpanded","itemToCheck","treeViewList","TreeIconConfig","TreeIcon","createIcon","unionBy","baseRest","arrays","iteratee","last","isArrayLikeObject","baseUniq","baseFlatten","baseIteratee","GroupBreadCrumbs","t","useTranslation","clear","remove","subGroups","useSubGroups","realm","useRealm","location","useLocation","pathname","jsxs","Breadcrumb","jsx","BreadcrumbItem","Link","group","isLastGroup","getId","pathParts","getLastId","GroupAttributes","adminClient","useAdminClient","addAlert","addError","useAlerts","form","useForm","currentGroup","setCurrentGroup","useFetch","arrayToKeyValue","save","attributeForm","attributes","convertFormValuesToObject","AlertVariant","error","PageSection","PageSectionVariants","AttributesForm","GroupRoleMapping","RoleMapping","rows","realmRoles","row","GroupsModal","rename","duplicateId","handleModalToggle","refresh","duplicateGroupDetails","setDuplicateGroupDetails","handleSubmit","formState","fetchClientRoleMappings","groupId","clientRoleMappings","clients","client","clientRoles","role","duplicateGroup","sourceGroup","parentId","isSubGroup","newGroup","createdGroup","members","member","permissions","realmRolesPayload","clientRolesPayload","clientRoleMapping","rolesToAssign","assignRoles","childGroup","childAttributes","roles","clientRole","submitForm","Modal","ModalVariant","FormSubmitButton","Button","ButtonVariant","FormProvider","Form","Alert","TextControl","DeleteGroup","selectedRows","show","toggleDialog","multiDelete","ConfirmDialogModal","GroupToolbar","toggleCreate","toggleDelete","kebabDisabled","hasAccess","useAccess","isManager","openKebab","toggleKebab","useToggle","Fragment","ToolbarItem","Dropdown","ref","MenuToggle","EllipsisVIcon","DropdownList","DropdownItem","moveToRoot","source","moveToGroup","dest","MoveDialog","onClose","GroupPickerDialog","GroupTable","viewRefresh","setSelectedRows","setRename","isCreateModalOpen","toggleCreateOpen","setDuplicateId","showDelete","toggleShowDelete","move","setMove","setKey","search","setSearch","loader","first","max","groupsData","args","KeycloakDataTable","SearchInput","_","value","ListEmptyState","MembershipsModal","user","isDirectMembership","setDirectMembership","enabled","useHelp","alphabetize","groupsList","sortBy","params","searchParam","joinedUserGroups","indirect","paths","p","uniqBy","Checkbox","Popover","QuestionCircleIcon","cellWidth","GroupPath","UserDetailLink","toUser","Label","InfoCircleIcon","Members","includeSubGroup","setIncludeSubGroup","addMembers","setAddMembers","isKebabOpen","setIsKebabOpen","selectedUser","setSelectedUser","showMemberships","toggleShowMemberships","getSubGroups","count","nestedGroups","g","values","groups","users","MemberModal","isOpen","emptyFormatter","KeycloakSpinner","countGroups","GroupTreeContextMenu","toggleOpen","renameOpen","toggleRenameOpen","createOpen","moveOpen","toggleMoveOpen","deleteOpen","toggleDeleteOpen","navigate","useNavigate","toGroups","SUBGROUP_COUNT","TreeLoading","Spinner","LOADING_TREE","GroupTree","canViewDetails","setData","setMax","setFirst","prefFirst","useRef","prefMax","setCount","exact","setExact","activeItem","setActiveItem","firstSub","setFirstSub","mapGroup","hasSubGroups","Tooltip","fetchAdminUI","found","findGroup","foundTreeItem","path","index","nav","PaginatingTableToolbar","InputGroup","InputGroupItem","_event","GroupsSection","activeTab","setActiveTab","setSubGroups","open","toggle","canViewPermissions","useIsFeatureEnabled","Feature","canManageGroup","canManageRoles","canViewMembers","ids","i","Drawer","DrawerContent","DrawerPanelContent","DrawerContentBody","AngleLeftIcon","ViewHeader","helpUrls","Tabs","Tab","TabTitleText","PermissionsTab"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}