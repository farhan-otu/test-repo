{"version":3,"file":"EditUser-CVACYtI-.js","sources":["../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isEmpty.js","../../../../../../../src/organizations/OrganizationModal.tsx","../../../../../../../src/user/Organizations.tsx","../../../../../../../src/user/UserAttributes.tsx","../../../../../../../src/user/UserConsents.tsx","../../../../../../../src/user/user-credentials/CredentialDataDialog.tsx","../../../../../../../src/user/user-credentials/CredentialRow.tsx","../../../../../../../src/user/user-credentials/InlineLabelEdit.tsx","../../../../../../../src/user/user-credentials/LifespanField.tsx","../../../../../../../src/user/user-credentials/ResetCredentialDialog.tsx","../../../../../../../src/user/user-credentials/ResetPasswordDialog.tsx","../../../../../../../src/user/UserCredentials.tsx","../../../../../../../src/user/UserGroups.tsx","../../../../../../../src/user/UserIdPModal.tsx","../../../../../../../src/user/UserIdentityProviderLinks.tsx","../../../../../../../src/user/UserRoleMapping.tsx","../../../../../../../src/user/UserSessions.tsx","../../../../../../../src/user/EditUser.tsx"],"sourcesContent":["import baseKeys from './_baseKeys.js';\nimport getTag from './_getTag.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isArrayLike from './isArrayLike.js';\nimport isBuffer from './isBuffer.js';\nimport isPrototype from './_isPrototype.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmpty;\n","import OrganizationRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/organizationRepresentation\";\nimport UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { TableText } from \"@patternfly/react-table\";\nimport { differenceBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\n\ntype OrganizationModalProps = {\n  isJoin?: boolean;\n  existingOrgs: OrganizationRepresentation[];\n  onAdd: (orgs: OrganizationRepresentation[]) => Promise<void>;\n  onClose: () => void;\n};\n\nexport const OrganizationModal = ({\n  isJoin = true,\n  existingOrgs,\n  onAdd,\n  onClose,\n}: OrganizationModalProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params = {\n      first,\n      search,\n      max: max! + existingOrgs.length,\n    };\n\n    const orgs = await adminClient.organizations.find(params);\n    return differenceBy(orgs, existingOrgs, \"id\");\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={isJoin ? t(\"joinOrganization\") : t(\"sendInvitation\")}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"join\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={async () => {\n            await onAdd(selectedRows);\n            onClose();\n          }}\n        >\n          {isJoin ? t(\"join\") : t(\"send\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"organizationsList\"\n        searchPlaceholderKey=\"searchOrganization\"\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"organizationName\",\n          },\n          {\n            name: \"description\",\n            cellRenderer: (row) => (\n              <TableText wrapModifier=\"truncate\">{row.description}</TableText>\n            ),\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n","import OrganizationRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/organizationRepresentation\";\nimport UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  ListEmptyState,\n  OrganizationTable,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { OrganizationModal } from \"../organizations/OrganizationModal\";\nimport { toEditOrganization } from \"../organizations/routes/EditOrganization\";\nimport useToggle from \"../utils/useToggle\";\nimport { UserParams } from \"./routes/User\";\nimport { toUsers } from \"./routes/Users\";\nimport { CheckboxFilterComponent } from \"../components/dynamic/CheckboxFilterComponent\";\nimport { capitalizeFirstLetterFormatter } from \"../util\";\nimport { SearchInputComponent } from \"../components/dynamic/SearchInputComponent\";\n\ntype OrganizationProps = {\n  user: UserRepresentation;\n};\n\ntype MembershipTypeRepresentation = OrganizationRepresentation &\n  UserRepresentation & {\n    membershipType?: string;\n  };\n\nexport const Organizations = ({ user }: OrganizationProps) => {\n  const { adminClient } = useAdminClient();\n  const { t } = useTranslation();\n  const { id } = useParams<UserParams>();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [joinToggle, toggle, setJoinToggle] = useToggle();\n  const [shouldJoin, setShouldJoin] = useState(true);\n  const [openOrganizationPicker, setOpenOrganizationPicker] = useState(false);\n  const [userOrgs, setUserOrgs] = useState<OrganizationRepresentation[]>([]);\n  const [selectedOrgs, setSelectedOrgs] = useState<\n    OrganizationRepresentation[]\n  >([]);\n  const [searchText, setSearchText] = useState<string>(\"\");\n  const [searchTriggerText, setSearchTriggerText] = useState<string>(\"\");\n  const [filteredMembershipTypes, setFilteredMembershipTypes] = useState<\n    string[]\n  >([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const membershipOptions = [\n    { value: \"Managed\", label: \"Managed\" },\n    { value: \"Unmanaged\", label: \"Unmanaged\" },\n  ];\n\n  const onToggleClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const onSelect = (_event: any, value: string) => {\n    if (filteredMembershipTypes.includes(value)) {\n      setFilteredMembershipTypes(\n        filteredMembershipTypes.filter((item) => item !== value),\n      );\n    } else {\n      setFilteredMembershipTypes([...filteredMembershipTypes, value]);\n    }\n    setIsOpen(false);\n    refresh();\n  };\n\n  useFetch(\n    async () => {\n      const userOrganizations =\n        await adminClient.organizations.memberOrganizations({ userId: id! });\n\n      const userOrganizationsWithMembershipTypes = await Promise.all(\n        userOrganizations.map(async (org) => {\n          const orgId = org.id;\n          const memberships: MembershipTypeRepresentation[] =\n            await adminClient.organizations.listMembers({\n              orgId: orgId!,\n            });\n\n          const userMemberships = memberships.filter(\n            (membership) => membership.username === user.username,\n          );\n\n          const membershipType = userMemberships.map((membership) => {\n            const formattedMembershipType = capitalizeFirstLetterFormatter()(\n              membership.membershipType,\n            );\n            return formattedMembershipType;\n          });\n\n          return { ...org, membershipType };\n        }),\n      );\n\n      let filteredOrgs = userOrganizationsWithMembershipTypes;\n      if (filteredMembershipTypes.length > 0) {\n        filteredOrgs = filteredOrgs.filter((org) =>\n          org.membershipType?.some((type) =>\n            filteredMembershipTypes.includes(type as string),\n          ),\n        );\n      }\n\n      if (searchTriggerText) {\n        filteredOrgs = filteredOrgs.filter((org) =>\n          org.name?.toLowerCase().includes(searchTriggerText.toLowerCase()),\n        );\n      }\n\n      return filteredOrgs;\n    },\n    setUserOrgs,\n    [key, filteredMembershipTypes, searchTriggerText],\n  );\n\n  const handleChange = (value: string) => {\n    setSearchText(value);\n  };\n\n  const handleSearch = () => {\n    setSearchTriggerText(searchText);\n    refresh();\n  };\n\n  const clearInput = () => {\n    setSearchText(\"\");\n    setSearchTriggerText(\"\");\n    refresh();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"removeConfirmOrganizationTitle\",\n    messageKey: t(\"organizationRemoveConfirm\", { count: selectedOrgs.length }),\n    continueButtonLabel: \"remove\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(\n          selectedOrgs.map((org) =>\n            adminClient.organizations.delMember({\n              orgId: org.id!,\n              userId: id!,\n            }),\n          ),\n        );\n        addAlert(t(\"organizationRemovedSuccess\"));\n        const user = await adminClient.users.findOne({ id: id! });\n        if (!user) {\n          navigate(toUsers({ realm: realm }));\n        }\n        setSelectedOrgs([]);\n        refresh();\n      } catch (error) {\n        addError(\"organizationRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {openOrganizationPicker && (\n        <OrganizationModal\n          isJoin={shouldJoin}\n          existingOrgs={userOrgs}\n          onClose={() => setOpenOrganizationPicker(false)}\n          onAdd={async (orgs) => {\n            try {\n              await Promise.all(\n                orgs.map((org) => {\n                  const form = new FormData();\n                  form.append(\"id\", id!);\n                  return shouldJoin\n                    ? adminClient.organizations.addMember({\n                        orgId: org.id!,\n                        userId: id!,\n                      })\n                    : adminClient.organizations.inviteExistingUser(\n                        { orgId: org.id! },\n                        form,\n                      );\n                }),\n              );\n              addAlert(\n                t(\n                  shouldJoin\n                    ? \"userAddedOrganization\"\n                    : \"userInvitedOrganization\",\n                  { count: orgs.length },\n                ),\n              );\n              refresh();\n            } catch (error) {\n              addError(\n                shouldJoin ? \"userAddedOrganizationError\" : \"userInvitedError\",\n                error,\n              );\n            }\n          }}\n        />\n      )}\n      <DeleteConfirm />\n      <OrganizationTable\n        link={({ organization, children }) => (\n          <Link\n            key={organization.id}\n            to={toEditOrganization({\n              realm,\n              id: organization.id!,\n              tab: \"settings\",\n            })}\n          >\n            {children}\n          </Link>\n        )}\n        loader={userOrgs}\n        isSearching={\n          searchTriggerText.length > 0 || filteredMembershipTypes.length > 0\n        }\n        onSelect={(orgs) => setSelectedOrgs(orgs)}\n        deleteLabel=\"remove\"\n        onDelete={(org) => {\n          setSelectedOrgs([org]);\n          toggleDeleteDialog();\n        }}\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInputComponent\n                value={searchText}\n                placeholder={t(\"searchMembers\")}\n                onChange={handleChange}\n                onSearch={handleSearch}\n                onClear={clearInput}\n                aria-label={t(\"searchMembers\")}\n              />\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                onOpenChange={setJoinToggle}\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    id=\"toggle-id\"\n                    onClick={toggle}\n                    variant=\"primary\"\n                  >\n                    {t(\"joinOrganization\")}\n                  </MenuToggle>\n                )}\n                isOpen={joinToggle}\n              >\n                <DropdownList>\n                  <DropdownItem\n                    key=\"join\"\n                    onClick={() => {\n                      setShouldJoin(true);\n                      setOpenOrganizationPicker(true);\n                    }}\n                  >\n                    {t(\"joinOrganization\")}\n                  </DropdownItem>\n                  <DropdownItem\n                    key=\"invite\"\n                    onClick={() => {\n                      setShouldJoin(false);\n                      setOpenOrganizationPicker(true);\n                    }}\n                  >\n                    {t(\"sendInvite\")}\n                  </DropdownItem>\n                </DropdownList>\n              </Dropdown>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                data-testid=\"removeOrganization\"\n                variant=\"secondary\"\n                isDisabled={selectedOrgs.length === 0}\n                onClick={() => toggleDeleteDialog()}\n              >\n                {t(\"remove\")}\n              </Button>\n            </ToolbarItem>\n            <ToolbarItem>\n              <CheckboxFilterComponent\n                filterPlaceholderText={t(\"filterByMembershipType\")}\n                isOpen={isOpen}\n                options={membershipOptions}\n                onOpenChange={(nextOpen) => setIsOpen(nextOpen)}\n                onToggleClick={onToggleClick}\n                onSelect={onSelect}\n                selectedItems={filteredMembershipTypes}\n                width={\"260px\"}\n              />\n            </ToolbarItem>\n          </>\n        }\n      >\n        <ListEmptyState\n          message={t(\"emptyUserOrganizations\")}\n          instructions={t(\"emptyUserOrganizationsInstructions\")}\n          secondaryActions={[\n            {\n              text: t(\"joinOrganization\"),\n              onClick: () => {\n                setShouldJoin(true);\n                setOpenOrganizationPicker(true);\n              },\n            },\n            {\n              text: t(\"sendInvitation\"),\n              onClick: () => {\n                setShouldJoin(false);\n                setOpenOrganizationPicker(true);\n              },\n            },\n          ]}\n        />\n      </OrganizationTable>\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { PageSection, PageSectionVariants } from \"@patternfly/react-core\";\nimport { UseFormReturn, useFormContext } from \"react-hook-form\";\n\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport { UserFormFields, toUserFormFields } from \"./form-state\";\nimport {\n  UnmanagedAttributePolicy,\n  UserProfileConfig,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\n\ntype UserAttributesProps = {\n  user: UserRepresentation;\n  save: (user: UserFormFields) => void;\n  upConfig?: UserProfileConfig;\n};\n\nexport const UserAttributes = ({\n  user,\n  save,\n  upConfig,\n}: UserAttributesProps) => {\n  const form = useFormContext<UserFormFields>();\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form as UseFormReturn<AttributeForm>}\n        save={save}\n        fineGrainedAccess={user.access?.manage}\n        reset={() =>\n          form.reset({\n            ...form.getValues(),\n            attributes: toUserFormFields(user).attributes,\n          })\n        }\n        name=\"unmanagedAttributes\"\n        isDisabled={\n          UnmanagedAttributePolicy.AdminView ==\n          upConfig?.unmanagedAttributePolicy\n        }\n      />\n    </PageSection>\n  );\n};\n","import type UserConsentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userConsentRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n} from \"@patternfly/react-core\";\nimport { CubesIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { emptyFormatter } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UserConsents = () => {\n  const { adminClient } = useAdminClient();\n\n  const [selectedClient, setSelectedClient] =\n    useState<UserConsentRepresentation>();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n\n  const { id } = useParams<{ id: string }>();\n  const alphabetize = (consentsList: UserConsentRepresentation[]) => {\n    return sortBy(consentsList, (client) => client.clientId?.toUpperCase());\n  };\n\n  const refresh = () => setKey(new Date().getTime());\n\n  const loader = async () => {\n    const getConsents = await adminClient.users.listConsents({ id });\n\n    return alphabetize(getConsents);\n  };\n\n  const clientScopesRenderer = ({\n    grantedClientScopes,\n  }: UserConsentRepresentation) => {\n    return (\n      <ChipGroup className=\"kc-consents-chip-group\">\n        {grantedClientScopes!.map((currentChip) => (\n          <Chip key={currentChip} isReadOnly className=\"kc-consents-chip\">\n            {currentChip}\n          </Chip>\n        ))}\n      </ChipGroup>\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"revokeClientScopesTitle\",\n    messageKey: t(\"revokeClientScopes\", {\n      clientId: selectedClient?.clientId,\n    }),\n    continueButtonLabel: \"revoke\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.revokeConsent({\n          id,\n          clientId: selectedClient!.clientId!,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteGrantsSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteGrantsError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        loader={loader}\n        key={key}\n        ariaLabelKey=\"roleList\"\n        searchPlaceholderKey=\" \"\n        columns={[\n          {\n            name: \"clientId\",\n            displayKey: \"Client\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(20)],\n          },\n          {\n            name: \"grantedClientScopes\",\n            displayKey: \"grantedClientScopes\",\n            cellRenderer: clientScopesRenderer,\n            transforms: [cellWidth(30)],\n          },\n          {\n            name: \"createdDate\",\n            displayKey: \"created\",\n            transforms: [cellWidth(20)],\n            cellRenderer: ({ createdDate }) =>\n              createdDate ? formatDate(new Date(createdDate)) : \"—\",\n          },\n          {\n            name: \"lastUpdatedDate\",\n            displayKey: \"lastUpdated\",\n            transforms: [cellWidth(10)],\n            cellRenderer: ({ lastUpdatedDate }) =>\n              lastUpdatedDate ? formatDate(new Date(lastUpdatedDate)) : \"—\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"revoke\"),\n            onRowClick: (client) => {\n              setSelectedClient(client);\n              toggleDeleteDialog();\n            },\n          } as Action<UserConsentRepresentation>,\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            icon={CubesIcon}\n            message={t(\"noConsents\")}\n            instructions={t(\"noConsentsText\")}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableVariant,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\ntype CredentialDataDialogProps = {\n  credentialData: [string, string][];\n  onClose: () => void;\n};\n\nexport const CredentialDataDialog = ({\n  credentialData,\n  onClose,\n}: CredentialDataDialogProps) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"passwordDataTitle\")}\n      data-testid=\"passwordDataDialog\"\n      isOpen\n      onClose={onClose}\n    >\n      <Table\n        aria-label={t(\"passwordDataTitle\")}\n        data-testid=\"password-data-dialog\"\n        variant={TableVariant.compact}\n      >\n        <Thead>\n          <Tr>\n            <Th>{t(\"showPasswordDataName\")}</Th>\n            <Th>{t(\"showPasswordDataValue\")}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {credentialData.map((cred, index) => {\n            return (\n              <Tr key={index}>\n                <Td>{cred[0]}</Td>\n                <Td>{cred[1]}</Td>\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n    </Modal>\n  );\n};\n","import { ReactNode, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Td } from \"@patternfly/react-table\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n} from \"@patternfly/react-core\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport useToggle from \"../../utils/useToggle\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { CredentialDataDialog } from \"./CredentialDataDialog\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\n\ntype CredentialRowProps = {\n  credential: CredentialRepresentation;\n  resetPassword: () => void;\n  toggleDelete: () => void;\n  children: ReactNode;\n};\n\nexport const CredentialRow = ({\n  credential,\n  resetPassword,\n  toggleDelete,\n  children,\n}: CredentialRowProps) => {\n  const formatDate = useFormatDate();\n  const { t } = useTranslation();\n  const [showData, toggleShow] = useToggle();\n  const [kebabOpen, toggleKebab] = useToggle();\n  const localeSort = useLocaleSort();\n\n  const rows = useMemo(() => {\n    if (!credential.credentialData) {\n      return [];\n    }\n\n    const credentialData: Record<string, unknown> = JSON.parse(\n      credential.credentialData,\n    );\n    return localeSort(Object.entries(credentialData), ([key]) => key).map<\n      [string, string]\n    >(([key, value]) => {\n      if (typeof value === \"string\") {\n        return [key, value];\n      }\n\n      return [key, JSON.stringify(value)];\n    });\n  }, [credential.credentialData]);\n\n  return (\n    <>\n      {showData && Object.keys(credential).length !== 0 && (\n        <CredentialDataDialog\n          credentialData={rows}\n          onClose={() => {\n            toggleShow();\n          }}\n        />\n      )}\n\n      <Td>{children}</Td>\n      <Td>{formatDate(new Date(credential.createdDate!))}</Td>\n      <Td>\n        <Button\n          className=\"kc-showData-btn\"\n          variant=\"link\"\n          data-testid=\"showDataBtn\"\n          onClick={toggleShow}\n        >\n          {t(\"showDataBtn\")}\n        </Button>\n      </Td>\n      {credential.type === \"password\" ? (\n        <Td isActionCell>\n          <Button\n            variant=\"secondary\"\n            data-testid=\"resetPasswordBtn\"\n            onClick={resetPassword}\n          >\n            {t(\"resetPasswordBtn\")}\n          </Button>\n        </Td>\n      ) : (\n        <Td />\n      )}\n      <Td isActionCell>\n        <Dropdown\n          popperProps={{\n            position: \"right\",\n          }}\n          onOpenChange={toggleKebab}\n          toggle={(ref) => (\n            <MenuToggle\n              ref={ref}\n              isExpanded={kebabOpen}\n              onClick={toggleKebab}\n              variant=\"plain\"\n              aria-label=\"Kebab toggle\"\n            >\n              <EllipsisVIcon />\n            </MenuToggle>\n          )}\n          isOpen={kebabOpen}\n        >\n          <DropdownList>\n            <DropdownItem\n              key={credential.id}\n              data-testid=\"deleteDropdownItem\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"deleteBtn\")}\n            </DropdownItem>\n          </DropdownList>\n        </Dropdown>\n      </Td>\n    </>\n  );\n};\n","import type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { CheckIcon, PencilAltIcon, TimesIcon } from \"@patternfly/react-icons\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype UserLabelForm = {\n  userLabel: string;\n};\n\ntype InlineLabelEditProps = {\n  userId: string;\n  credential: CredentialRepresentation;\n  isEditable: boolean;\n  toggle: () => void;\n};\n\nexport const InlineLabelEdit = ({\n  userId,\n  credential,\n  isEditable,\n  toggle,\n}: InlineLabelEditProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { register, handleSubmit } = useForm<UserLabelForm>();\n\n  const { addAlert, addError } = useAlerts();\n\n  const saveUserLabel = async (userLabel: UserLabelForm) => {\n    try {\n      await adminClient.users.updateCredentialLabel(\n        {\n          id: userId,\n          credentialId: credential.id!,\n        },\n        userLabel.userLabel || \"\",\n      );\n      addAlert(t(\"updateCredentialUserLabelSuccess\"), AlertVariant.success);\n      toggle();\n    } catch (error) {\n      addError(\"updateCredentialUserLabelError\", error);\n    }\n  };\n\n  return (\n    <Form\n      isHorizontal\n      className=\"kc-form-userLabel\"\n      onSubmit={handleSubmit(saveUserLabel)}\n    >\n      <FormGroup fieldId=\"kc-userLabel\" className=\"kc-userLabel-row\">\n        <div className=\"kc-form-group-userLabel\">\n          {isEditable ? (\n            <>\n              <TextInput\n                data-testid=\"userLabelFld\"\n                defaultValue={credential.userLabel}\n                className=\"kc-userLabel\"\n                aria-label={t(\"userLabel\")}\n                {...register(\"userLabel\")}\n              />\n              <div className=\"kc-userLabel-actionBtns\">\n                <Button\n                  data-testid=\"editUserLabelAcceptBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabelAcceptBtn\"\n                  aria-label={t(\"acceptBtn\")}\n                  type=\"submit\"\n                  icon={<CheckIcon />}\n                />\n                <Button\n                  data-testid=\"editUserLabelCancelBtn\"\n                  variant=\"link\"\n                  className=\"kc-editUserLabel-cancelBtn\"\n                  aria-label={t(\"cancelBtn\")}\n                  onClick={toggle}\n                  icon={<TimesIcon />}\n                />\n              </div>\n            </>\n          ) : (\n            <>\n              {credential.userLabel}\n              <Button\n                aria-label={t(\"editUserLabel\")}\n                variant=\"link\"\n                className=\"kc-editUserLabel-btn\"\n                onClick={toggle}\n                data-testid=\"editUserLabelBtn\"\n                icon={<PencilAltIcon />}\n              />\n            </>\n          )}\n        </div>\n      </FormGroup>\n    </Form>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\n\nexport const LifespanField = () => {\n  const { t } = useTranslation();\n\n  return (\n    <TimeSelectorControl\n      name=\"lifespan\"\n      label={t(\"lifespan\")}\n      labelIcon={t(\"lifespanHelp\")}\n      units={[\"minute\", \"hour\", \"day\"]}\n      menuAppendTo=\"parent\"\n      controller={{}}\n    />\n  );\n};\n","import type { RequiredActionAlias } from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport { AlertVariant, Form, ModalVariant } from \"@patternfly/react-core\";\nimport { isEmpty } from \"lodash-es\";\nimport { FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { LifespanField } from \"./LifespanField\";\nimport { RequiredActionMultiSelect } from \"./RequiredActionMultiSelect\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\ntype ResetCredentialDialogProps = {\n  userId: string;\n  onClose: () => void;\n};\n\ntype CredentialResetForm = {\n  actions: RequiredActionAlias[];\n  lifespan: number | undefined;\n};\n\nexport const ResetCredentialDialog = ({\n  userId,\n  onClose,\n}: ResetCredentialDialogProps) => {\n  const { adminClient } = useAdminClient();\n  const { realmRepresentation: realm } = useRealm();\n  const { t } = useTranslation();\n  const form = useForm<CredentialResetForm>({\n    defaultValues: {\n      actions: [],\n      lifespan: realm?.actionTokenGeneratedByAdminLifespan,\n    },\n  });\n  const { handleSubmit, control } = form;\n\n  const resetActionWatcher = useWatch({\n    control,\n    name: \"actions\",\n  });\n  const resetIsNotDisabled = !isEmpty(resetActionWatcher);\n\n  const { addAlert, addError } = useAlerts();\n\n  const sendCredentialsResetEmail = async ({\n    actions,\n    lifespan,\n  }: CredentialResetForm) => {\n    if (isEmpty(actions)) {\n      return;\n    }\n\n    try {\n      await adminClient.users.executeActionsEmail({\n        id: userId,\n        actions,\n        lifespan,\n      });\n      addAlert(t(\"credentialResetEmailSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"credentialResetEmailError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      variant={ModalVariant.medium}\n      titleKey=\"credentialReset\"\n      open\n      onCancel={onClose}\n      toggleDialog={onClose}\n      continueButtonLabel=\"credentialResetConfirm\"\n      onConfirm={() => {\n        handleSubmit(sendCredentialsResetEmail)();\n      }}\n      confirmButtonDisabled={!resetIsNotDisabled}\n    >\n      <Form\n        id=\"userCredentialsReset-form\"\n        isHorizontal\n        data-testid=\"credential-reset-modal\"\n      >\n        <FormProvider {...form}>\n          <RequiredActionMultiSelect\n            name=\"actions\"\n            label=\"resetAction\"\n            help=\"resetActions\"\n          />\n          <LifespanField />\n        </FormProvider>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import { RequiredActionAlias } from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Form,\n  FormGroup,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormErrorText, PasswordInput } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../../components/confirm-dialog/ConfirmDialog\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype ResetPasswordDialogProps = {\n  user: UserRepresentation;\n  isResetPassword: boolean;\n  onAddRequiredActions?: (requiredActions: string[]) => void;\n  refresh: () => void;\n  onClose: () => void;\n};\n\nexport type CredentialsForm = {\n  password: string;\n  passwordConfirmation: string;\n  temporaryPassword: boolean;\n};\n\nconst credFormDefaultValues: CredentialsForm = {\n  password: \"\",\n  passwordConfirmation: \"\",\n  temporaryPassword: true,\n};\n\nexport const ResetPasswordDialog = ({\n  user,\n  isResetPassword,\n  onAddRequiredActions,\n  refresh,\n  onClose,\n}: ResetPasswordDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<CredentialsForm>({\n    defaultValues: credFormDefaultValues,\n    mode: \"onChange\",\n  });\n  const {\n    register,\n    formState: { isValid, errors },\n    watch,\n    handleSubmit,\n    clearErrors,\n    setError,\n  } = form;\n\n  const [confirm, toggle] = useToggle(true);\n  const password = watch(\"password\", \"\");\n  const passwordConfirmation = watch(\"passwordConfirmation\", \"\");\n\n  const { addAlert, addError } = useAlerts();\n\n  const [toggleConfirmSaveModal, ConfirmSaveModal] = useConfirmDialog({\n    titleKey: isResetPassword ? \"resetPasswordConfirm\" : \"setPasswordConfirm\",\n    messageKey: isResetPassword\n      ? t(\"resetPasswordConfirmText\", { username: user.username })\n      : t(\"setPasswordConfirmText\", { username: user.username }),\n    continueButtonLabel: isResetPassword ? \"resetPassword\" : \"savePassword\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: () => handleSubmit(saveUserPassword)(),\n  });\n\n  const saveUserPassword = async ({\n    password,\n    temporaryPassword,\n  }: CredentialsForm) => {\n    try {\n      await adminClient.users.resetPassword({\n        id: user.id!,\n        credential: {\n          temporary: temporaryPassword,\n          type: \"password\",\n          value: password,\n        },\n      });\n      if (temporaryPassword) {\n        onAddRequiredActions?.([RequiredActionAlias.UPDATE_PASSWORD]);\n      }\n      const credentials = await adminClient.users.getCredentials({\n        id: user.id!,\n      });\n      const credentialLabel = credentials.find((c) => c.type === \"password\");\n      if (credentialLabel) {\n        await adminClient.users.updateCredentialLabel(\n          {\n            id: user.id!,\n            credentialId: credentialLabel.id!,\n          },\n          t(\"defaultPasswordLabel\"),\n        );\n      }\n      addAlert(\n        isResetPassword\n          ? t(\"resetCredentialsSuccess\")\n          : t(\"savePasswordSuccess\"),\n        AlertVariant.success,\n      );\n      refresh();\n    } catch (error) {\n      addError(\n        isResetPassword ? \"resetPasswordError\" : \"savePasswordError\",\n        error,\n      );\n    }\n\n    onClose();\n  };\n\n  const { onChange, ...rest } = register(\"password\", { required: true });\n  return (\n    <>\n      <ConfirmSaveModal />\n      <ConfirmDialogModal\n        titleKey={\n          isResetPassword\n            ? t(\"resetPasswordFor\", { username: user.username })\n            : t(\"setPasswordFor\", { username: user.username })\n        }\n        open={confirm}\n        onCancel={onClose}\n        toggleDialog={toggle}\n        onConfirm={toggleConfirmSaveModal}\n        confirmButtonDisabled={!isValid}\n        continueButtonLabel=\"save\"\n      >\n        <Form\n          id=\"userCredentials-form\"\n          isHorizontal\n          className=\"keycloak__user-credentials__reset-form\"\n        >\n          <FormGroup\n            name=\"password\"\n            label={t(\"password\")}\n            fieldId=\"password\"\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordField\"\n              id=\"password\"\n              onChange={(e) => {\n                onChange(e);\n                if (passwordConfirmation !== e.currentTarget.value) {\n                  setError(\"passwordConfirmation\", {\n                    message: t(\"confirmPasswordDoesNotMatch\").toString(),\n                  });\n                } else {\n                  clearErrors(\"passwordConfirmation\");\n                }\n              }}\n              {...rest}\n            />\n            {errors.password && <FormErrorText message={t(\"required\")} />}\n          </FormGroup>\n          <FormGroup\n            name=\"passwordConfirmation\"\n            label={\n              isResetPassword\n                ? t(\"resetPasswordConfirmation\")\n                : t(\"passwordConfirmation\")\n            }\n            fieldId=\"passwordConfirmation\"\n            isRequired\n          >\n            <PasswordInput\n              data-testid=\"passwordConfirmationField\"\n              id=\"passwordConfirmation\"\n              {...register(\"passwordConfirmation\", {\n                required: true,\n                validate: (value) =>\n                  value === password ||\n                  t(\"confirmPasswordDoesNotMatch\").toString(),\n              })}\n            />\n            {errors.passwordConfirmation && (\n              <FormErrorText\n                message={errors.passwordConfirmation.message as string}\n              />\n            )}\n          </FormGroup>\n          <FormProvider {...form}>\n            <DefaultSwitchControl\n              name=\"temporaryPassword\"\n              label={t(\"temporaryPassword\")}\n              labelIcon={t(\"temporaryPasswordHelpText\")}\n              defaultValue=\"true\"\n            />\n          </FormProvider>\n        </Form>\n      </ConfirmDialogModal>\n    </>\n  );\n};\n","import type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { HelpItem, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport styles from \"@patternfly/react-styles/css/components/Table/table\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport {\n  Fragment,\n  DragEvent as ReactDragEvent,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { toUpperCase } from \"../util\";\nimport { FederatedUserLink } from \"./FederatedUserLink\";\nimport { CredentialRow } from \"./user-credentials/CredentialRow\";\nimport { InlineLabelEdit } from \"./user-credentials/InlineLabelEdit\";\nimport { ResetCredentialDialog } from \"./user-credentials/ResetCredentialDialog\";\nimport { ResetPasswordDialog } from \"./user-credentials/ResetPasswordDialog\";\n\nimport \"./user-credentials.css\";\n\ntype UserCredentialsProps = {\n  user: UserRepresentation;\n  setUser: (user: UserRepresentation) => void;\n};\n\ntype ExpandableCredentialRepresentation = {\n  key: string;\n  value: CredentialRepresentation[];\n  isExpanded: boolean;\n};\n\ntype UserLabelEdit = {\n  status: boolean;\n  rowKey: string;\n};\n\ntype UserCredentialsRowProps = {\n  credential: CredentialRepresentation;\n  userId: string;\n  toggleDelete: (credential: CredentialRepresentation) => void;\n  resetPassword: () => void;\n  isUserLabelEdit?: UserLabelEdit;\n  setIsUserLabelEdit: (isUserLabelEdit: UserLabelEdit) => void;\n  refresh: () => void;\n};\n\nconst UserCredentialsRow = ({\n  credential,\n  userId,\n  toggleDelete,\n  resetPassword,\n  isUserLabelEdit,\n  setIsUserLabelEdit,\n  refresh,\n}: UserCredentialsRowProps) => (\n  <CredentialRow\n    key={credential.id}\n    credential={credential}\n    toggleDelete={() => toggleDelete(credential)}\n    resetPassword={resetPassword}\n  >\n    <InlineLabelEdit\n      credential={credential}\n      userId={userId}\n      isEditable={\n        (isUserLabelEdit?.status && isUserLabelEdit.rowKey === credential.id) ||\n        false\n      }\n      toggle={() => {\n        setIsUserLabelEdit({\n          status: !isUserLabelEdit?.status,\n          rowKey: credential.id!,\n        });\n        if (isUserLabelEdit?.status) {\n          refresh();\n        }\n      }}\n    />\n  </CredentialRow>\n);\n\nexport const UserCredentials = ({ user, setUser }: UserCredentialsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [openCredentialReset, setOpenCredentialReset] = useState(false);\n  const [userCredentials, setUserCredentials] = useState<\n    CredentialRepresentation[]\n  >([]);\n  const [groupedUserCredentials, setGroupedUserCredentials] = useState<\n    ExpandableCredentialRepresentation[]\n  >([]);\n  const [selectedCredential, setSelectedCredential] =\n    useState<CredentialRepresentation>({});\n  const [isResetPassword, setIsResetPassword] = useState(false);\n  const [isUserLabelEdit, setIsUserLabelEdit] = useState<UserLabelEdit>();\n\n  const bodyRef = useRef<HTMLTableSectionElement>(null);\n  const [state, setState] = useState({\n    draggedItemId: \"\",\n    draggingToItemIndex: -1,\n    dragging: false,\n    tempItemOrder: [\"\"],\n  });\n\n  useFetch(\n    () => adminClient.users.getCredentials({ id: user.id! }),\n    (credentials) => {\n      setUserCredentials(credentials);\n\n      const groupedCredentials = credentials.reduce((r, a) => {\n        r[a.type!] = r[a.type!] || [];\n        r[a.type!].push(a);\n        return r;\n      }, Object.create(null));\n\n      const groupedCredentialsArray = Object.keys(groupedCredentials).map(\n        (key) => ({ key, value: groupedCredentials[key] }),\n      );\n\n      setGroupedUserCredentials(\n        groupedCredentialsArray.map((groupedCredential) => ({\n          ...groupedCredential,\n          isExpanded: false,\n        })),\n      );\n    },\n    [key],\n  );\n\n  const passwordTypeFinder = userCredentials.find(\n    (credential) => credential.type === \"password\",\n  );\n\n  const toggleModal = () => setIsOpen(!isOpen);\n\n  const toggleCredentialsResetModal = () => {\n    setOpenCredentialReset(!openCredentialReset);\n  };\n\n  const resetPassword = () => {\n    setIsResetPassword(true);\n    toggleModal();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteCredentialsConfirmTitle\"),\n    messageKey: t(\"deleteCredentialsConfirm\"),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.deleteCredential({\n          id: user.id!,\n          credentialId: selectedCredential.id!,\n        });\n        addAlert(t(\"deleteCredentialsSuccess\"), AlertVariant.success);\n        setKey((key) => key + 1);\n      } catch (error) {\n        addError(\"deleteCredentialsError\", error);\n      }\n    },\n  });\n\n  const itemOrder = useMemo(\n    () =>\n      groupedUserCredentials.flatMap((groupedCredential) => [\n        groupedCredential.value.map(({ id }) => id).toString(),\n        ...(groupedCredential.isExpanded\n          ? groupedCredential.value.map((c) => c.id!)\n          : []),\n      ]),\n    [groupedUserCredentials],\n  );\n\n  const onDragStart = (evt: ReactDragEvent) => {\n    evt.dataTransfer.effectAllowed = \"move\";\n    evt.dataTransfer.setData(\"text/plain\", evt.currentTarget.id);\n    const draggedItemId = evt.currentTarget.id;\n    evt.currentTarget.classList.add(styles.modifiers.ghostRow);\n    evt.currentTarget.setAttribute(\"aria-pressed\", \"true\");\n    setState({ ...state, draggedItemId, dragging: true });\n  };\n\n  const moveItem = (items: string[], targetItem: string, toIndex: number) => {\n    const fromIndex = items.indexOf(targetItem);\n    if (fromIndex === toIndex) {\n      return items;\n    }\n    const result = [...items];\n    result.splice(toIndex, 0, result.splice(fromIndex, 1)[0]);\n    return result;\n  };\n\n  const move = (itemOrder: string[]) => {\n    if (!bodyRef.current) return;\n    const ulNode = bodyRef.current;\n    const nodes = Array.from(ulNode.children);\n    if (nodes.every(({ id }, i) => id === itemOrder[i])) {\n      return;\n    }\n    ulNode.replaceChildren();\n    itemOrder.forEach((itemId) => {\n      ulNode.appendChild(nodes.find(({ id }) => id === itemId)!);\n    });\n  };\n\n  const onDragCancel = () => {\n    if (!bodyRef.current) return;\n    Array.from(bodyRef.current.children).forEach((el) => {\n      el.classList.remove(styles.modifiers.ghostRow);\n      el.setAttribute(\"aria-pressed\", \"false\");\n    });\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragLeave = (evt: ReactDragEvent) => {\n    if (!isValidDrop(evt)) {\n      move(itemOrder);\n      setState({ ...state, draggingToItemIndex: -1 });\n    }\n  };\n\n  const isValidDrop = (evt: ReactDragEvent) => {\n    if (!bodyRef.current) return false;\n    const ulRect = bodyRef.current.getBoundingClientRect();\n    return (\n      evt.clientX > ulRect.x &&\n      evt.clientX < ulRect.x + ulRect.width &&\n      evt.clientY > ulRect.y &&\n      evt.clientY < ulRect.y + ulRect.height\n    );\n  };\n\n  const onDrop = (evt: ReactDragEvent) => {\n    if (isValidDrop(evt)) {\n      onDragFinish(state.draggedItemId, state.tempItemOrder);\n    } else {\n      onDragCancel();\n    }\n  };\n\n  const onDragOver = (evt: ReactDragEvent) => {\n    evt.preventDefault();\n    const td = evt.target as HTMLTableCellElement;\n    const curListItem = td.closest(\"tr\");\n    if (\n      !curListItem ||\n      (bodyRef.current && !bodyRef.current.contains(curListItem)) ||\n      curListItem.id === state.draggedItemId\n    ) {\n      return;\n    } else {\n      const dragId = curListItem.id;\n      const draggingToItemIndex = Array.from(\n        bodyRef.current?.children || [],\n      ).findIndex((item) => item.id === dragId);\n      if (draggingToItemIndex === state.draggingToItemIndex) {\n        return;\n      }\n      const tempItemOrder = moveItem(\n        itemOrder,\n        state.draggedItemId,\n        draggingToItemIndex,\n      );\n      move(tempItemOrder);\n      setState({\n        ...state,\n        draggingToItemIndex,\n        tempItemOrder,\n      });\n    }\n  };\n\n  const onAddRequiredActions = (requiredActions: string[]) => {\n    setUser({\n      ...user,\n      requiredActions: [...(user.requiredActions ?? []), ...requiredActions],\n    });\n  };\n\n  const onDragEnd = ({ target }: ReactDragEvent) => {\n    if (!(target instanceof HTMLTableRowElement)) {\n      return;\n    }\n    target.classList.remove(styles.modifiers.ghostRow);\n    target.setAttribute(\"aria-pressed\", \"false\");\n    setState({\n      ...state,\n      draggedItemId: \"\",\n      draggingToItemIndex: -1,\n      dragging: false,\n    });\n  };\n\n  const onDragFinish = async (dragged: string, newOrder: string[]) => {\n    const oldIndex = itemOrder.findIndex((key) => key === dragged);\n    const newIndex = newOrder.findIndex((key) => key === dragged);\n    const times = newIndex - oldIndex;\n\n    const ids = dragged.split(\",\");\n\n    try {\n      for (const id of ids)\n        for (let index = 0; index < Math.abs(times); index++) {\n          if (times > 0) {\n            await adminClient.users.moveCredentialPositionDown({\n              id: user.id!,\n              credentialId: id,\n              newPreviousCredentialId: itemOrder[newIndex],\n            });\n          } else {\n            await adminClient.users.moveCredentialPositionUp({\n              id: user.id!,\n              credentialId: id,\n            });\n          }\n        }\n\n      refresh();\n      addAlert(t(\"updatedCredentialMoveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedCredentialMoveError\", error);\n    }\n  };\n\n  const onToggleDelete = (credential: CredentialRepresentation) => {\n    setSelectedCredential(credential);\n    toggleDeleteDialog();\n  };\n\n  const useFederatedCredentials = user.federationLink;\n  const [credentialTypes, setCredentialTypes] = useState<string[]>([]);\n\n  useFetch(\n    () => adminClient.users.getUserStorageCredentialTypes({ id: user.id! }),\n    setCredentialTypes,\n    [],\n  );\n\n  if (!credentialTypes) {\n    return <KeycloakSpinner />;\n  }\n\n  const hasCredentialTypes = credentialTypes.length > 0;\n  const noCredentials = groupedUserCredentials.length === 0;\n  const noFederatedCredentials =\n    !user.credentials || user.credentials.length === 0;\n  const emptyState =\n    noCredentials && noFederatedCredentials && !hasCredentialTypes;\n\n  return (\n    <>\n      {isOpen && (\n        <ResetPasswordDialog\n          user={user}\n          isResetPassword={isResetPassword}\n          onAddRequiredActions={onAddRequiredActions}\n          refresh={refresh}\n          onClose={() => setIsOpen(false)}\n        />\n      )}\n      {openCredentialReset && (\n        <ResetCredentialDialog\n          userId={user.id!}\n          onClose={() => setOpenCredentialReset(false)}\n        />\n      )}\n      <DeleteConfirm />\n      {user.email && !emptyState && (\n        <Button\n          className=\"kc-resetCredentialBtn-header\"\n          variant=\"primary\"\n          data-testid=\"credentialResetBtn\"\n          onClick={() => setOpenCredentialReset(true)}\n        >\n          {t(\"credentialResetBtn\")}\n        </Button>\n      )}\n      {userCredentials.length !== 0 && passwordTypeFinder === undefined && (\n        <>\n          <Button\n            className=\"kc-setPasswordBtn-tbl\"\n            data-testid=\"setPasswordBtn-table\"\n            variant=\"primary\"\n            form=\"userCredentials-form\"\n            onClick={() => {\n              setIsOpen(true);\n            }}\n          >\n            {t(\"setPassword\")}\n          </Button>\n          <Divider />\n        </>\n      )}\n      {groupedUserCredentials.length !== 0 && (\n        <PageSection variant={PageSectionVariants.light}>\n          <Table variant={\"compact\"}>\n            <Thead>\n              <Tr className=\"kc-table-header\">\n                <Th>\n                  <HelpItem\n                    helpText={t(\"userCredentialsHelpText\")}\n                    fieldLabelId=\"userCredentialsHelpTextLabel\"\n                  />\n                </Th>\n                <Th aria-hidden=\"true\" />\n                <Th>{t(\"type\")}</Th>\n                <Th>{t(\"userLabel\")}</Th>\n                <Th>{t(\"createdAt\")}</Th>\n                <Th>{t(\"data\")}</Th>\n                <Th aria-hidden=\"true\" />\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody\n              ref={bodyRef}\n              onDragOver={onDragOver}\n              onDrop={onDragOver}\n              onDragLeave={onDragLeave}\n            >\n              {groupedUserCredentials.map((groupedCredential, rowIndex) => (\n                <Fragment key={groupedCredential.key}>\n                  <Tr\n                    id={groupedCredential.value.map(({ id }) => id).toString()}\n                    draggable={groupedUserCredentials.length > 1}\n                    onDrop={onDrop}\n                    onDragEnd={onDragEnd}\n                    onDragStart={onDragStart}\n                  >\n                    <Td\n                      className={\n                        groupedUserCredentials.length === 1 ? \"one-row\" : \"\"\n                      }\n                      draggableRow={{\n                        id: `draggable-row-${groupedCredential.value.map(\n                          ({ id }) => id,\n                        )}`,\n                      }}\n                    />\n                    {groupedCredential.value.length > 1 ? (\n                      <Td\n                        className=\"kc-expandRow-btn\"\n                        expand={{\n                          rowIndex,\n                          isExpanded: groupedCredential.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = groupedUserCredentials.map(\n                              (credential, index) =>\n                                index === rowIndex\n                                  ? {\n                                      ...credential,\n                                      isExpanded: !credential.isExpanded,\n                                    }\n                                  : credential,\n                            );\n                            setGroupedUserCredentials(rows);\n                          },\n                        }}\n                      />\n                    ) : (\n                      <Td />\n                    )}\n                    <Td\n                      dataLabel={`columns-${groupedCredential.key}`}\n                      className=\"kc-notExpandableRow-credentialType\"\n                      data-testid=\"credentialType\"\n                    >\n                      {toUpperCase(groupedCredential.key)}\n                    </Td>\n                    {groupedCredential.value.length <= 1 &&\n                      groupedCredential.value.map((credential) => (\n                        <UserCredentialsRow\n                          key={credential.id}\n                          credential={credential}\n                          userId={user.id!}\n                          toggleDelete={onToggleDelete}\n                          resetPassword={resetPassword}\n                          isUserLabelEdit={isUserLabelEdit}\n                          setIsUserLabelEdit={setIsUserLabelEdit}\n                          refresh={refresh}\n                        />\n                      ))}\n                  </Tr>\n                  {groupedCredential.isExpanded &&\n                    groupedCredential.value.map((credential) => (\n                      <Tr\n                        key={credential.id}\n                        id={credential.id}\n                        draggable\n                        onDrop={onDrop}\n                        onDragEnd={onDragEnd}\n                        onDragStart={onDragStart}\n                      >\n                        <Td />\n                        <Td\n                          className=\"kc-draggable-dropdown-type-icon\"\n                          draggableRow={{\n                            id: `draggable-row-${groupedCredential.value.map(\n                              ({ id }) => id,\n                            )}`,\n                          }}\n                        />\n                        <Td\n                          dataLabel={`child-columns-${credential.id}`}\n                          className=\"kc-expandableRow-credentialType\"\n                        >\n                          {toUpperCase(credential.type!)}\n                        </Td>\n                        <UserCredentialsRow\n                          credential={credential}\n                          userId={user.id!}\n                          toggleDelete={onToggleDelete}\n                          resetPassword={resetPassword}\n                          isUserLabelEdit={isUserLabelEdit}\n                          setIsUserLabelEdit={setIsUserLabelEdit}\n                          refresh={refresh}\n                        />\n                      </Tr>\n                    ))}\n                </Fragment>\n              ))}\n            </Tbody>\n          </Table>\n        </PageSection>\n      )}\n      {useFederatedCredentials && hasCredentialTypes && (\n        <PageSection variant={PageSectionVariants.light}>\n          <Table variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th>{t(\"type\")}</Th>\n                <Th>{t(\"providedBy\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {credentialTypes.map((credential) => (\n                <Tr key={credential}>\n                  <Td>\n                    <b>{credential}</b>\n                  </Td>\n                  <Td>\n                    <FederatedUserLink user={user} />\n                  </Td>\n                  {credential === \"password\" && (\n                    <Td modifier=\"fitContent\">\n                      <Button variant=\"secondary\" onClick={toggleModal}>\n                        {t(\"setPassword\")}\n                      </Button>\n                    </Td>\n                  )}\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        </PageSection>\n      )}\n      {emptyState && (\n        <ListEmptyState\n          hasIcon\n          message={t(\"noCredentials\")}\n          instructions={t(\"noCredentialsText\")}\n          primaryActionText={t(\"setPassword\")}\n          onPrimaryAction={toggleModal}\n          secondaryActions={\n            user.email\n              ? [\n                  {\n                    text: t(\"credentialResetBtn\"),\n                    onClick: toggleCredentialsResetModal,\n                    type: ButtonVariant.link,\n                  },\n                ]\n              : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useHelp } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  Popover,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { intersectionBy, sortBy, uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype UserGroupsProps = {\n  user: UserRepresentation;\n};\n\nexport const UserGroups = ({ user }: UserGroupsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    [],\n  );\n\n  const [isDirectMembership, setDirectMembership] = useState(true);\n  const [directMembershipList, setDirectMembershipList] = useState<\n    GroupRepresentation[]\n  >([]);\n  const [open, setOpen] = useState(false);\n\n  const { enabled } = useHelp();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n\n  const alphabetize = (groupsList: GroupRepresentation[]) => {\n    return sortBy(groupsList, (group) => group.path?.toUpperCase());\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n    };\n\n    const searchParam = search || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n    }\n\n    const joinedUserGroups = await adminClient.users.listGroups({\n      ...params,\n      id: user.id!,\n    });\n\n    setDirectMembershipList([...joinedUserGroups]);\n\n    const indirect: GroupRepresentation[] = [];\n    if (!isDirectMembership)\n      joinedUserGroups.forEach((g) => {\n        const paths = (\n          g.path?.substring(1).match(/((~\\/)|[^/])+/g) || []\n        ).slice(0, -1);\n\n        indirect.push(\n          ...paths.map((p) => ({\n            name: p,\n            path: g.path?.substring(0, g.path.indexOf(p) + p.length),\n          })),\n        );\n      });\n\n    return alphabetize(uniqBy([...joinedUserGroups, ...indirect], \"path\"));\n  };\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"leaveGroup\", {\n      count: selectedGroups.length,\n      name: selectedGroups[0]?.name,\n    }),\n    messageKey: t(\"leaveGroupConfirmDialog\", {\n      count: selectedGroups.length,\n      groupname: selectedGroups[0]?.name,\n      username: user.username,\n    }),\n    continueButtonLabel: \"leave\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(\n          selectedGroups.map((group) =>\n            adminClient.users.delFromGroup({\n              id: user.id!,\n              groupId: group.id!,\n            }),\n          ),\n        );\n\n        setSelectedGroups([]);\n        addAlert(t(\"removedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"removedGroupMembershipError\", error);\n      }\n      refresh();\n    },\n  });\n\n  const leave = (group: GroupRepresentation[]) => {\n    setSelectedGroups(group);\n    toggleDeleteDialog();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    try {\n      await Promise.all(\n        groups.map((group) =>\n          adminClient.users.addToGroup({\n            id: user.id!,\n            groupId: group.id!,\n          }),\n        ),\n      );\n\n      addAlert(t(\"addedGroupMembership\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addedGroupMembershipError\", error);\n    }\n    refresh();\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <GroupPickerDialog\n          id={user.id}\n          type=\"selectMany\"\n          text={{\n            title: t(\"joinGroupsFor\", { username: user.username }),\n            ok: \"join\",\n          }}\n          canBrowse={isManager}\n          onClose={() => setOpen(false)}\n          onConfirm={async (groups = []) => {\n            await addGroups(groups);\n            setOpen(false);\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        className=\"keycloak_user-section_groups-table\"\n        isPaginated\n        ariaLabelKey=\"roleList\"\n        searchPlaceholderKey=\"searchGroup\"\n        canSelectAll\n        onSelect={(groups) =>\n          isDirectMembership\n            ? setSelectedGroups(groups)\n            : setSelectedGroups(\n                intersectionBy(groups, directMembershipList, \"id\"),\n              )\n        }\n        isRowDisabled={(group) =>\n          !isDirectMembership &&\n          directMembershipList.every((item) => item.id !== group.id)\n        }\n        toolbarItem={\n          <>\n            <Button\n              className=\"kc-join-group-button\"\n              onClick={toggleModal}\n              data-testid=\"add-group-button\"\n              isDisabled={!user.access?.manageGroupMembership}\n            >\n              {t(\"joinGroup\")}\n            </Button>\n            <Checkbox\n              label={t(\"directMembership\")}\n              key=\"direct-membership-check\"\n              id=\"kc-direct-membership-checkbox\"\n              onChange={() => {\n                setDirectMembership(!isDirectMembership);\n                refresh();\n              }}\n              isChecked={isDirectMembership}\n              className=\"pf-v5-u-mt-sm\"\n            />\n            <Button\n              onClick={() => leave(selectedGroups)}\n              data-testid=\"leave-group-button\"\n              variant=\"link\"\n              isDisabled={selectedGroups.length === 0}\n              className=\"pf-v5-u-ml-md\"\n            >\n              {t(\"leave\")}\n            </Button>\n\n            {enabled && (\n              <Popover\n                aria-label=\"Basic popover\"\n                position=\"bottom\"\n                bodyContent={<div>{t(\"whoWillAppearPopoverTextUsers\")}</div>}\n              >\n                <Button\n                  variant=\"link\"\n                  className=\"kc-who-will-appear-button\"\n                  key=\"who-will-appear-button\"\n                  icon={<QuestionCircleIcon />}\n                >\n                  {t(\"whoWillAppearLinkTextUsers\")}\n                </Button>\n              </Popover>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"groupMembership\",\n            displayKey: \"groupMembership\",\n            cellRenderer: (group: GroupRepresentation) => group.name || \"-\",\n            transforms: [cellWidth(40)],\n          },\n          {\n            name: \"path\",\n            displayKey: \"path\",\n            cellRenderer: (group: GroupRepresentation) => (\n              <GroupPath group={group} />\n            ),\n            transforms: [cellWidth(45)],\n          },\n\n          {\n            name: \"\",\n            cellRenderer: (group: GroupRepresentation) => {\n              const canLeaveGroup =\n                directMembershipList.some((item) => item.id === group.id) ||\n                directMembershipList.length === 0 ||\n                isDirectMembership;\n              return canLeaveGroup ? (\n                <Button\n                  data-testid={`leave-${group.name}`}\n                  onClick={() => leave([group])}\n                  variant=\"link\"\n                  isDisabled={!user.access?.manageGroupMembership}\n                >\n                  {t(\"leave\")}\n                </Button>\n              ) : (\n                \"-\"\n              );\n            },\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noGroups\")}\n            instructions={t(\"noGroupsText\")}\n            primaryActionText={t(\"joinGroup\")}\n            onPrimaryAction={toggleModal}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { capitalize } from \"lodash-es\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype UserIdpModalProps = {\n  userId: string;\n  federatedId: string;\n  onClose: () => void;\n  onRefresh: () => void;\n};\n\nexport const UserIdpModal = ({\n  userId,\n  federatedId,\n  onClose,\n  onRefresh,\n}: UserIdpModalProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const form = useForm<FederatedIdentityRepresentation>({\n    mode: \"onChange\",\n  });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const onSubmit = async (\n    federatedIdentity: FederatedIdentityRepresentation,\n  ) => {\n    try {\n      await adminClient.users.addToFederatedIdentity({\n        id: userId,\n        federatedIdentityId: federatedId,\n        federatedIdentity,\n      });\n      addAlert(t(\"idpLinkSuccess\"), AlertVariant.success);\n      onClose();\n      onRefresh();\n    } catch (error) {\n      addError(\"couldNotLinkIdP\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"linkAccountTitle\", {\n        provider: capitalize(federatedId),\n      })}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n          isDisabled={!isValid}\n        >\n          {t(\"link\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"group-form\" onSubmit={handleSubmit(onSubmit)}>\n        <FormProvider {...form}>\n          <FormGroup label={t(\"identityProvider\")} fieldId=\"identityProvider\">\n            <TextInput\n              id=\"identityProvider\"\n              data-testid=\"idpNameInput\"\n              value={capitalize(federatedId)}\n              readOnly\n            />\n          </FormGroup>\n          <TextControl\n            name=\"userId\"\n            label={t(\"userID\")}\n            helperText={t(\"userIdHelperText\")}\n            autoFocus\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n          <TextControl\n            name=\"userName\"\n            label={t(\"username\")}\n            helperText={t(\"usernameHelperText\")}\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type FederatedIdentityRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/federatedIdentityRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { capitalize } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FormPanel } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toIdentityProvider } from \"../identity-providers/routes/IdentityProvider\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { UserIdpModal } from \"./UserIdPModal\";\nimport { useAccess } from \"../context/access/Access\";\n\ntype UserIdentityProviderLinksProps = {\n  userId: string;\n};\n\nexport const UserIdentityProviderLinks = ({\n  userId,\n}: UserIdentityProviderLinksProps) => {\n  const { adminClient } = useAdminClient();\n\n  const [key, setKey] = useState(0);\n  const [federatedId, setFederatedId] = useState(\"\");\n  const [isLinkIdPModalOpen, setIsLinkIdPModalOpen] = useState(false);\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { t } = useTranslation();\n  const { hasAccess, hasSomeAccess } = useAccess();\n\n  const canQueryIDPDetails = hasSomeAccess(\n    \"manage-identity-providers\",\n    \"view-identity-providers\",\n  );\n\n  const refresh = () => setKey(new Date().getTime());\n\n  type WithProviderId = FederatedIdentityRepresentation & {\n    providerId: string;\n  };\n\n  const identityProviders = useServerInfo().identityProviders;\n\n  const getFederatedIdentities = async () => {\n    const allFedIds = (await adminClient.users.listFederatedIdentities({\n      id: userId,\n    })) as WithProviderId[];\n\n    if (canQueryIDPDetails) {\n      const allProviders = await adminClient.identityProviders.find();\n      for (const element of allFedIds) {\n        element.providerId = allProviders.find(\n          (item) => item.alias === element.identityProvider,\n        )?.providerId!;\n      }\n    }\n\n    return allFedIds;\n  };\n\n  const getAvailableIdPs = async () => {\n    return adminClient.identityProviders.find();\n  };\n\n  const linkedIdPsLoader = async () => {\n    return getFederatedIdentities();\n  };\n\n  const availableIdPsLoader = async () => {\n    const linkedNames = (await getFederatedIdentities()).map(\n      (x) => x.identityProvider,\n    );\n\n    return (await getAvailableIdPs())?.filter(\n      (item) => !linkedNames.includes(item.alias),\n    )!;\n  };\n\n  const [toggleUnlinkDialog, UnlinkConfirm] = useConfirmDialog({\n    titleKey: t(\"unlinkAccountTitle\", {\n      provider: capitalize(federatedId),\n    }),\n    messageKey: t(\"unlinkAccountConfirm\", {\n      provider: capitalize(federatedId),\n    }),\n    continueButtonLabel: \"unlink\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: async () => {\n      try {\n        await adminClient.users.delFromFederatedIdentity({\n          id: userId,\n          federatedIdentityId: federatedId,\n        });\n        addAlert(t(\"idpUnlinkSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const idpLinkRenderer = (idp: WithProviderId) => {\n    if (!canQueryIDPDetails)\n      return <span>{capitalize(idp.identityProvider)}</span>;\n\n    return (\n      <Link\n        to={toIdentityProvider({\n          realm,\n          providerId: idp.providerId,\n          alias: idp.identityProvider!,\n          tab: \"settings\",\n        })}\n      >\n        {capitalize(idp.identityProvider)}\n      </Link>\n    );\n  };\n\n  const badgeRenderer1 = (idp: FederatedIdentityRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.identityProvider,\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"Social\" ? \"blue\" : \"orange\"}>\n        {groupName === \"Social\" ? t(\"idpType.social\") : t(\"idpType.custom\")}\n      </Label>\n    );\n  };\n\n  const badgeRenderer2 = (idp: IdentityProviderRepresentation) => {\n    const groupName = identityProviders?.find(\n      (provider) => provider[\"id\"] === idp.providerId,\n    )?.groupName!;\n    return (\n      <Label color={groupName === \"User-defined\" ? \"orange\" : \"blue\"}>\n        {groupName === \"User-defined\"\n          ? \"Custom\"\n          : groupName! === \"Social\"\n            ? t(\"idpType.social\")\n            : groupName!}\n      </Label>\n    );\n  };\n\n  const unlinkRenderer = (fedIdentity: FederatedIdentityRepresentation) => {\n    if (!hasAccess(\"manage-users\")) return <span />;\n\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(fedIdentity.identityProvider!);\n          toggleUnlinkDialog();\n        }}\n      >\n        {t(\"unlinkAccount\")}\n      </Button>\n    );\n  };\n\n  const linkRenderer = (idp: IdentityProviderRepresentation) => {\n    return (\n      <Button\n        variant=\"link\"\n        onClick={() => {\n          setFederatedId(idp.alias!);\n          setIsLinkIdPModalOpen(true);\n        }}\n      >\n        {t(\"linkAccount\")}\n      </Button>\n    );\n  };\n\n  const linkedIdpColumns = () => {\n    const columns = [\n      {\n        name: \"identityProvider\",\n        displayKey: \"name\",\n        cellRenderer: idpLinkRenderer,\n        transforms: [cellWidth(20)],\n      },\n\n      {\n        name: \"userId\",\n        displayKey: \"userID\",\n        cellFormatters: [emptyFormatter()],\n        transforms: [cellWidth(30)],\n      },\n      {\n        name: \"userName\",\n        displayKey: \"username\",\n        cellFormatters: [emptyFormatter()],\n        transforms: [cellWidth(20)],\n      },\n      {\n        name: \"\",\n        cellRenderer: unlinkRenderer,\n        transforms: [cellWidth(20)],\n      },\n    ];\n\n    if (canQueryIDPDetails)\n      columns.splice(1, 0, {\n        name: \"type\",\n        displayKey: \"type\",\n        cellRenderer: badgeRenderer1,\n        transforms: [cellWidth(10)],\n      });\n\n    return columns;\n  };\n\n  return (\n    <>\n      {isLinkIdPModalOpen && (\n        <UserIdpModal\n          userId={userId}\n          federatedId={federatedId}\n          onClose={() => setIsLinkIdPModalOpen(false)}\n          onRefresh={refresh}\n        />\n      )}\n      <UnlinkConfirm />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <FormPanel title={t(\"linkedIdPs\")} className=\"kc-linked-idps\">\n          <TextContent>\n            <Text className=\"kc-available-idps-text\">\n              {t(\"linkedIdPsText\")}\n            </Text>\n          </TextContent>\n          <KeycloakDataTable\n            loader={linkedIdPsLoader}\n            key={key}\n            isPaginated={false}\n            ariaLabelKey=\"LinkedIdPs\"\n            className=\"kc-linked-IdPs-table\"\n            columns={linkedIdpColumns()}\n            emptyState={\n              <TextContent className=\"kc-no-providers-text\">\n                <Text>{t(\"noProvidersLinked\")}</Text>\n              </TextContent>\n            }\n          />\n        </FormPanel>\n        {hasAccess(\"manage-users\") && canQueryIDPDetails && (\n          <FormPanel className=\"kc-available-idps\" title={t(\"availableIdPs\")}>\n            <TextContent>\n              <Text className=\"kc-available-idps-text\">\n                {t(\"availableIdPsText\")}\n              </Text>\n            </TextContent>\n            <KeycloakDataTable\n              loader={availableIdPsLoader}\n              key={key}\n              isPaginated={false}\n              ariaLabelKey=\"LinkedIdPs\"\n              className=\"kc-linked-IdPs-table\"\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"name\",\n                  cellFormatters: [emptyFormatter(), upperCaseFormatter()],\n                  transforms: [cellWidth(20)],\n                },\n                {\n                  name: \"type\",\n                  displayKey: \"type\",\n                  cellRenderer: badgeRenderer2,\n                  transforms: [cellWidth(60)],\n                },\n                {\n                  name: \"\",\n                  cellRenderer: linkRenderer,\n                },\n              ]}\n              emptyState={\n                <TextContent className=\"kc-no-providers-text\">\n                  <Text>{t(\"noAvailableIdentityProviders\")}</Text>\n                </TextContent>\n              }\n            />\n          </FormPanel>\n        )}\n      </PageSection>\n    </>\n  );\n};\n","import type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype UserRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const UserRoleMapping = ({ id, name }: UserRoleMappingProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"userRoleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"users\" save={assignRoles} />;\n};\n","import { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport SessionsTable from \"../sessions/SessionsTable\";\nimport { useParams } from \"../utils/useParams\";\nimport type { UserParams } from \"./routes/User\";\n\nexport const UserSessions = () => {\n  const { adminClient } = useAdminClient();\n\n  const { id } = useParams<UserParams>();\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n\n  const loader = () => adminClient.users.listSessions({ id, realm });\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"username\", \"type\"]}\n        emptyInstructions={t(\"noSessionsForUser\")}\n        logoutUser={id}\n      />\n    </PageSection>\n  );\n};\n","import type {\n  UserProfileConfig,\n  UserProfileMetadata,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  isUserProfileError,\n  setUserProfileServerError,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { TFunction } from \"i18next\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { UserProfileProvider } from \"../realm-settings/user-profile/UserProfileContext\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport { Organizations } from \"./Organizations\";\nimport { UserAttributes } from \"./UserAttributes\";\nimport { UserConsents } from \"./UserConsents\";\nimport { UserCredentials } from \"./UserCredentials\";\nimport { BruteForced, UserForm } from \"./UserForm\";\nimport { UserGroups } from \"./UserGroups\";\nimport { UserIdentityProviderLinks } from \"./UserIdentityProviderLinks\";\nimport { UserRoleMapping } from \"./UserRoleMapping\";\nimport { UserSessions } from \"./UserSessions\";\nimport { UserEvents } from \"../events/UserEvents\";\nimport {\n  UIUserRepresentation,\n  UserFormFields,\n  filterManagedAttributes,\n  toUserFormFields,\n  toUserRepresentation,\n} from \"./form-state\";\nimport { UserParams, UserTab, toUser } from \"./routes/User\";\nimport { toUsers } from \"./routes/Users\";\nimport { isLightweightUser } from \"./utils\";\n\nimport \"./user-section.css\";\n\nexport default function EditUser() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { hasAccess } = useAccess();\n  const { id } = useParams<UserParams>();\n  const { realm: realmName, realmRepresentation: realm } = useRealm();\n  // Validation of form fields is performed on server, thus we need to clear all errors before submit\n  const clearAllErrorsBeforeSubmit = async (values: UserFormFields) => ({\n    values,\n    errors: {},\n  });\n  const form = useForm<UserFormFields>({\n    mode: \"onChange\",\n    resolver: clearAllErrorsBeforeSubmit,\n  });\n  const [user, setUser] = useState<UIUserRepresentation>();\n  const [bruteForced, setBruteForced] = useState<BruteForced>();\n  const [isUnmanagedAttributesEnabled, setUnmanagedAttributesEnabled] =\n    useState<boolean>();\n  const [userProfileMetadata, setUserProfileMetadata] =\n    useState<UserProfileMetadata>();\n  const [refreshCount, setRefreshCount] = useState(0);\n  const refresh = () => setRefreshCount((count) => count + 1);\n  const lightweightUser = isLightweightUser(user?.id);\n  const [upConfig, setUpConfig] = useState<UserProfileConfig>();\n\n  const [realmHasOrganizations, setRealmHasOrganizations] = useState(false);\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const showOrganizations =\n    isFeatureEnabled(Feature.Organizations) && realm?.organizationsEnabled;\n\n  const toTab = (tab: UserTab) =>\n    toUser({\n      realm: realmName,\n      id: user?.id || \"\",\n      tab,\n    });\n\n  const settingsTab = useRoutableTab(toTab(\"settings\"));\n  const attributesTab = useRoutableTab(toTab(\"attributes\"));\n  const credentialsTab = useRoutableTab(toTab(\"credentials\"));\n  const roleMappingTab = useRoutableTab(toTab(\"role-mapping\"));\n  const groupsTab = useRoutableTab(toTab(\"groups\"));\n  const organizationsTab = useRoutableTab(toTab(\"organizations\"));\n  const consentsTab = useRoutableTab(toTab(\"consents\"));\n  const identityProviderLinksTab = useRoutableTab(\n    toTab(\"identity-provider-links\"),\n  );\n  const sessionsTab = useRoutableTab(toTab(\"sessions\"));\n  const userEventsTab = useRoutableTab(toTab(\"user-events\"));\n\n  useFetch(\n    async () =>\n      Promise.all([\n        adminClient.users.findOne({\n          id: id!,\n          userProfileMetadata: true,\n        }) as UIUserRepresentation | undefined,\n        adminClient.attackDetection.findOne({ id: id! }),\n        adminClient.users.getUnmanagedAttributes({ id: id! }),\n        adminClient.users.getProfile({ realm: realmName }),\n        showOrganizations\n          ? adminClient.organizations.find({ first: 0, max: 1 })\n          : [],\n      ]),\n    ([\n      userData,\n      attackDetection,\n      unmanagedAttributes,\n      upConfig,\n      organizations,\n    ]) => {\n      if (!userData || !realm || !attackDetection) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      const { userProfileMetadata, ...user } = userData;\n      setUserProfileMetadata(userProfileMetadata);\n      user.unmanagedAttributes = unmanagedAttributes;\n      user.attributes = filterManagedAttributes(\n        user.attributes,\n        unmanagedAttributes,\n      );\n\n      if (upConfig.unmanagedAttributePolicy !== undefined) {\n        setUnmanagedAttributesEnabled(true);\n      }\n\n      setUser(user);\n      setUpConfig(upConfig);\n\n      const isBruteForceProtected = realm.bruteForceProtected;\n      const isLocked = isBruteForceProtected && attackDetection.disabled;\n\n      setBruteForced({ isBruteForceProtected, isLocked });\n      setRealmHasOrganizations(organizations.length === 1);\n\n      form.reset(toUserFormFields(user));\n    },\n    [refreshCount],\n  );\n\n  const save = async (data: UserFormFields) => {\n    try {\n      await adminClient.users.update(\n        { id: user!.id! },\n        toUserRepresentation(data),\n      );\n      addAlert(t(\"userSaved\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      if (isUserProfileError(error)) {\n        if (\n          isUnmanagedAttributesEnabled &&\n          Array.isArray(data.unmanagedAttributes)\n        ) {\n          const unmanagedAttributeErrors: object[] = new Array(\n            data.unmanagedAttributes.length,\n          );\n          let someUnmanagedAttributeError = false;\n          setUserProfileServerError<UserFormFields>(\n            error,\n            (field, params) => {\n              if (field.startsWith(\"attributes.\")) {\n                const attributeName = field.substring(\"attributes.\".length);\n                (data.unmanagedAttributes as KeyValueType[]).forEach(\n                  (attr, index) => {\n                    if (attr.key === attributeName) {\n                      unmanagedAttributeErrors[index] = params;\n                      someUnmanagedAttributeError = true;\n                    }\n                  },\n                );\n              } else {\n                form.setError(field, params);\n              }\n            },\n            ((key, param) => t(key as string, param as any)) as TFunction,\n          );\n          if (someUnmanagedAttributeError) {\n            form.setError(\n              \"unmanagedAttributes\",\n              unmanagedAttributeErrors as any,\n            );\n          }\n        } else {\n          setUserProfileServerError<UserFormFields>(error, form.setError, ((\n            key,\n            param,\n          ) => t(key as string, param as any)) as TFunction);\n        }\n        addError(\"userNotSaved\", \"\");\n      } else {\n        addError(\"userCreateError\", error);\n      }\n    }\n  };\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmUserTitle\",\n    messageKey: \"disableConfirmUser\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      save({\n        ...toUserFormFields(user!),\n        enabled: false,\n      });\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirm\",\n    messageKey: \"deleteConfirmCurrentUser\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (lightweightUser) {\n          await adminClient.users.logout({ id: user!.id! });\n        } else {\n          await adminClient.users.del({ id: user!.id! });\n        }\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n        navigate(toUsers({ realm: realmName }));\n      } catch (error) {\n        addError(\"userDeletedError\", error);\n      }\n    },\n  });\n\n  const [toggleImpersonateDialog, ImpersonateConfirm] = useConfirmDialog({\n    titleKey: \"impersonateConfirm\",\n    messageKey: \"impersonateConfirmDialog\",\n    continueButtonLabel: \"impersonate\",\n    onConfirm: async () => {\n      try {\n        const data = await adminClient.users.impersonation(\n          { id: user!.id! },\n          { user: user!.id!, realm: realmName },\n        );\n        if (data.sameRealm) {\n          window.location = data.redirect;\n        } else {\n          window.open(data.redirect, \"_blank\");\n        }\n      } catch (error) {\n        addError(\"impersonateError\", error);\n      }\n    },\n  });\n\n  if (!user || !bruteForced) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ImpersonateConfirm />\n      <DeleteConfirm />\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={user.username!}\n        className=\"kc-username-view-header\"\n        divider={false}\n        badges={\n          lightweightUser\n            ? [\n                {\n                  text: (\n                    <Tooltip content={t(\"transientUserTooltip\")}>\n                      <Label\n                        data-testid=\"user-details-label-transient-user\"\n                        icon={<InfoCircleIcon />}\n                      >\n                        {t(\"transientUser\")}\n                      </Label>\n                    </Tooltip>\n                  ),\n                },\n              ]\n            : []\n        }\n        dropdownItems={[\n          <DropdownItem\n            key=\"impersonate\"\n            isDisabled={!user.access?.impersonate}\n            onClick={() => toggleImpersonateDialog()}\n          >\n            {t(\"impersonate\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!user.access?.manage}\n            onClick={() => toggleDeleteDialog()}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            save({\n              ...toUserFormFields(user),\n              enabled: value,\n            });\n          }\n        }}\n        isEnabled={user.enabled}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <UserProfileProvider>\n          <FormProvider {...form}>\n            <RoutableTabs\n              isBox\n              mountOnEnter\n              defaultLocation={toTab(\"settings\")}\n            >\n              <Tab\n                data-testid=\"user-details-tab\"\n                title={<TabTitleText>{t(\"details\")}</TabTitleText>}\n                {...settingsTab}\n              >\n                <PageSection variant=\"light\">\n                  <UserForm\n                    form={form}\n                    realm={realm!}\n                    user={user}\n                    bruteForce={bruteForced}\n                    userProfileMetadata={userProfileMetadata}\n                    refresh={refresh}\n                    save={save}\n                  />\n                </PageSection>\n              </Tab>\n              {isUnmanagedAttributesEnabled && (\n                <Tab\n                  data-testid=\"attributes\"\n                  title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n                  {...attributesTab}\n                >\n                  <UserAttributes user={user} save={save} upConfig={upConfig} />\n                </Tab>\n              )}\n              <Tab\n                data-testid=\"credentials\"\n                isHidden={!user.access?.view}\n                title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                {...credentialsTab}\n              >\n                <UserCredentials user={user} setUser={setUser} />\n              </Tab>\n              <Tab\n                data-testid=\"role-mapping-tab\"\n                isHidden={!user.access?.view}\n                title={<TabTitleText>{t(\"roleMapping\")}</TabTitleText>}\n                {...roleMappingTab}\n              >\n                <UserRoleMapping id={user.id!} name={user.username!} />\n              </Tab>\n              {hasAccess(\"query-groups\") && (\n                <Tab\n                  data-testid=\"user-groups-tab\"\n                  title={<TabTitleText>{t(\"groups\")}</TabTitleText>}\n                  {...groupsTab}\n                >\n                  <UserGroups user={user} />\n                </Tab>\n              )}\n              {showOrganizations && realmHasOrganizations && (\n                <Tab\n                  data-testid=\"user-organizations-tab\"\n                  title={<TabTitleText>{t(\"organizations\")}</TabTitleText>}\n                  {...organizationsTab}\n                >\n                  <Organizations user={user} />\n                </Tab>\n              )}\n              <Tab\n                data-testid=\"user-consents-tab\"\n                title={<TabTitleText>{t(\"consents\")}</TabTitleText>}\n                {...consentsTab}\n              >\n                <UserConsents />\n              </Tab>\n              <Tab\n                data-testid=\"identity-provider-links-tab\"\n                title={\n                  <TabTitleText>{t(\"identityProviderLinks\")}</TabTitleText>\n                }\n                {...identityProviderLinksTab}\n              >\n                <UserIdentityProviderLinks userId={user.id!} />\n              </Tab>\n              <Tab\n                data-testid=\"user-sessions-tab\"\n                title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n                {...sessionsTab}\n              >\n                <UserSessions />\n              </Tab>\n              {hasAccess(\"view-events\") && realm?.eventsEnabled && (\n                <Tab\n                  data-testid=\"user-events-tab\"\n                  title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n                  {...userEventsTab}\n                >\n                  <UserEvents user={user.id} />\n                </Tab>\n              )}\n            </RoutableTabs>\n          </FormProvider>\n        </UserProfileProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["mapTag","setTag","objectProto","hasOwnProperty","isEmpty","value","isArrayLike","isArray","isBuffer","isTypedArray","isArguments","tag","getTag","isPrototype","baseKeys","key","OrganizationModal","isJoin","existingOrgs","onAdd","onClose","adminClient","useAdminClient","t","useTranslation","selectedRows","setSelectedRows","useState","loader","first","max","search","params","orgs","differenceBy","jsx","Modal","ModalVariant","Button","KeycloakDataTable","rows","row","TableText","Organizations","user","id","useParams","navigate","useNavigate","addAlert","addError","useAlerts","realm","useRealm","setKey","refresh","joinToggle","toggle","setJoinToggle","useToggle","shouldJoin","setShouldJoin","openOrganizationPicker","setOpenOrganizationPicker","userOrgs","setUserOrgs","selectedOrgs","setSelectedOrgs","searchText","setSearchText","searchTriggerText","setSearchTriggerText","filteredMembershipTypes","setFilteredMembershipTypes","isOpen","setIsOpen","membershipOptions","onToggleClick","onSelect","_event","item","useFetch","userOrganizations","filteredOrgs","org","orgId","membershipType","membership","capitalizeFirstLetterFormatter","type","handleChange","handleSearch","clearInput","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","toUsers","error","jsxs","Fragment","form","OrganizationTable","organization","children","Link","toEditOrganization","ToolbarItem","SearchInputComponent","Dropdown","ref","MenuToggle","DropdownList","DropdownItem","CheckboxFilterComponent","nextOpen","ListEmptyState","UserAttributes","save","upConfig","useFormContext","PageSection","PageSectionVariants","AttributesForm","toUserFormFields","UnmanagedAttributePolicy","UserConsents","selectedClient","setSelectedClient","formatDate","useFormatDate","alphabetize","consentsList","sortBy","client","getConsents","clientScopesRenderer","grantedClientScopes","ChipGroup","currentChip","Chip","AlertVariant","emptyFormatter","cellWidth","createdDate","lastUpdatedDate","CubesIcon","CredentialDataDialog","credentialData","Table","TableVariant","Thead","Tr","Th","Tbody","cred","index","Td","CredentialRow","credential","resetPassword","toggleDelete","showData","toggleShow","kebabOpen","toggleKebab","localeSort","useLocaleSort","useMemo","EllipsisVIcon","InlineLabelEdit","userId","isEditable","register","handleSubmit","useForm","Form","userLabel","FormGroup","TextInput","CheckIcon","TimesIcon","PencilAltIcon","LifespanField","TimeSelectorControl","ResetCredentialDialog","control","resetActionWatcher","useWatch","resetIsNotDisabled","sendCredentialsResetEmail","actions","lifespan","ConfirmDialogModal","FormProvider","RequiredActionMultiSelect","credFormDefaultValues","ResetPasswordDialog","isResetPassword","onAddRequiredActions","isValid","errors","watch","clearErrors","setError","confirm","password","passwordConfirmation","toggleConfirmSaveModal","ConfirmSaveModal","saveUserPassword","temporaryPassword","RequiredActionAlias","credentialLabel","c","onChange","rest","PasswordInput","e","FormErrorText","DefaultSwitchControl","UserCredentialsRow","isUserLabelEdit","setIsUserLabelEdit","UserCredentials","setUser","openCredentialReset","setOpenCredentialReset","userCredentials","setUserCredentials","groupedUserCredentials","setGroupedUserCredentials","selectedCredential","setSelectedCredential","setIsResetPassword","bodyRef","useRef","state","setState","credentials","groupedCredentials","r","a","groupedCredentialsArray","groupedCredential","passwordTypeFinder","toggleModal","toggleCredentialsResetModal","itemOrder","onDragStart","evt","draggedItemId","styles","moveItem","items","targetItem","toIndex","fromIndex","result","move","ulNode","nodes","i","itemId","onDragCancel","el","onDragLeave","isValidDrop","ulRect","onDrop","onDragFinish","onDragOver","curListItem","dragId","draggingToItemIndex","tempItemOrder","requiredActions","onDragEnd","target","dragged","newOrder","oldIndex","newIndex","times","ids","onToggleDelete","useFederatedCredentials","credentialTypes","setCredentialTypes","KeycloakSpinner","hasCredentialTypes","noCredentials","noFederatedCredentials","emptyState","Divider","HelpItem","rowIndex","_","toUpperCase","FederatedUserLink","UserGroups","selectedGroups","setSelectedGroups","isDirectMembership","setDirectMembership","directMembershipList","setDirectMembershipList","open","setOpen","enabled","useHelp","hasAccess","useAccess","isManager","groupsList","group","searchParam","joinedUserGroups","indirect","g","paths","p","uniqBy","leave","addGroups","groups","GroupPickerDialog","intersectionBy","Checkbox","Popover","QuestionCircleIcon","GroupPath","UserIdpModal","federatedId","onRefresh","onSubmit","federatedIdentity","capitalize","TextControl","UserIdentityProviderLinks","setFederatedId","isLinkIdPModalOpen","setIsLinkIdPModalOpen","hasSomeAccess","canQueryIDPDetails","identityProviders","useServerInfo","getFederatedIdentities","allFedIds","allProviders","element","getAvailableIdPs","linkedIdPsLoader","availableIdPsLoader","linkedNames","x","toggleUnlinkDialog","UnlinkConfirm","idpLinkRenderer","idp","toIdentityProvider","badgeRenderer1","groupName","provider","Label","badgeRenderer2","unlinkRenderer","fedIdentity","linkRenderer","linkedIdpColumns","columns","FormPanel","TextContent","Text","upperCaseFormatter","UserRoleMapping","name","RoleMapping","realmRoles","UserSessions","SessionsTable","EditUser","realmName","values","bruteForced","setBruteForced","isUnmanagedAttributesEnabled","setUnmanagedAttributesEnabled","userProfileMetadata","setUserProfileMetadata","refreshCount","setRefreshCount","count","lightweightUser","isLightweightUser","setUpConfig","realmHasOrganizations","setRealmHasOrganizations","showOrganizations","useIsFeatureEnabled","Feature","toTab","tab","toUser","settingsTab","useRoutableTab","attributesTab","credentialsTab","roleMappingTab","groupsTab","organizationsTab","consentsTab","identityProviderLinksTab","sessionsTab","userEventsTab","userData","attackDetection","unmanagedAttributes","organizations","filterManagedAttributes","isBruteForceProtected","isLocked","data","toUserRepresentation","isUserProfileError","unmanagedAttributeErrors","someUnmanagedAttributeError","setUserProfileServerError","field","attributeName","attr","param","toggleDisableDialog","DisableConfirm","toggleImpersonateDialog","ImpersonateConfirm","ViewHeader","Tooltip","InfoCircleIcon","UserProfileProvider","RoutableTabs","Tab","TabTitleText","UserForm","UserEvents"],"mappings":"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","x_google_ignoreList":[0]}