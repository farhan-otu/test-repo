{"version":3,"file":"ClientDetails-BV9RqlYl.js","sources":["../../../../../../../../../../node_modules/.pnpm/@patternfly+react-styles@5.4.1/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../../../../../../../node_modules/.pnpm/@patternfly+react-core@5.4.8_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../../../../../../src/components/download-dialog/DownloadDialog.tsx","../../../../../../../src/clients/advanced/TokenLifespan.tsx","../../../../../../../src/clients/advanced/AdvancedSettings.tsx","../../../../../../../src/clients/advanced/AuthenticationOverrides.tsx","../../../../../../../src/components/time-selector/TimeSelectorForm.tsx","../../../../../../../src/clients/advanced/AddHostDialog.tsx","../../../../../../../src/clients/advanced/ClusteringPanel.tsx","../../../../../../../src/clients/advanced/ApplicationUrls.tsx","../../../../../../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../../../../../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../../../../../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../../../../../../src/clients/AdvancedTab.tsx","../../../../../../../src/clients/ClientSessions.tsx","../../../../../../../src/clients/add/AccessSettings.tsx","../../../../../../../src/clients/add/LoginSettingsPanel.tsx","../../../../../../../src/clients/add/LogoutPanel.tsx","../../../../../../../src/clients/add/SamlConfig.tsx","../../../../../../../src/clients/add/SamlSignature.tsx","../../../../../../../src/clients/ClientSettings.tsx","../../../../../../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../../../../../../src/clients/authorization/AuthorizationDataModal.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../../../../../../src/clients/authorization/evaluate/Results.tsx","../../../../../../../src/clients/authorization/AuthorizationEvaluate.tsx","../../../../../../../src/clients/authorization/AuthorizationExport.tsx","../../../../../../../src/clients/authorization/DetailDescription.tsx","../../../../../../../src/clients/authorization/EmptyPermissionsState.tsx","../../../../../../../src/clients/authorization/MoreLabel.tsx","../../../../../../../src/clients/authorization/SearchDropdown.tsx","../../../../../../../src/clients/authorization/Permissions.tsx","../../../../../../../src/clients/authorization/Policies.tsx","../../../../../../../src/clients/authorization/DetailCell.tsx","../../../../../../../src/clients/authorization/Resources.tsx","../../../../../../../src/clients/authorization/Scopes.tsx","../../../../../../../src/clients/authorization/ImportDialog.tsx","../../../../../../../src/clients/authorization/Settings.tsx","../../../../../../../src/clients/credentials/ClientSecret.tsx","../../../../../../../src/clients/credentials/SignedJWT.tsx","../../../../../../../src/clients/credentials/X509.tsx","../../../../../../../src/clients/credentials/Credentials.tsx","../../../../../../../src/clients/keys/Certificate.tsx","../../../../../../../src/clients/keys/StoreSettings.tsx","../../../../../../../src/clients/keys/GenerateKeyDialog.tsx","../../../../../../../src/clients/keys/ImportKeyDialog.tsx","../../../../../../../src/clients/keys/Keys.tsx","../../../../../../../src/clients/keys/ExportSamlKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeysDialog.tsx","../../../../../../../src/clients/keys/SamlImportKeyDialog.tsx","../../../../../../../src/clients/keys/SamlKeys.tsx","../../../../../../../src/clients/scopes/ClientScopes.tsx","../../../../../../../src/clients/scopes/GeneratedCodeTab.tsx","../../../../../../../src/clients/scopes/EvaluateScopes.tsx","../../../../../../../src/clients/service-account/ServiceAccount.tsx","../../../../../../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-v5-c-code-block\",\n  \"codeBlockActions\": \"pf-v5-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-v5-c-code-block__code\",\n  \"codeBlockContent\": \"pf-v5-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-v5-c-code-block__header\",\n  \"codeBlockPre\": \"pf-v5-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        actions && (React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions))),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block.mjs';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(`${styles.codeBlockActions}-item`, className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Panel/panel.mjs';\nimport { css } from '@patternfly/react-styles';\nexport const PanelHeader = (_a) => {\n    var { className, children } = _a, props = __rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.panelHeader, className) }, props), children));\n};\nPanelHeader.displayName = 'PanelHeader';\n//# sourceMappingURL=PanelHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content.mjs';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport { HelpItem, useFetch, useHelp } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Form,\n  FormGroup,\n  MenuToggle,\n  ModalVariant,\n  Select,\n  SelectList,\n  SelectOption,\n  Stack,\n  StackItem,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id,\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected],\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"privateKeyMask\")}</PrivateKeyPem>`,\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetchWithError(\n          `${addTrailingSlash(\n            adminClient.baseUrl,\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken(),\n            ),\n          },\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected],\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename,\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"downloadType\")}\n                  fieldLabelId=\"formatOption\"\n                />\n              }\n            >\n              <Select\n                isOpen={openType}\n                onOpenChange={(isOpen) => setOpenType(isOpen)}\n                toggle={(ref) => (\n                  <MenuToggle\n                    id=\"type\"\n                    ref={ref}\n                    onClick={() => setOpenType(!openType)}\n                    isExpanded={openType}\n                  >\n                    {selected}\n                  </MenuToggle>\n                )}\n                selected={selected}\n                onSelect={(_, value) => {\n                  setSelected(value?.toString() || \"\");\n                  setOpenType(false);\n                }}\n                aria-label={t(\"selectOne\")}\n                popperProps={{\n                  appendTo: document.body,\n                }}\n              >\n                <SelectList>\n                  {configFormats.map((configFormat) => (\n                    <SelectOption\n                      key={configFormat.id}\n                      value={configFormat.id}\n                      isSelected={selected === configFormat.id}\n                      description={enabled ? configFormat.helpText : undefined}\n                    >\n                      {configFormat.displayType}\n                    </SelectOption>\n                  ))}\n                </SelectList>\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"detailsHelp\")}\n                    fieldLabelId=\"details\"\n                  />\n                }\n              >\n                <TextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    typeof value === \"number\" ||\n    (typeof value === \"string\" && value !== \"\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(`${id}Help`)} fieldLabelId={id} />}\n      data-testid={`token-lifespan-${id}`}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                toggle={(ref) => (\n                  <MenuToggle\n                    ref={ref}\n                    onClick={() => setOpen(!open)}\n                    isExpanded={open}\n                  >\n                    {isExpireSet(field.value) ? t(expires) : t(inherited)}\n                  </MenuToggle>\n                )}\n                isOpen={open}\n                onOpenChange={(isOpen) => setOpen(isOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selected={isExpireSet(field.value) ? t(expires) : t(inherited)}\n              >\n                <SelectList>\n                  <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                  <SelectOption value={60}>{t(expires)}</SelectOption>\n                </SelectList>\n              </Select>\n            </SplitItem>\n            <SplitItem hidden={!isExpireSet(field.value)}>\n              <TimeSelector\n                validated={\n                  isExpireSet(field.value) && field.value! < 1\n                    ? \"warning\"\n                    : \"default\"\n                }\n                units={units}\n                value={field.value === \"\" ? defaultValue : field.value}\n                onChange={field.onChange}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                min={1}\n                isDisabled={!isExpireSet(field.value)}\n              />\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  MenuToggle,\n  Select,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const { realmRepresentation: realm } = useRealm();\n\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDPoPEnabled = isFeatureEnabled(Feature.DPoP);\n\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"assertionLifespanHelp\")}\n              fieldLabelId=\"assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\",\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\",\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\",\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\",\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\",\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          {realm?.offlineSessionMaxLifespanEnabled && (\n            <TokenLifespan\n              id=\"clientOfflineSessionMax\"\n              name={convertAttributeNameToForm(\n                \"attributes.client.offline.session.max.lifespan\",\n              )}\n              defaultValue={\n                realm?.offlineSessionMaxLifespanEnabled\n                  ? realm.offlineSessionMaxLifespan\n                  : undefined\n              }\n              units={[\"minute\", \"day\", \"hour\"]}\n            />\n          )}\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.tls.client.certificate.bound.access.tokens\",\n            )}\n            label={t(\"oAuthMutual\")}\n            labelIcon={t(\"oAuthMutualHelp\")}\n            stringify\n          />\n          {isDPoPEnabled && (\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.dpop.bound.access.tokens\",\n              )}\n              label={t(\"oAuthDPoP\")}\n              labelIcon={t(\"oAuthDPoPHelp\")}\n              stringify\n            />\n          )}\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"keyForCodeExchangeHelp\")}\n                fieldLabelId=\"keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\",\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggle={(ref) => (\n                    <MenuToggle\n                      id=\"keyForCodeExchange\"\n                      ref={ref}\n                      onClick={() => setOpen(!open)}\n                      isExpanded={open}\n                    >\n                      {[field.value || t(\"choose\")]}\n                    </MenuToggle>\n                  )}\n                  isOpen={open}\n                  onOpenChange={(isOpen) => setOpen(isOpen)}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selected={field.value}\n                >\n                  <SelectList>\n                    {[\"\", \"S256\", \"plain\"].map((v) => (\n                      <SelectOption key={v} value={v}>\n                        {v || t(\"choose\")}\n                      </SelectOption>\n                    ))}\n                  </SelectList>\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.require.pushed.authorization.requests\",\n            )}\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            labelIcon={t(\"pushedAuthorizationRequestRequiredHelp\")}\n            stringify\n          />\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.use.lightweight.access.token.enabled\",\n            )}\n            label={t(\"lightweightAccessToken\")}\n            labelIcon={t(\"lightweightAccessTokenHelp\")}\n            stringify\n          />\n\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.client.introspection.response.allow.jwt.claim.enabled\",\n            )}\n            label={t(\"supportJwtClaimInIntrospectionResponse\")}\n            labelIcon={t(\"supportJwtClaimInIntrospectionResponseHelp\")}\n            stringify\n          />\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"acrToLoAMappingHelp\")}\n                fieldLabelId=\"acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              label={t(\"acrToLoAMapping\")}\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultACRValuesHelp\")}\n                fieldLabelId=\"defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              aria-label=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n          <TextControl\n            type=\"text\"\n            name={convertAttributeNameToForm(\"attributes.minimum.acr.value\")}\n            label={t(\"minimumACRValue\")}\n            labelIcon={t(\"minimumACRValueHelp\")}\n          />\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport { SelectControl, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [flows, setFlows] = useState<AuthenticationFlowRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows(filteredFlows);\n    },\n    [],\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <SelectControl\n        name=\"authenticationFlowBindingOverrides.browser\"\n        label={t(\"browserFlow\")}\n        labelIcon={t(\"browserFlowHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n        ]}\n      />\n      {protocol === \"openid-connect\" && (\n        <SelectControl\n          name=\"authenticationFlowBindingOverrides.direct_grant\"\n          label={t(\"directGrant\")}\n          labelIcon={t(\"directGrantHelp\")}\n          controller={{\n            defaultValue: \"\",\n          }}\n          options={[\n            { key: \"\", value: t(\"choose\") },\n            ...flows.map(({ id, alias }) => ({ key: id!, value: alias! })),\n          ]}\n        />\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { useController } from \"react-hook-form\";\nimport { TimeSelector, TimeSelectorProps } from \"./TimeSelector\";\n\ntype TimeSelectorFormProps = TimeSelectorProps & {\n  name: string;\n};\n\nexport const TimeSelectorForm = (props: TimeSelectorFormProps) => {\n  const { field } = useController(props);\n\n  return <TimeSelector {...props} {...field} />;\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useForm<FormFields>();\n  const {\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n          <TextControl\n            name=\"node\"\n            label={t(\"nodeHost\")}\n            rules={{\n              required: t(\"required\"),\n            }}\n          />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { TimeSelectorForm } from \"../../components/time-selector/TimeSelectorForm\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\ntype Node = {\n  host: string;\n  registration: string;\n};\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"nodeReRegistrationTimeoutHelp\")}\n              fieldLabelId=\"nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <TimeSelectorForm name=\"nodeReRegistrationTimeout\" />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={(_event, val) => setExpanded(val)}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve<Node[]>(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                }),\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              } as Action<Node>,\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME,\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\ntype ApplicationUrlsProps = {\n  isDisabled?: boolean;\n};\n\nexport const ApplicationUrls = (props: ApplicationUrlsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"attributes.logoUri\"\n        label={t(\"logoUrl\")}\n        labelIcon={t(\"logoUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.policyUri\"\n        label={t(\"policyUrl\")}\n        labelIcon={t(\"policyUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.tosUri\"\n        label={t(\"termsOfServiceUrl\")}\n        labelIcon={t(\"termsOfServiceUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n    </>\n  );\n};\n","import { ProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport { ActionGroup, Button, FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation();\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n\n  const convert = (list: { [index: string]: ProviderRepresentation }) =>\n    sortProviders(list).map((i) => ({ key: i, value: i }));\n\n  const prependEmpty = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"\", value: t(\"choose\") },\n    ...convert(list),\n  ];\n\n  const prependAny = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"any\", value: t(\"any\") },\n    ...convert(list),\n  ];\n\n  const prependNone = (list: { [index: string]: ProviderRepresentation }) => [\n    { key: \"none\", value: t(\"none\") },\n    ...convert(list),\n  ];\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.access.token.signed.response.alg\",\n        )}\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        labelIcon={t(\"accessTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.signed.response.alg\",\n        )}\n        label={t(\"idTokenSignatureAlgorithm\")}\n        labelIcon={t(\"idTokenSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(clientSignatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.alg\",\n        )}\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.id.token.encrypted.response.enc\",\n        )}\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\"idTokenEncryptionContentEncryptionAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.response.signature.alg\",\n        )}\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        labelIcon={t(\"userInfoSignedResponseAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.alg\",\n        )}\n        label={t(\"userInfoResponseEncryptionKeyManagementAlgorithm\")}\n        labelIcon={t(\"userInfoResponseEncryptionKeyManagementAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.user.info.encrypted.response.enc\",\n        )}\n        label={t(\"userInfoResponseEncryptionContentEncryptionAlgorithm\")}\n        labelIcon={t(\n          \"userInfoResponseEncryptionContentEncryptionAlgorithmHelp\",\n        )}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.signature.alg\",\n        )}\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        labelIcon={t(\"requestObjectSignatureAlgorithmHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"any\", value: t(\"any\") },\n          ...prependNone(clientSignatureProviders!),\n        ]}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.alg\",\n        )}\n        label={t(\"requestObjectEncryption\")}\n        labelIcon={t(\"requestObjectEncryptionHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependAny(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.encryption.enc\",\n        )}\n        label={t(\"requestObjectEncoding\")}\n        labelIcon={t(\"requestObjectEncodingHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependAny(contentEncryptionProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.request.object.required\",\n        )}\n        label={t(\"requestObjectRequired\")}\n        labelIcon={t(\"requestObjectRequiredHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          \"not required\",\n          \"request or request_uri\",\n          \"request only\",\n          \"request_uri only\",\n        ].map((p) => ({\n          key: p,\n          value: t(`requestObject.${p}`),\n        }))}\n      />\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"validRequestURIsHelp\")}\n            fieldLabelId=\"validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.signed.response.alg\",\n        )}\n        label={t(\"authorizationSignedResponseAlg\")}\n        labelIcon={t(\"authorizationSignedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(signatureProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.alg\",\n        )}\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        labelIcon={t(\"authorizationEncryptedResponseAlgHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(cekManagementProviders!)}\n      />\n      <SelectControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.authorization.encrypted.response.enc\",\n        )}\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        labelIcon={t(\"authorizationEncryptedResponseEncHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={prependEmpty(contentEncryptionProviders!)}\n      />\n      <ActionGroup>\n        <Button variant=\"secondary\" id=\"fineGrainSave\" onClick={save}>\n          {t(\"save\")}\n        </Button>\n        <Button id=\"fineGrainRevert\" variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_post\"\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        labelIcon={t(\"assertionConsumerServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_redirect\"\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        labelIcon={t(\"assertionConsumerServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_post\"\n        label={t(\"logoutServicePostBindingURL\")}\n        labelIcon={t(\"logoutServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_redirect\"\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        labelIcon={t(\"logoutServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_soap\"\n        label={t(\"logoutServiceSoapBindingUrl\")}\n        labelIcon={t(\"logoutServiceSoapBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_artifact\"\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        labelIcon={t(\"logoutServiceArtifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_binding_url\"\n        label={t(\"artifactBindingUrl\")}\n        labelIcon={t(\"artifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_resolution_service_url\"\n        label={t(\"artifactResolutionService\")}\n        labelIcon={t(\"artifactResolutionServiceHelp\")}\n        type=\"url\"\n      />\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save} data-testid=\"fineGrainSave\">\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"fineGrainRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeSessionStateFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"excludeIssuerFromAuthenticationResponse\")}\n        fieldId=\"excludeIssuerFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeIssuerFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeIssuerFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.issuer.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeIssuerFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeIssuerFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokensHelp\")}\n            fieldLabelId=\"useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\",\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokenForClientCredentialsGrantHelp\")}\n            fieldLabelId=\"useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useLowerCaseBearerTypeHelp\")}\n            fieldLabelId=\"useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(_event, value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport type { AddAlertFunction } from \"@keycloak/keycloak-ui-shared\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction,\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger,\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation();\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\",\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-py-0\">\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainOpenIdConnectConfigurationHelp\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"user.info.encrypted.response.alg\",\n                      \"user.info.encrypted.response.enc\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.signed.response.alg\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"openIdConnectCompatibilityModesHelp\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"exclude.session.state.from.auth.response\",\n                      \"use.refresh.tokens\",\n                      \"client_credentials.use_refresh_token\",\n                      \"token.response.type.bearer.lower-case\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"fineGrainSamlEndpointConfigHelp\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"advancedSettings\" + toUpperCase(protocol || \"\"))}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"pkce.code.challenge.method\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-v5-u-pb-lg\">\n                  {t(\"authenticationOverridesHelp\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser,\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant,\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../admin-client\";\nimport type { LoaderFunction } from \"@keycloak/keycloak-ui-shared\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n\n  const loader: LoaderFunction<UserSessionRepresentation> = async (\n    first,\n    max,\n  ) => {\n    const mapSessionsToType =\n      (type: string) => (sessions: UserSessionRepresentation[]) =>\n        sessions.map((session) => ({\n          type,\n          ...session,\n        }));\n\n    const allSessions = await Promise.all([\n      adminClient.clients\n        .listSessions({ id: client.id!, first, max })\n        .then(mapSessionsToType(t(\"sessionsType.regularSSO\"))),\n      adminClient.clients\n        .listOfflineSessions({\n          id: client.id!,\n          first,\n          max,\n        })\n        .then(mapSessionsToType(t(\"sessionsType.offline\"))),\n    ]);\n\n    return allSessions.flat();\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <TextControl\n          type=\"url\"\n          name=\"adminUrl\"\n          label={t(\"adminURL\")}\n          labelIcon={t(\"adminURLHelp\")}\n        />\n      )}\n      {client.bearerOnly && (\n        <FixedButtonsGroup\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isDisabled={isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, TextAreaControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\",\n    ),\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <SelectControl\n        name=\"attributes.login_theme\"\n        label={t(\"loginTheme\")}\n        labelIcon={t(\"loginThemeHelp\")}\n        controller={{\n          defaultValue: \"\",\n        }}\n        options={[\n          { key: \"\", value: t(\"choose\") },\n          ...loginThemes.map(({ name }) => ({ key: name, value: name })),\n        ]}\n      />\n      <DefaultSwitchControl\n        name=\"consentRequired\"\n        label={t(\"consentRequired\")}\n        labelIcon={t(\"consentRequiredHelp\")}\n      />\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.display.on.consent.screen\",\n        )}\n        label={t(\"displayOnClient\")}\n        labelIcon={t(\"displayOnClientHelp\")}\n        isDisabled={!consentRequired}\n        stringify\n      />\n      <TextAreaControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.consent.screen.text\",\n        )}\n        label={t(\"consentScreenText\")}\n        labelIcon={t(\"consentScreenTextHelp\")}\n        isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n      />\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\n\nconst validateUrl = (uri: string | undefined, error: string) =>\n  ((uri?.startsWith(\"https://\") || uri?.startsWith(\"http://\")) &&\n    !uri.includes(\"*\")) ||\n  uri === \"\" ||\n  error;\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n  const frontchannelLogoutTooltip =\n    protocol === \"openid-connect\"\n      ? \"frontchannelLogoutOIDCHelp\"\n      : \"frontchannelLogoutHelp\";\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(frontchannelLogoutTooltip)}\n            fieldLabelId=\"frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <TextControl\n          data-testid=\"frontchannelLogoutUrl\"\n          type=\"url\"\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.frontchannel.logout.url\",\n          )}\n          label={t(\"frontchannelLogoutUrl\")}\n          labelIcon={t(\"frontchannelLogoutUrlHelp\")}\n          rules={{\n            validate: (uri) =>\n              validateUrl(uri, t(\"frontchannelUrlInvalid\").toString()),\n          }}\n        />\n      )}\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <DefaultSwitchControl\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.frontchannel.logout.session.required\",\n          )}\n          defaultValue=\"true\"\n          label={t(\"frontchannelLogoutSessionRequired\")}\n          labelIcon={t(\"frontchannelLogoutSessionRequiredHelp\")}\n          stringify\n        />\n      )}\n      {protocol === \"openid-connect\" && !frontchannelLogout && (\n        <>\n          <TextControl\n            data-testid=\"backchannelLogoutUrl\"\n            type=\"url\"\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.backchannel.logout.url\",\n            )}\n            label={t(\"backchannelLogoutUrl\")}\n            labelIcon={t(\"backchannelLogoutUrlHelp\")}\n            rules={{\n              validate: (uri) =>\n                validateUrl(uri, t(\"backchannelUrlInvalid\").toString()),\n            }}\n          />\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutSessionRequiredHelp\")}\n                fieldLabelId=\"backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\",\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutRevokeOfflineSessionsHelp\")}\n                fieldLabelId=\"backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\",\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <FixedButtonsGroup\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isDisabled={!isManager}\n      />\n    </FormAccess>\n  );\n};\n","import { Path, PathValue } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ToggleProps = {\n  name: PathValue<FormFields, Path<FormFields>>;\n  label: string;\n};\nexport const Toggle = ({ name, label }: ToggleProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <DefaultSwitchControl\n      name={name}\n      label={t(label)}\n      labelIcon={t(`${label}Help`)}\n      stringify\n    />\n  );\n};\n\nexport const SamlConfig = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <SelectControl\n        name=\"attributes.saml_name_id_format\"\n        label={t(\"nameIdFormat\")}\n        labelIcon={t(\"nameIdFormatHelp\")}\n        controller={{\n          defaultValue: \"username\",\n        }}\n        options={[\"username\", \"email\", \"transient\", \"persistent\"]}\n      />\n      <Toggle\n        name=\"attributes.saml_force_name_id_format\"\n        label=\"forceNameIdFormat\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.force.post.binding\")}\n        label=\"forcePostBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.artifact.binding\")}\n        label=\"forceArtifactBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.authnstatement\")}\n        label=\"includeAuthnStatement\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.onetimeuse.condition\",\n        )}\n        label=\"includeOneTimeUseCondition\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.server.signature.keyinfo.ext\",\n        )}\n        label=\"optimizeLookup\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.allow.ecp.flow\")}\n        label=\"allowEcpFlow\"\n      />\n    </FormAccess>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Toggle } from \"./SamlConfig\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"RSA_SHA1\",\n  \"RSA_SHA256\",\n  \"RSA_SHA256_MGF1\",\n  \"RSA_SHA512\",\n  \"RSA_SHA512_MGF1\",\n  \"DSA_SHA1\",\n] as const;\n\nconst KEYNAME_TRANSFORMER = [\"NONE\", \"KEY_ID\", \"CERT_SUBJECT\"] as const;\n\nconst CANONICALIZATION = [\n  { name: \"EXCLUSIVE\", value: \"http://www.w3.org/2001/10/xml-exc-c14n#\" },\n  {\n    name: \"EXCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\",\n  },\n  {\n    name: \"INCLUSIVE\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\",\n  },\n  {\n    name: \"INCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\",\n  },\n] as const;\n\nexport const SamlSignature = () => {\n  const { t } = useTranslation();\n  const { watch } = useFormContext<FormFields>();\n\n  const signDocs = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.saml.server.signature\"),\n  );\n  const signAssertion = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.saml.assertion.signature\",\n    ),\n  );\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.server.signature\")}\n        label=\"signDocuments\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.assertion.signature\")}\n        label=\"signAssertions\"\n      />\n      {(signDocs === \"true\" || signAssertion === \"true\") && (\n        <>\n          <SelectControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.signature.algorithm\",\n            )}\n            label={t(\"signatureAlgorithm\")}\n            labelIcon={t(\"signatureAlgorithmHelp\")}\n            controller={{\n              defaultValue: SIGNATURE_ALGORITHMS[0],\n            }}\n            options={[...SIGNATURE_ALGORITHMS]}\n          />\n          <SelectControl\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer\",\n            )}\n            label={t(\"signatureKeyName\")}\n            labelIcon={t(\"signatureKeyNameHelp\")}\n            controller={{\n              defaultValue: KEYNAME_TRANSFORMER[0],\n            }}\n            options={[...KEYNAME_TRANSFORMER]}\n          />\n          <SelectControl\n            name=\"attributes.saml_signature_canonicalization_method\"\n            label={t(\"canonicalization\")}\n            labelIcon={t(\"canonicalizationHelp\")}\n            controller={{\n              defaultValue: CANONICALIZATION[0].value,\n            }}\n            options={CANONICALIZATION.map(({ name, value }) => ({\n              key: value,\n              value: name,\n            }))}\n          />\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"@keycloak/keycloak-ui-shared\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { FormFields } from \"./ClientDetails\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation();\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      label={t(\"jumpToSection\")}\n      className=\"pf-v5-u-px-lg pf-v5-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: t(\"accessSettings\"),\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { KeycloakSelect, SelectVariant } from \"@keycloak/keycloak-ui-shared\";\nimport { Button, SelectOption, TextInput } from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { camelCase } from \"lodash-es\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { defaultContextAttributes } from \"../utils\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation();\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key,\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key,\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}.${rowIndex}.value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <KeycloakSelect\n              toggleId={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n              placeholderText={t(\"selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </KeycloakSelect>\n          )}\n        />\n      ) : (\n        <TextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          aria-label={t(\"value\")}\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}.${fields.length - 1}.value`, \"\");\n\n  return (\n    <Table\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n    >\n      <Thead>\n        <Tr>\n          <Th width={40}>{t(\"key\")}</Th>\n          <Th width={40}>{t(\"value\")}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}.${rowIndex}.key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <KeycloakSelect\n                    toggleId={`${name}.${rowIndex}.key`}\n                    className=\"kc-attribute-key-selectable\"\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n                    placeholderText={t(\"selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </KeycloakSelect>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td>\n              <Button\n                id={`${name}-minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n                aria-label={t(\"remove\")}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\", { label: t(\"attribute\") })}\n              id={`${name}-plus-icon`}\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\", { label: t(\"attribute\") })}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </Table>\n  );\n};\n","import type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Text,\n  TextArea,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { prettyPrintJSON } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation();\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <TextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>\n\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <Table aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th aria-hidden=\"true\" />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th aria-hidden=\"true\" />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    ),\n                  )}\n                </Table>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n  InputGroupItem,\n  Select,\n  MenuToggle,\n  SelectList,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { Table, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { FixedButtonsGroup } from \"../../../components/form/FixedButtonGroup\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter,\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation();\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false,\n      ),\n    [evaluateResult.results, filter, searchQuery],\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  type=\"search\"\n                  aria-label={t(\"search\")}\n                  placeholder={t(\"search\")}\n                  onChange={(_event, val) => setSearchInput(val)}\n                  onKeyDown={handleKeyDown}\n                />\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"search\")}\n                  onClick={() => confirmSearchQuery()}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              toggle={(ref) => (\n                <MenuToggle\n                  ref={ref}\n                  onClick={toggleFilterDropdown}\n                  isExpanded={filterDropdownOpen}\n                  style={{ width: \"300px\" }}\n                >\n                  {filter}\n                </MenuToggle>\n              )}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selected={filter}\n            >\n              <SelectList>\n                <SelectOption\n                  data-testid=\"all-results-option\"\n                  value={ResultsFilter.All}\n                >\n                  {t(\"allResults\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-permit-option\"\n                  value={ResultsFilter.StatusPermitted}\n                >\n                  {t(\"resultPermit\")}\n                </SelectOption>\n                <SelectOption\n                  data-testid=\"result-deny-option\"\n                  value={ResultsFilter.StatusDenied}\n                >\n                  {t(\"resultDeny\")}\n                </SelectOption>\n              </SelectList>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <Table aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th aria-hidden=\"true\" />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </Table>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <Form>\n        <FixedButtonsGroup name=\"authorization\">\n          <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n            {t(\"back\")}\n          </Button>{\" \"}\n          <Button\n            data-testid=\"authorization-reevaluate\"\n            id=\"reevaluate-btn\"\n            variant=\"secondary\"\n            onClick={refresh}\n          >\n            {t(\"reevaluate\")}\n          </Button>{\" \"}\n          <AuthorizationDataModal data={evaluateResult.rpt!} />\n        </FixedButtonsGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  TextControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Panel,\n  PanelHeader,\n  PanelMainBody,\n  Switch,\n  Title,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport {\n  KeyValueType,\n  keyValueToArray,\n} from \"../../components/key-value-form/key-value-convert\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\nimport { Results } from \"./evaluate/Results\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = (props: Props) => {\n  const { hasAccess } = useAccess();\n\n  if (!hasAccess(\"view-users\")) {\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n  }\n\n  return <AuthorizationEvaluateContent {...props} />;\n};\n\nconst AuthorizationEvaluateContent = ({ client }: Props) => {\n  const { adminClient } = useAdminClient();\n\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    reset,\n    trigger,\n    formState: { isValid },\n  } = form;\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const realm = useRealm();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    [],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    [],\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = keyValueToArray(formValues.resources as KeyValueType[]);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user![0],\n      resources: resources\n        .filter((resource) => Object.keys(keys).includes(resource.name!))\n        .map((r) => ({\n          ...r,\n          scopes: r.scopes?.filter((s) =>\n            Object.values(keys)\n              .flatMap((v) => v)\n              .includes(s.name!),\n          ),\n        })),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      },\n    };\n\n    try {\n      const evaluation = await adminClient.clients.evaluateResource(\n        { id: client.id!, realm: realm.realm },\n        resEval,\n      );\n\n      setEvaluateResult(evaluation);\n    } catch (error) {\n      addError(\"evaluateError\", error);\n    }\n  };\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"identityInformation\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <ClientSelect\n                name=\"client\"\n                label=\"client\"\n                helpText={\"clientHelp\"}\n                defaultValue={client.clientId}\n              />\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"selectUser\")}\n                defaultValue={[]}\n                variant=\"typeahead\"\n                isRequired\n              />\n              <SelectControl\n                name=\"roleIds\"\n                label={t(\"roles\")}\n                labelIcon={t(\"rolesHelp\")}\n                variant=\"typeaheadMulti\"\n                placeholderText={t(\"selectARole\")}\n                controller={{\n                  defaultValue: [],\n                  rules: {\n                    required: true,\n                  },\n                }}\n                options={clientRoles.map((role) => role.name!)}\n              />\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"permissions\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <FormGroup\n                label={t(\"applyToResourceType\")}\n                fieldId=\"applyToResourceType\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"applyToResourceTypeHelp\")}\n                    fieldLabelId=\"applyToResourceType\"\n                  />\n                }\n              >\n                <Switch\n                  id=\"applyToResource-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={applyToResourceType}\n                  onChange={(_event, val) => setApplyToResourceType(val)}\n                  aria-label={t(\"applyToResourceType\")}\n                />\n              </FormGroup>\n              {!applyToResourceType ? (\n                <FormGroup\n                  label={t(\"resourcesAndScopes\")}\n                  id=\"resourcesAndScopes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`resourcesAndScopes`}\n                    />\n                  }\n                  fieldId=\"resourcesAndScopes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={resources.map<AttributeType>((item) => ({\n                      name: item.name!,\n                      key: item._id!,\n                    }))}\n                    resources={resources}\n                    name=\"resources\"\n                  />\n                </FormGroup>\n              ) : (\n                <>\n                  <TextControl\n                    name=\"alias\"\n                    label={t(\"resourceType\")}\n                    labelIcon={t(\"resourceTypeHelp\")}\n                    rules={{ required: t(\"required\") }}\n                  />\n                  <SelectControl\n                    name=\"authScopes\"\n                    label={t(\"authScopes\")}\n                    labelIcon={t(\"scopesSelect\")}\n                    controller={{\n                      defaultValue: [],\n                    }}\n                    variant=\"typeaheadMulti\"\n                    options={scopes.map((s) => s.name!)}\n                  />\n                </>\n              )}\n              <ExpandableSection\n                toggleText={t(\"contextualInfo\")}\n                onToggle={() => setIsExpanded(!isExpanded)}\n                isExpanded={isExpanded}\n              >\n                <FormGroup\n                  label={t(\"contextualAttributes\")}\n                  id=\"contextualAttributes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`contextualAttributes`}\n                    />\n                  }\n                  fieldId=\"contextualAttributes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={defaultContextAttributes}\n                    name=\"context.attributes\"\n                  />\n                </FormGroup>\n              </ExpandableSection>\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-eval\"\n            id=\"authorization-eval\"\n            className=\"pf-v5-u-mr-md\"\n            isDisabled={!isValid}\n            onClick={() => evaluate()}\n          >\n            {t(\"evaluate\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-revert\"\n            id=\"authorization-revert\"\n            className=\"pf-v5-u-mr-md\"\n            variant=\"link\"\n            onClick={() => reset()}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  TextAreaControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nexport const AuthorizationExport = () => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    [],\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\",\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess\n        isHorizontal\n        role=\"manage-authorization\"\n        className=\"pf-v5-u-mt-lg\"\n      >\n        <TextAreaControl\n          name=\"authDetails\"\n          label={t(\"authDetails\")}\n          labelIcon={t(\"authDetailsHelp\")}\n          resizeOrientation=\"vertical\"\n          defaultValue={code!}\n          readOnly\n          rows={10}\n        />\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(\"copyError\", error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation();\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-v5-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n  EmptyStateHeader,\n  EmptyStateFooter,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-v5-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"lg\">\n      <EmptyStateHeader\n        titleText={<>{t(\"emptyPermissions\")}</>}\n        icon={<EmptyStateIcon icon={PlusCircleIcon} />}\n        headingLevel=\"h1\"\n      />\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <EmptyStateFooter>\n        <TooltipEmptyButton\n          permissionType=\"resource\"\n          disabled={isResourceEnabled}\n          clientId={clientId}\n        />\n        <br />\n        <TooltipEmptyButton\n          permissionType=\"scope\"\n          disabled={isScopeEnabled}\n          clientId={clientId}\n        />\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation();\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return <Label color=\"blue\">{t(\"more\", { count: array.length - 1 })}</Label>;\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { SelectControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  Form,\n  MenuToggle,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  type: \"resource\" | \"policy\" | \"permission\";\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  type,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const form = useForm<SearchForm>({ mode: \"onChange\" });\n  const {\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const [open, toggle] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  return (\n    <Dropdown\n      onOpenChange={toggle}\n      toggle={(ref) => (\n        <MenuToggle\n          data-testid=\"searchdropdown_dorpdown\"\n          ref={ref}\n          onClick={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {type === \"resource\" && t(\"searchClientAuthorizationResource\")}\n          {type === \"policy\" && t(\"searchClientAuthorizationPolicy\")}\n          {type === \"permission\" && t(\"searchClientAuthorizationPermission\")}\n        </MenuToggle>\n      )}\n      isOpen={open}\n    >\n      <FormProvider {...form}>\n        <Form\n          isHorizontal\n          className=\"keycloak__client_authentication__searchdropdown_form\"\n          onSubmit={handleSubmit(submit)}\n        >\n          <TextControl name=\"name\" label={t(\"name\")} />\n          {type === \"resource\" && (\n            <>\n              <TextControl name=\"type\" label={t(\"type\")} />\n              <TextControl name=\"uris\" label={t(\"uris\")} />\n              <TextControl name=\"owner\" label={t(\"owner\")} />\n            </>\n          )}\n          {type !== \"resource\" && type !== \"policy\" && (\n            <TextControl name=\"resource\" label={t(\"resource\")} />\n          )}\n          {type !== \"policy\" && <TextControl name=\"scope\" label={t(\"scope\")} />}\n          {type !== \"resource\" && (\n            <SelectControl\n              name=\"type\"\n              label={t(\"type\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={[\n                { key: \"\", value: t(\"allTypes\") },\n                ...(types || []).map(({ type, name }) => ({\n                  key: type!,\n                  value: name!,\n                })),\n              ]}\n            />\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"search-btn\"\n              isDisabled={!isDirty}\n            >\n              {t(\"search\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              data-testid=\"revert-btn\"\n              onClick={() => onSearch({})}\n            >\n              {t(\"clear\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </FormProvider>\n    </Dropdown>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst AssociatedPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.associatedPolicies?.[0]?.name || \"—\"}{\" \"}\n      <MoreLabel array={row.associatedPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPermissions = ({\n  clientId,\n  isDisabled = false,\n}: PermissionsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        }),\n      );\n    },\n    setPermissions,\n    [key, search, first, max],\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\",\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    [],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"permission\"\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  onOpenChange={toggleCreate}\n                  toggle={(ref) => (\n                    <MenuToggle\n                      ref={ref}\n                      onClick={toggleCreate}\n                      isDisabled={isDisabled}\n                      variant=\"primary\"\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </MenuToggle>\n                  )}\n                  isOpen={createOpen}\n                >\n                  <DropdownList>\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      isDisabled={isDisabled || disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>\n                    <Divider />\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      isDisabled={isDisabled || disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-v5-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>\n                  </DropdownList>\n                </Dropdown>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"description\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p,\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description || \"—\"}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={!isDisabled && disabledCreate?.resources}\n          isScopeEnabled={!isDisabled && disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype PoliciesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst DependentPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.dependentPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.dependentPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPolicies = ({\n  clientId,\n  isDisabled = false,\n}: PoliciesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              component=\"p\"\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-v5-u-pt-lg\"\n            >\n              <p className=\"pf-v5-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-v5-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                    type=\"policy\"\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"createPolicy\"\n                    onClick={toggleDialog}\n                    isDisabled={isDisabled}\n                  >\n                    {t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <Table aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th aria-hidden=\"true\" />\n                    <Th>{t(\"name\")}</Th>\n                    <Th>{t(\"type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"description\")}</Th>\n                    <Th aria-hidden=\"true\" />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy,\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: policy.type!,\n                            policyId: policy.id!,\n                          })}\n                        >\n                          {policy.name}\n                        </Link>\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      {!isDisabled && (\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: () => {\n                                  setSelectedPolicy(policy);\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      )}\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={3 + (isDisabled ? 0 : 1)}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </Table>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\",\n              )}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={t(\"emptyPoliciesInstructions\")}\n            isDisabled={isDisabled}\n            primaryActionText={t(\"createPolicy\")}\n            onPrimaryAction={toggleDialog}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { DescriptionList } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    [],\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  TableText,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { DetailCell } from \"./DetailCell\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nconst UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n  <TableText wrapModifier=\"truncate\">\n    {row.uris?.[0]} <MoreLabel array={row.uris} />\n  </TableText>\n);\n\nexport const AuthorizationResources = ({\n  clientId,\n  isDisabled = false,\n}: ResourcesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false })),\n      ),\n    [key, search, first, max],\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-v5-u-pt-lg\"\n          >\n            <p className=\"pf-v5-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-v5-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  type=\"resource\"\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  isDisabled={isDisabled}\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  {!isDisabled && (\n                    <>\n                      <Th aria-hidden=\"true\" />\n                      <Th aria-hidden=\"true\" />\n                    </>\n                  )}\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource,\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <TableText wrapModifier=\"truncate\">\n                        <Link\n                          to={toResourceDetails({\n                            realm,\n                            id: clientId,\n                            resourceId: resource._id!,\n                          })}\n                        >\n                          {resource.name}\n                        </Link>\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.displayName}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.type}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <TableText wrapModifier=\"truncate\">\n                        {resource.owner?.name}\n                      </TableText>\n                    </Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    {!isDisabled && (\n                      <>\n                        <Td width={10}>\n                          <Button\n                            variant=\"link\"\n                            component={(props) => (\n                              <Link\n                                {...props}\n                                to={toNewPermission({\n                                  realm,\n                                  id: clientId,\n                                  permissionType: \"resource\",\n                                  selectedId: resource._id,\n                                })}\n                              />\n                            )}\n                          >\n                            {t(\"createPermission\")}\n                          </Button>\n                        </Td>\n                        <Td\n                          actions={{\n                            items: [\n                              {\n                                title: t(\"delete\"),\n                                onClick: async () => {\n                                  setSelectedResource(resource);\n                                  setPermission(\n                                    await fetchPermissions(resource._id!),\n                                  );\n                                  toggleDeleteDialog();\n                                },\n                              },\n                            ],\n                          }}\n                        />\n                      </>\n                    )}\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          isDisabled={isDisabled}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  ListEmptyState,\n  PaginatingTableToolbar,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype ScopesProps = {\n  clientId: string;\n  isDisabled?: boolean;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({\n  clientId,\n  isDisabled = false,\n}: ScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      return adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes.map((s) => ({ ...s, isLoaded: false })));\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max],\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return Promise.all(\n        newlyOpened.map(async (scope) => {\n          const [resources, permissions] = await Promise.all([\n            adminClient.clients.listAllResourcesByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n            adminClient.clients.listAllPermissionsByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n          ]);\n\n          return {\n            ...scope,\n            resources,\n            permissions,\n            isLoaded: true,\n          };\n        }),\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id,\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed],\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <Table aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>{scope.displayName}</Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && scope.isLoaded ? (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        ) : (\n                          <KeycloakSpinner />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </Table>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          isDisabled={isDisabled}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          isDisabled={isDisabled}\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation();\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-v5-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"policyEnforcementModeHelp\")}\n                  fieldLabelId=\"policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`,\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"decisionStrategyHelp\")}\n                  fieldLabelId=\"decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-v5-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-v5-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-v5-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-v5-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { HelpItem, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\nimport { ImportDialog } from \"./ImportDialog\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const isDisabled = !hasAccess(\"manage-authorization\");\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    [],\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource,\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"manage-authorization\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem helpText={t(\"importHelp\")} fieldLabelId=\"import\" />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"policyEnforcementModeHelp\")}\n              fieldLabelId=\"policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    isDisabled={isDisabled}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-v5-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n          <DefaultSwitchControl\n            name=\"allowRemoteResourceManagement\"\n            label={t(\"allowRemoteResourceManagement\")}\n            labelIcon={t(\"allowRemoteResourceManagementHelp\")}\n          />\n        </FormProvider>\n        <FixedButtonsGroup\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isSubmit\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  InputGroupItem,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { PasswordInput } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { CopyToClipboardButton } from \"../../components/copy-to-clipboard-button/CopyToClipboardButton\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = ClientSecretProps & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({\n  id,\n  buttonLabel,\n  client,\n  secret,\n  toggle,\n}: SecretInputProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<ClientRepresentation>();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <InputGroupItem isFill>\n            <PasswordInput id={id} value={secret} readOnly />\n          </InputGroupItem>\n          <InputGroupItem>\n            <CopyToClipboardButton\n              id={id}\n              text={secret}\n              label=\"clientSecret\"\n              variant=\"control\"\n            />\n          </InputGroupItem>\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty || !isManager}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-v5-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"],\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"invalidateRotatedSecret\",\n    messageKey: \"invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (secretRotated !== client.attributes?.[\"client.secret.rotated\"]) {\n      setSecretRotated(client.attributes?.[\"client.secret.rotated\"]);\n    }\n  }, [client, secretRotated]);\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-v5-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          client={client}\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            client={client}\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype SignedJWTProps = {\n  clientAuthenticatorType: string;\n};\n\nexport const SignedJWT = ({ clientAuthenticatorType }: SignedJWTProps) => {\n  const { cryptoInfo } = useServerInfo();\n  const providers =\n    clientAuthenticatorType === \"client-jwt\"\n      ? (cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? [])\n      : (cryptoInfo?.clientSignatureSymmetricAlgorithms ?? []);\n\n  const { t } = useTranslation();\n\n  return (\n    <SelectControl\n      name={convertAttributeNameToForm<FormFields>(\n        \"attributes.token.endpoint.auth.signing.alg\",\n      )}\n      label={t(\"signatureAlgorithm\")}\n      labelIcon={t(\"signatureAlgorithmHelp\")}\n      controller={{\n        defaultValue: \"\",\n      }}\n      isScrollable\n      maxMenuHeight=\"200px\"\n      options={[\n        { key: \"\", value: t(\"anyAlgorithm\") },\n        ...providers.map((option) => ({ key: option, value: option })),\n      ]}\n    />\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"@keycloak/keycloak-ui-shared\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <DefaultSwitchControl\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.x509.allow.regex.pattern.comparison\",\n        )}\n        label={t(\"allowRegexComparison\")}\n        labelIcon={t(\"allowRegexComparisonHelp\")}\n      />\n      <TextControl\n        name={convertAttributeNameToForm(\"attributes.x509.subjectdn\")}\n        label={t(\"subject\")}\n        labelIcon={t(\"subjectHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  HelpItem,\n  SelectControl,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  Form,\n  FormGroup,\n  PageSection,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n\n  const selectedProvider = providers.find(\n    (provider) => provider.id === clientAuthenticatorType,\n  );\n\n  const { componentTypes } = useServerInfo();\n  const providerProperties = useMemo(\n    () =>\n      componentTypes?.[\"org.keycloak.authentication.ClientAuthenticator\"]?.find(\n        (p) => p.id === clientAuthenticatorType,\n      )?.properties,\n    [clientAuthenticatorType, componentTypes],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    [],\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string,\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\",\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"confirmClientSecretTitle\",\n    messageKey: \"confirmClientSecretBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\",\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"confirmAccessTokenTitle\",\n    messageKey: \"confirmAccessTokenBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-v5-u-mt-md\"\n        role=\"manage-clients\"\n        fineGrainedAccess={client.access?.configure}\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <SelectControl\n              name=\"clientAuthenticatorType\"\n              label={t(\"clientAuthenticator\")}\n              labelIcon={t(\"clientAuthenticatorTypeHelp\")}\n              controller={{\n                defaultValue: \"\",\n              }}\n              options={providers.map(({ id, displayName }) => ({\n                key: id!,\n                value: displayName || id!,\n              }))}\n            />\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && (\n              <SignedJWT clientAuthenticatorType={clientAuthenticatorType} />\n            )}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <FormGroup>\n                <Alert variant=\"info\" isInline title={t(\"signedJWTConfirm\")} />\n              </FormGroup>\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            {providerProperties && (\n              <Form>\n                <DynamicComponents properties={providerProperties} />\n              </Form>\n            )}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {selectedProvider?.supportsSecret && (\n            <>\n              <Divider />\n              <CardBody>\n                <ClientSecret\n                  client={client}\n                  secret={secret}\n                  toggle={toggleClientSecretConfirm}\n                />\n              </CardBody>\n            </>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"registrationAccessTokenHelp\")}\n                  fieldLabelId=\"registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { FormGroup, TextArea } from \"@patternfly/react-core\";\nimport { useId } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => {\n  const { t } = useTranslation();\n  return (\n    <TextArea\n      readOnly\n      rows={5}\n      id={id}\n      data-testid=\"certificate\"\n      value={keyInfo?.certificate}\n      aria-label={t(\"certificate\")}\n    />\n  );\n};\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation();\n  const id = useId();\n\n  return plain ? (\n    <CertificateDisplay id={id} keyInfo={keyInfo} />\n  ) : (\n    <FormGroup\n      label={t(\"certificate\")}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(\"certificateHelp\")} fieldLabelId={id} />}\n    >\n      <CertificateDisplay id={id} keyInfo={keyInfo} />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { PasswordControl, TextControl } from \"@keycloak/keycloak-ui-shared\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"keyAlias\"\n        label={t(\"keyAlias\")}\n        labelIcon={t(\"keyAliasHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n      {!hidePassword && (\n        <PasswordControl\n          name=\"keyPassword\"\n          label={t(\"keyPassword\")}\n          labelIcon={t(\"keyPasswordHelp\")}\n          rules={{\n            required: t(\"required\"),\n          }}\n        />\n      )}\n      {isSaml && (\n        <TextControl\n          name=\"realmAlias\"\n          label={t(\"realmCertificateAlias\")}\n          labelIcon={t(\"realmCertificateAliasHelp\")}\n        />\n      )}\n      <PasswordControl\n        name=\"storePassword\"\n        label={t(\"storePassword\")}\n        labelIcon={t(\"storePasswordHelp\")}\n        rules={{\n          required: t(\"required\"),\n        }}\n      />\n    </>\n  );\n};\n","import type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem, SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { StoreSettings } from \"./StoreSettings\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation();\n\n  const [filename, setFilename] = useState<string>();\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? [CERT_PEM] : []),\n  ];\n\n  return (\n    <Form className=\"pf-v5-u-pt-lg\">\n      <SelectControl\n        name=\"format\"\n        label={t(\"archiveFormat\")}\n        labelIcon={t(\"archiveFormatHelp\")}\n        controller={{\n          defaultValue: supportedKeystoreTypes[0],\n        }}\n        menuAppendTo=\"parent\"\n        options={supportedKeystoreTypes}\n      />\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importFileHelp\")}\n              fieldLabelId=\"importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value}\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onTextChange={(value) => {\n                  field.onChange(value);\n                }}\n                onFileInputChange={(_, file) => setFilename(file.name)}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { SelectControl } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  Button,\n  ButtonVariant,\n  FileUpload,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { StoreSettings } from \"./StoreSettings\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ImportFile>();\n  const { control, handleSubmit } = form;\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-v5-u-pt-lg\">\n        <FormProvider {...form}>\n          <SelectControl\n            name=\"keystoreFormat\"\n            label={t(\"archiveFormat\")}\n            labelIcon={t(\"archiveFormatHelp\")}\n            controller={{\n              defaultValue: formats[0],\n            }}\n            options={formats}\n          />\n          {baseFormats.includes(format) && <StoreSettings hidePassword />}\n          <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n            <Controller\n              name=\"file\"\n              control={control}\n              defaultValue={{ filename: \"\" }}\n              render={({ field }) => (\n                <FileUpload\n                  id=\"importFile\"\n                  value={field.value.value}\n                  filename={field.value.filename}\n                  onTextChange={(value) =>\n                    field.onChange({ ...field.value, value })\n                  }\n                  onFileInputChange={(_, file) =>\n                    field.onChange({ ...field.value, filename: file.name })\n                  }\n                />\n              )}\n            />\n          </FormGroup>\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { TextControl, useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  PageSection,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({ clientId, save, hasConfigureAccess }: KeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key],\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n\n      for (const [key, value] of Object.entries(rest)) {\n        formData.append(key, value);\n      }\n\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData,\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <DefaultSwitchControl\n              name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n              label={t(\"useJwksUrl\")}\n              labelIcon={t(\"useJwksUrlHelp\")}\n              stringify\n            />\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <TextControl\n                name={convertAttributeNameToForm(\"attributes.jwks.url\")}\n                label={t(\"jwksUrl\")}\n                labelIcon={t(\"jwksUrlHelp\")}\n                type=\"url\"\n              />\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { KeyTypes } from \"./SamlKeys\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n  keyType: KeyTypes;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n  keyType,\n}: ExportSamlKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: keyType,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-v5-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"@keycloak/keycloak-ui-shared\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { Certificate } from \"./Certificate\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  adminClient: KeycloakAdminClient,\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  callback: (error?: unknown) => void,\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString(),\n      ),\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-label={t(\"enableClientSignatureRequiredModal\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"certificateHelp\")}\n                  fieldLabelId=\"certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { AlertVariant } from \"@patternfly/react-core\";\nimport { FormProvider, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const form = useFormContext<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(adminClient, form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"import\"\n      titleKey=\"importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport {\n  FormPanel,\n  HelpItem,\n  useAlerts,\n  useFetch,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog\n          keyType={attr}\n          clientId={clientId}\n          close={toggleImportDialog}\n        />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-v5-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem helpText={t(`${key}Help`)} fieldLabelId={key} />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(_event, value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr }),\n        ),\n      ),\n    (info) => setKeyInfo(info),\n    [refresh],\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"reGenerateSigning\",\n    messageKey: \"reGenerateSigningExplain\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { useAlerts } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownList,\n  MenuToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { EllipsisVIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\nimport {\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  nameFilter,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport {\n  AllClientScopeType,\n  AllClientScopes,\n  CellDropdown,\n  ClientScope,\n  addClientScope,\n  changeClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"@keycloak/keycloak-ui-shared\";\nimport { Action, KeycloakDataTable } from \"@keycloak/keycloak-ui-shared\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { translationFormatter } from \"../../utils/translationFormatter\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\ntype TypeSelectorProps = Row & {\n  clientId: string;\n  fineGrainedAccess?: boolean;\n  refresh: () => void;\n};\n\nconst TypeSelector = ({\n  clientId,\n  refresh,\n  fineGrainedAccess,\n  ...scope\n}: TypeSelectorProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const { hasAccess } = useAccess();\n\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  return (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            adminClient,\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope,\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none,\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n  const [kebabOpen, setKebabOpen] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n  const isViewer = hasAccess(\"view-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    let rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol),\n    );\n\n    rows = localeSort(rows, mapByKey(\"name\"));\n\n    if (isViewer) {\n      rows.unshift({\n        id: DEDICATED_ROW,\n        name: t(\"dedicatedScopeName\", { clientName }),\n        type: AllClientScopes.none,\n        description: t(\"dedicatedScopeDescription\"),\n      });\n    }\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n\n    return rows.filter(filter).slice(firstNum, firstNum + Number(max));\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          adminClient,\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope,\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(\n                      adminClient,\n                      clientId,\n                      scope.scope,\n                      scope.type!,\n                    ),\n                ),\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey={`clientScopeList-${key}`}\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            {isManager && (\n              <>\n                <DeleteConfirm />\n                <ToolbarItem>\n                  <Button onClick={() => setAddDialogOpen(true)}>\n                    {t(\"addClientScope\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <ChangeTypeDropdown\n                    clientId={clientId}\n                    selectedRows={selectedRows}\n                    refresh={refresh}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Dropdown\n                    onOpenChange={(isOpen) => setKebabOpen(isOpen)}\n                    toggle={(ref) => (\n                      <MenuToggle\n                        data-testid=\"kebab\"\n                        aria-label=\"Kebab toggle\"\n                        ref={ref}\n                        variant=\"plain\"\n                        onClick={() => setKebabOpen(!kebabOpen)}\n                        isExpanded={kebabOpen}\n                      >\n                        <EllipsisVIcon />\n                      </MenuToggle>\n                    )}\n                    isOpen={kebabOpen}\n                  >\n                    <DropdownList>\n                      <DropdownItem\n                        key=\"deleteAll\"\n                        isDisabled={selectedRows.length === 0}\n                        onClick={async () => {\n                          try {\n                            await Promise.all(\n                              selectedRows.map((row) =>\n                                removeClientScope(\n                                  adminClient,\n                                  clientId,\n                                  { ...row },\n                                  row.type as ClientScope,\n                                ),\n                              ),\n                            );\n\n                            setKebabOpen(false);\n                            setSelectedRows([]);\n                            addAlert(t(\"clientScopeRemoveSuccess\"));\n                            refresh();\n                          } catch (error) {\n                            addError(\"clientScopeRemoveError\", error);\n                          }\n                        }}\n                      >\n                        {t(\"remove\")}\n                      </DropdownItem>\n                    </DropdownList>\n                  </Dropdown>\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name!;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"assignedType\",\n            cellRenderer: (row) => (\n              <TypeSelector clientId={clientId} refresh={refresh} {...row} />\n            ),\n          },\n          { name: \"description\", cellFormatters: [translationFormatter(t)] },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                } as Action<Row>,\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyClientScopes\")}\n            instructions={t(\"emptyClientScopesInstructions\")}\n            primaryActionText={t(\"emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateHeader,\n  TextArea,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { CopyToClipboardButton } from \"../../components/copy-to-clipboard-button/CopyToClipboardButton\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation();\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <TextArea\n        id={`text-area-${label}`}\n        rows={20}\n        value={text}\n        aria-label={label}\n      />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"lg\" id={label}>\n      <EmptyStateHeader titleText={<>{t(`${label}No`)}</>} headingLevel=\"h2\" />\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  HelpItem,\n  KeycloakDataTable,\n  KeycloakSelect,\n  SelectVariant,\n  useFetch,\n  useHelp,\n} from \"@keycloak/keycloak-ui-shared\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  SelectOption,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\n\nimport \"./evaluate.css\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"effectiveProtocolMappers\"\n      searchPlaceholderKey=\"searchForProtocol\"\n      data-testid=\"effective-protocol-mappers\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"searchForRole\"\n      data-testid=\"effective-role-scope-mappings\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const { adminClient } = useAdminClient();\n\n  const prefix = \"openid\";\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    [],\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n\n  const { hasAccess } = useAccess();\n  const hasViewUsers = hasAccess(\"view-users\");\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    [],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.find(\n          (type) => type.id === mapper.protocolMapper,\n        )!;\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected],\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"scopeParameterHelp\")}\n                fieldLabelId=\"scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <KeycloakSelect\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name}>\n                      {option.name}\n                    </SelectOption>\n                  ))}\n                </KeycloakSelect>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          {hasViewUsers && (\n            <FormProvider {...form}>\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"userHelp\")}\n                defaultValue=\"\"\n                variant={SelectVariant.typeahead}\n                isRequired\n              />\n            </FormProvider>\n          )}\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              data-testid=\"effective-protocol-mappers-tab\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveProtocolMappers\"\n                    helpText={t(\"effectiveProtocolMappersHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              data-testid=\"effective-role-scope-mappings-tab\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveRoleScopeMappings\"\n                    helpText={t(\"effectiveRoleScopeMappingsHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              data-testid=\"generated-access-token-tab\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedAccessToken\"\n                    helpText={t(\"generatedAccessTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              data-testid=\"generated-id-token-tab\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedIdToken\"\n                    helpText={t(\"generatedIdTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              data-testid=\"generated-user-info-tab\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedUserInfo\"\n                    helpText={t(\"generatedUserInfoHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useAdminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUser } from \"../../user/routes/User\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    [],\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-v5-u-pb-0\">\n        <InfoCircleIcon className=\"pf-v5-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-v5-u-pl-sm\">\n          <Trans i18nKey=\"manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { useAlerts, useFetch } from \"@keycloak/keycloak-ui-shared\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAdminClient } from \"../admin-client\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"@keycloak/keycloak-ui-shared\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toClients } from \"./routes/Clients\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\nimport { UserEvents } from \"../events/UserEvents\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation();\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmClientTitle\",\n    messageKey: \"disableConfirmClient\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\",\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { adminClient } = useAdminClient();\n\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm, realmRepresentation } = useRealm();\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const hasManageAuthorization = hasAccess(\"manage-authorization\");\n  const hasViewAuthorization = hasAccess(\"view-authorization\");\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewClients = hasAccess(\"view-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n  const permissionsEnabled =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) &&\n    (hasManageAuthorization || hasViewAuthorization);\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const tab = (tab: ClientTab) =>\n    toClient({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const settingsTab = useRoutableTab(tab(\"settings\"));\n  const keysTab = useRoutableTab(tab(\"keys\"));\n  const credentialsTab = useRoutableTab(tab(\"credentials\"));\n  const rolesTab = useRoutableTab(tab(\"roles\"));\n  const clientScopesTab = useRoutableTab(tab(\"clientScopes\"));\n  const authorizationTab = useRoutableTab(tab(\"authorization\"));\n  const serviceAccountTab = useRoutableTab(tab(\"serviceAccount\"));\n  const sessionsTab = useRoutableTab(tab(\"sessions\"));\n  const permissionsTab = useRoutableTab(tab(\"permissions\"));\n  const advancedTab = useRoutableTab(tab(\"advanced\"));\n  const userEventsTab = useRoutableTab(tab(\"user-events\"));\n\n  const clientScopesTabRoute = (tab: ClientScopesTab) =>\n    toClientScopesTab({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const clientScopesSetupTab = useRoutableTab(clientScopesTabRoute(\"setup\"));\n  const clientScopesEvaluateTab = useRoutableTab(\n    clientScopesTabRoute(\"evaluate\"),\n  );\n\n  const authorizationTabRoute = (tab: AuthorizationTab) =>\n    toAuthorizationTab({\n      realm,\n      clientId,\n      tab,\n    });\n\n  const authorizationSettingsTab = useRoutableTab(\n    authorizationTabRoute(\"settings\"),\n  );\n  const authorizationResourcesTab = useRoutableTab(\n    authorizationTabRoute(\"resources\"),\n  );\n  const authorizationScopesTab = useRoutableTab(\n    authorizationTabRoute(\"scopes\"),\n  );\n  const authorizationPoliciesTab = useRoutableTab(\n    authorizationTabRoute(\"policies\"),\n  );\n  const authorizationPermissionsTab = useRoutableTab(\n    authorizationTabRoute(\"permissions\"),\n  );\n  const authorizationEvaluateTab = useRoutableTab(\n    authorizationTabRoute(\"evaluate\"),\n  );\n  const authorizationExportTab = useRoutableTab(\n    authorizationTabRoute(\"export\"),\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clientDeleteConfirmTitle\",\n    messageKey: \"clientDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    form.reset({ ...client });\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value }),\n        ),\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key],\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    },\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"yes\"\n        cancelButtonLabel=\"no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-v5-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs\n            data-testid=\"client-tabs\"\n            aria-label=\"client-tabs\"\n            isBox\n            mountOnEnter\n          >\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasViewClients ||\n                client.access?.configure ||\n                client.access?.view) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={() => setKey(key + 1)}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"client\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                >\n                  <Tab\n                    id=\"setup\"\n                    data-testid=\"clientScopesSetupTab\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    data-testid=\"clientScopesEvaluateTab\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled &&\n              (hasManageAuthorization || hasViewAuthorization) && (\n                <Tab\n                  id=\"authorization\"\n                  data-testid=\"authorizationTab\"\n                  title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                  {...authorizationTab}\n                >\n                  <RoutableTabs\n                    mountOnEnter\n                    unmountOnExit\n                    defaultLocation={toAuthorizationTab({\n                      realm,\n                      clientId,\n                      tab: \"settings\",\n                    })}\n                  >\n                    <Tab\n                      id=\"settings\"\n                      data-testid=\"authorizationSettings\"\n                      title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                      {...authorizationSettingsTab}\n                    >\n                      <AuthorizationSettings clientId={clientId} />\n                    </Tab>\n                    <Tab\n                      id=\"resources\"\n                      data-testid=\"authorizationResources\"\n                      title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                      {...authorizationResourcesTab}\n                    >\n                      <AuthorizationResources\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"scopes\"\n                      data-testid=\"authorizationScopes\"\n                      title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                      {...authorizationScopesTab}\n                    >\n                      <AuthorizationScopes\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"policies\"\n                      data-testid=\"authorizationPolicies\"\n                      title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                      {...authorizationPoliciesTab}\n                    >\n                      <AuthorizationPolicies\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    <Tab\n                      id=\"permissions\"\n                      data-testid=\"authorizationPermissions\"\n                      title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                      {...authorizationPermissionsTab}\n                    >\n                      <AuthorizationPermissions\n                        clientId={clientId}\n                        isDisabled={!hasManageAuthorization}\n                      />\n                    </Tab>\n                    {hasViewUsers && (\n                      <Tab\n                        id=\"evaluate\"\n                        data-testid=\"authorizationEvaluate\"\n                        title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                        {...authorizationEvaluateTab}\n                      >\n                        <AuthorizationEvaluate client={client} save={save} />\n                      </Tab>\n                    )}\n                    {hasAccess(\"manage-authorization\") && (\n                      <Tab\n                        id=\"export\"\n                        data-testid=\"authorizationExport\"\n                        title={<TabTitleText>{t(\"export\")}</TabTitleText>}\n                        {...authorizationExportTab}\n                      >\n                        <AuthorizationExport />\n                      </Tab>\n                    )}\n                  </RoutableTabs>\n                </Tab>\n              )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n            {hasAccess(\"view-events\") && realmRepresentation?.eventsEnabled && (\n              <Tab\n                data-testid=\"user-events-tab\"\n                title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n                {...userEventsTab}\n              >\n                <UserEvents client={client.clientId} />\n              </Tab>\n            )}\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","React","css","CodeBlockAction","PanelHeader","TextListVariants","TextList","component","isPlain","Component","TextListItemVariants","TextListItem","DownloadDialog","id","open","toggleDialog","protocol","adminClient","useAdminClient","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","selected","setSelected","useState","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","config","sanitizeSnippet","useFetch","fetchWithError","addTrailingSlash","getAuthorizationHeaders","prettyPrintJSON","useEffect","jsx","ConfirmDialogModal","saveAs","ModalVariant","Form","jsxs","Stack","StackItem","FormGroup","HelpItem","Select","isOpen","ref","MenuToggle","_","value","SelectList","configFormat","SelectOption","TextArea","inherited","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","isDPoPEnabled","useIsFeatureEnabled","Feature","FormAccess","convertAttributeNameToForm","Fragment","DefaultSwitchControl","v","KeyValueInput","MultiLineInput","TextControl","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","filteredFlows","flow","sortBy","f","SelectControl","alias","TimeSelectorForm","useController","AddHostDialog","onAdded","onClose","form","useForm","handleSubmit","isDirty","isValid","addAlert","addError","useAlerts","onSubmit","node","AlertVariant","error","Modal","ButtonVariant","FormProvider","ClusteringPanel","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","testCluster","result","parseResult","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","object","ExpandableSection","_event","val","KeycloakDataTable","entry","ToolbarItem","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","FineGrainOpenIdConnect","providers","clientSignatureProviders","contentEncryptionProviders","cekManagementProviders","signatureProviders","convert","list","sortProviders","i","prependEmpty","prependAny","prependNone","p","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","Switch","prefixKey","successCount","failedCount","AdvancedTab","client","openIdConnect","setValue","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","Text","toUpperCase","ClientSessions","SessionsTable","first","max","mapSessionsToType","type","sessions","session","AccessSettings","watch","hasAccess","useAccess","isManager","LoginSettings","FixedButtonsGroup","LoginSettingsPanel","loginThemes","consentRequired","displayOnConsentScreen","TextAreaControl","validateUrl","uri","LogoutPanel","frontchannelLogout","frontchannelLogoutTooltip","Toggle","label","SamlConfig","SIGNATURE_ALGORITHMS","KEYNAME_TRANSFORMER","CANONICALIZATION","SamlSignature","signDocs","signAssertion","ClientSettings","ClientDescription","CapabilityConfig","ValueInput","rowIndex","attribute","selectableValues","resources","register","getValues","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","values","defaultContextAttributes","attr","renderSelectOptionType","scopeValues","resource","scope","getMessageBundleKey","attributeName","camelCase","Td","KeycloakSelect","SelectVariant","TextInput","KeyBasedAttributeInput","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","watchLastValue","Table","Thead","Tr","Th","Tbody","MinusCircleIcon","PlusCircleIcon","AuthorizationDataModal","data","show","toggle","useToggle","TextContent","TextVariants","AuthorizationEvaluateResourcePolicies","idx","outerPolicy","clientId","useParams","prev","Link","toPermissionDetails","DecisionEffect","ExpandableRowContent","DescriptionList","item","toPolicyDetails","capitalize","AuthorizationEvaluateResource","evaluateResults","filterResults","results","filter","status","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","InputGroup","InputGroupItem","SearchIcon","Divider","AuthorizationEvaluate","AuthorizationEvaluateContent","ForbiddenSection","trigger","isExpanded","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","scopes","setScopes","setEvaluateResult","clientRoles","setClientRoles","roles","evaluate","formValues","keys","keyValueToArray","resEval","r","s","evaluation","Panel","Title","PanelMainBody","ClientSelect","UserSelect","role","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","authDetails","exportAuthDetails","KeycloakSpinner","DetailDescription","DetailDescriptionLink","array","link","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","EmptyButton","permissionType","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","Tooltip","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateHeader","EmptyStateIcon","EmptyStateBody","EmptyStateFooter","MoreLabel","Label","SearchDropdown","types","search","onSearch","submit","Dropdown","AssociatedPoliciesRenderer","row","AuthorizationPermissions","isDisabled","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","setMax","setFirst","permission","associatedPolicies","params","policies","toggleDeleteDialog","DeleteConfirm","noData","searching","PaginatingTableToolbar","DropdownList","DropdownItem","Alert","rows","index","DependentPoliciesRenderer","AuthorizationPolicies","setPolicies","selectedPolicy","setSelectedPolicy","newDialog","policy","dependentPolicies","NewPolicyDialog","toCreatePolicy","DetailCell","uris","setScope","toScopeDetails","UriRenderer","TableText","AuthorizationResources","selectedResource","setSelectedResource","setPermission","fetchPermissions","toCreateResource","toResourceDetails","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","getScope","c","newlyOpened","resourcesScopes","resourceScope","DeleteScopeDialog","toNewScope","ImportDialog","onConfirm","closeDialog","imported","setImported","JsonFileUpload","Radio","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","importResource","mode","DecisionStrategySelect","SecretInput","buttonLabel","secret","PasswordInput","CopyToClipboardButton","ExpireDateFormatter","time","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","SignedJWT","clientAuthenticatorType","cryptoInfo","option","X509","Credentials","setProviders","useWatch","setSecret","accessToken","setAccessToken","selectedProvider","provider","componentTypes","providerProperties","regenerate","call","message","regenerateClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","regenerateAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","displayName","DynamicComponents","ClipboardCopy","CertificateDisplay","keyInfo","Certificate","plain","useId","StoreSettings","hidePassword","isSaml","PasswordControl","CERT_PEM","extensions","getFileExtension","format","KeyForm","hasPem","useFile","filename","setFilename","supportedKeystoreTypes","FileUpload","file","GenerateKeyDialog","ImportKeyDialog","baseFormats","formats","importFile","Keys","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","info","generate","keyStore","importKey","formData","rest","CardHeader","CardTitle","ExportSamlKeyDialog","close","keyType","download","submitForm","callback","SamlKeysDialog","onCancel","setType","setKeys","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","title","showImportDialog","section","FormPanel","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","TypeSelector","fineGrainedAccess","isDedicatedRow","CellDropdown","changeClientScope","ClientScopes","clientName","localeSort","useLocaleSort","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","kebabOpen","setKebabOpen","isViewer","loader","defaultClientScopes","optionalClientScopes","clientScopes","find","clientScope","optional","ClientScope","defaultScopes","mapByKey","nameFilter","typeFilter","firstNum","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","ChangeTypeDropdown","EllipsisVIcon","toDedicatedScope","translationFormatter","GeneratedCodeTab","text","user","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","useRef","tabContent2","tabContent3","tabContent4","tabContent5","hasViewUsers","mapperList","mapper","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","assignRoles","realmRoles","InfoCircleIcon","Trans","toUser","RoleMapping","ClientDetailHeader","onChange","toggleDownloadDialog","badges","protocolName","getProtocolName","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","realmRepresentation","isFeatureEnabled","hasManageAuthorization","hasViewAuthorization","hasViewClients","permissionsEnabled","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","setClient","tab","toClient","settingsTab","useRoutableTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","userEventsTab","clientScopesTabRoute","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","authorizationTabRoute","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","toClients","setupForm","fetchedClient","cloneDeep","confirmed","messageKey","convertFormValuesToObject","submittedClient","newClient","RoutableTabs","RolesList","toCreateRole","roleId","toClientRole","PermissionsTab","UserEvents"],"mappings":"64HACA,MAAeA,GAAA,CACb,UAAa,qBACb,iBAAoB,8BACpB,cAAiB,2BACjB,iBAAoB,8BACpB,gBAAmB,6BACnB,aAAgB,yBAClB,ECJaC,GAAaC,GAAO,CAC7B,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAW,QAAAC,EAAU,IAAI,EAAKH,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,SAAS,CAAC,EAChH,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAIT,GAAO,UAAWI,CAAS,CAAC,EAAIE,CAAK,EACnGD,GAAYG,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,eAAe,CAAG,EAC7EQ,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,gBAAgB,CAAC,EAAIK,CAAO,CAAC,EACpFG,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,gBAAgB,GAAKG,CAAQ,CAAC,CACzF,EACAF,GAAU,YAAc,YCPjB,MAAMS,GAAmBR,GAAO,CACnC,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,CAAW,EAAGF,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,WAAW,CAAC,EACrF,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAI,GAAGT,GAAO,gBAAgB,QAASI,CAAS,GAAKE,CAAK,EAAGH,CAAQ,CACvI,EACAO,GAAgB,YAAc,kBCJvB,MAAMC,GAAeT,GAAO,CAC/B,GAAI,CAAE,UAAAE,EAAW,SAAAD,CAAU,EAAGD,EAAII,EAAQC,GAAOL,EAAI,CAAC,YAAa,UAAU,CAAC,EAC9E,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAIT,GAAO,YAAaI,CAAS,CAAG,EAAEE,CAAK,EAAGH,CAAQ,CACxH,EACAQ,GAAY,YAAc,cCJnB,IAAIC,IACV,SAAUA,EAAkB,CACzBA,EAAiB,GAAQ,KACzBA,EAAiB,GAAQ,KACzBA,EAAiB,GAAQ,IAC7B,GAAGA,KAAqBA,GAAmB,CAAA,EAAG,EACvC,MAAMC,GAAYX,GAAO,CAC5B,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAY,GAAI,UAAAU,EAAYF,GAAiB,GAAI,QAAAG,EAAU,EAAO,EAAGb,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,YAAa,SAAS,CAAC,EACpK,MAAMc,EAAYF,EAClB,OAAQN,GAAM,cAAcQ,EAAW,OAAO,OAAO,CAAA,EAAIV,EAAO,CAAE,UAAWG,GAAIM,GAAWf,GAAO,UAAU,MAAOI,CAAS,CAAC,CAAE,EAAGD,CAAQ,CAC/I,EACAU,GAAS,YAAc,WCZhB,IAAII,IACV,SAAUA,EAAsB,CAC7BA,EAAqB,GAAQ,KAC7BA,EAAqB,GAAQ,KAC7BA,EAAqB,GAAQ,IACjC,GAAGA,KAAyBA,GAAuB,CAAA,EAAG,EAC/C,MAAMC,GAAgBhB,GAAO,CAChC,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAY,GAAI,UAAAU,EAAYG,GAAqB,EAAE,EAAKf,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,WAAW,CAAC,EAC5I,MAAMc,EAAYF,EAClB,OAAQN,GAAM,cAAcQ,EAAW,OAAO,OAAO,CAAE,EAAEV,EAAO,CAAE,UAAWG,GAAIL,CAAS,CAAG,CAAA,EAAGD,CAAQ,CAC5G,EACAe,GAAa,YAAc,eCiBpB,MAAMC,GAAiB,CAAC,CAC7B,GAAAC,EACA,KAAAC,EACA,aAAAC,EACA,SAAAC,EAAW,gBACb,IAA2B,CACnB,KAAA,CAAE,YAAAC,CAAY,EAAIC,EAAe,EAEjC,CAAE,MAAAC,CAAM,EAAIC,GAAS,EACrB,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvB,CAAE,QAAAC,CAAQ,EAAIC,GAAQ,EAGtBC,EAFaC,GAAc,EAEA,oBAAqBV,CAAQ,EACxD,CAACW,EAAUC,CAAW,EAAIC,EAC9BJ,EAAcA,EAAc,OAAS,CAAC,EAAE,EAC1C,EACM,CAACK,EAASC,CAAU,EAAIF,EAA+B,EACvD,CAACG,EAAUC,CAAW,EAAIJ,EAAS,EAAK,EAExCK,EAAiBC,GACrB,IAAMV,EAAc,KAAMW,GAAWA,EAAO,KAAOT,CAAQ,GAAK,KAChE,CAACA,CAAQ,CACX,EAEMU,EAAmBP,GACvBA,EAAQ,QACN,uCACA,kBAAkBT,EAAE,gBAAgB,CAAC,kBACvC,EAEFiB,OAAAA,GACE,SAAY,CACN,GAAAJ,GAAgB,YAAc,kBAahC,OAZiB,MAAMK,GACrB,GAAGC,GACDvB,EAAY,OAAA,CACb,gBAAgBE,CAAK,YAAYN,CAAE,2BAA2Bc,CAAQ,GACvE,CACE,OAAQ,MACR,QAASc,GACP,MAAMxB,EAAY,eAAe,CAAA,CACnC,CAEJ,GAEgB,YAAY,EACvB,CACL,MAAMa,EAAU,MAAMb,EAAY,QAAQ,yBAAyB,CACjE,GAAAJ,EACA,WAAYc,CAAA,CACb,EACG,OAAA,OAAOG,GAAY,SACdO,EAAgBP,CAAO,EAEvBY,GAAgBZ,CAAO,CAChC,CAEJ,EACCA,GAAYC,EAAWD,CAAO,EAC/B,CAACjB,EAAIc,CAAQ,CACf,EAGAgB,GAAU,IAAMZ,EAAW,EAAE,EAAG,CAAClB,EAAIc,CAAQ,CAAC,EAG5CiB,EAACC,GAAA,CACC,SAAUxB,EAAE,sBAAsB,EAClC,oBAAqBA,EAAE,UAAU,EACjC,UAAW,IAAM,CACfyB,GAAA,OACE,IAAI,KAAK,CAAChB,CAAQ,EAAG,CAAE,KAAMI,GAAgB,UAAW,EACxDA,GAAgB,QAClB,CACF,EACA,KAAApB,EACA,aAAAC,EACA,QAASgC,GAAa,OAEtB,SAACH,EAAAI,GAAA,CACC,SAACC,EAAAC,GAAA,CAAM,UAAS,GACd,SAAA,CAAAN,EAACO,GACC,CAAA,SAAAP,EAACQ,EAAA,CACC,QAAQ,OACR,MAAO/B,EAAE,cAAc,EACvB,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,cAAc,EAC1B,aAAa,cAAA,CACf,EAGF,SAAAuB,EAACU,GAAA,CACC,OAAQtB,EACR,aAAeuB,GAAWtB,EAAYsB,CAAM,EAC5C,OAASC,GACPZ,EAACa,GAAA,CACC,GAAG,OACH,IAAAD,EACA,QAAS,IAAMvB,EAAY,CAACD,CAAQ,EACpC,WAAYA,EAEX,SAAAL,CAAA,CACH,EAEF,SAAAA,EACA,SAAU,CAAC+B,EAAGC,IAAU,CACV/B,EAAA+B,GAAO,SAAS,GAAK,EAAE,EACnC1B,EAAY,EAAK,CACnB,EACA,aAAYZ,EAAE,WAAW,EACzB,YAAa,CACX,SAAU,SAAS,IACrB,EAEA,SAACuB,EAAAgB,GAAA,CACE,SAAcnC,EAAA,IAAKoC,GAClBjB,EAACkB,GAAA,CAEC,MAAOD,EAAa,GACpB,WAAYlC,IAAakC,EAAa,GACtC,YAAatC,EAAUsC,EAAa,SAAW,OAE9C,SAAaA,EAAA,WAAA,EALTA,EAAa,EAAA,CAOrB,CACH,CAAA,CAAA,CAAA,CACF,CAAA,EAEJ,EACC,CAAC3B,GAAgB,cACfU,EAAAO,GAAA,CAAU,SAAQ,GACjB,SAAAP,EAACQ,EAAA,CACC,QAAQ,UACR,MAAO/B,EAAE,SAAS,EAClB,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,aAAa,EACzB,aAAa,SAAA,CACf,EAGF,SAAAuB,EAACmB,GAAA,CACC,GAAG,UACH,SAAQ,GACR,KAAM,GACN,kBAAkB,WAClB,MAAOjC,GAAW,OAAOA,GAAY,SAAWA,EAAU,GAC1D,aAAW,mBAAA,CAAA,CACb,CAAA,CAEJ,CAAA,CAAA,CAAA,CAEJ,CACF,CAAA,CAAA,CACF,CAEJ,ECnKMkC,GAAY,0BACZC,GAAU,wBAEHC,GAAgB,CAAC,CAC5B,GAAArD,EACA,KAAAsD,EACA,aAAAC,EACA,MAAAC,CACF,IAA0B,CAClB,KAAA,CAAE,EAAAhD,CAAE,EAAIC,EAAe,EACvB,CAACR,EAAMwD,CAAO,EAAIzC,EAAS,EAAK,EAEhC,CAAC0C,EAASC,CAAU,EAAI3C,EAAS,EAAK,EACtC4C,EAAU,IAAMD,EAAW,EAAI,EAC/BE,EAAS,IAAMF,EAAW,EAAK,EAE/B,CAAE,QAAAG,CAAQ,EAAIC,GAAe,EAC7BC,EAAelB,GACnB,OAAOA,GAAU,UAChB,OAAOA,GAAU,UAAYA,IAAU,IACxCY,EAGA,OAAA3B,EAACQ,EAAA,CACC,MAAO/B,EAAER,CAAE,EACX,QAASA,EACT,UAAY+B,EAAAS,EAAA,CAAS,SAAUhC,EAAE,GAAGR,CAAE,MAAM,EAAG,aAAcA,CAAI,CAAA,EACjE,cAAa,kBAAkBA,CAAE,GAEjC,SAAA+B,EAACkC,GAAA,CACC,KAAAX,EACA,aAAa,GACb,QAAAQ,EACA,OAAQ,CAAC,CAAE,MAAAI,KACR9B,EAAA+B,GAAA,CAAM,UAAS,GACd,SAAA,CAAApC,EAACqC,GACC,CAAA,SAAArC,EAACU,GAAA,CACC,OAASE,GACPZ,EAACa,GAAA,CACC,IAAAD,EACA,QAAS,IAAMc,EAAQ,CAACxD,CAAI,EAC5B,WAAYA,EAEX,SAAA+D,EAAYE,EAAM,KAAK,EAAI1D,EAAE4C,EAAO,EAAI5C,EAAE2C,EAAS,CAAA,CACtD,EAEF,OAAQlD,EACR,aAAeyC,GAAWe,EAAQf,CAAM,EACxC,SAAU,CAACG,EAAGC,IAAU,CACtBoB,EAAM,SAASpB,CAAK,EACpBW,EAAQ,EAAK,CACf,EACA,SAAUO,EAAYE,EAAM,KAAK,EAAI1D,EAAE4C,EAAO,EAAI5C,EAAE2C,EAAS,EAE7D,WAACJ,GACC,CAAA,SAAA,CAAAhB,EAACkB,GAAa,CAAA,MAAM,GAAI,SAAAzC,EAAE2C,EAAS,EAAE,IACpCF,GAAa,CAAA,MAAO,GAAK,SAAAzC,EAAE4C,EAAO,CAAE,CAAA,CAAA,CACvC,CAAA,CAAA,CAAA,EAEJ,IACCgB,GAAU,CAAA,OAAQ,CAACJ,EAAYE,EAAM,KAAK,EACzC,SAAAnC,EAACsC,GAAA,CACC,UACEL,EAAYE,EAAM,KAAK,GAAKA,EAAM,MAAS,EACvC,UACA,UAEN,MAAAV,EACA,MAAOU,EAAM,QAAU,GAAKX,EAAeW,EAAM,MACjD,SAAUA,EAAM,SAChB,QAAAN,EACA,OAAAC,EACA,IAAK,EACL,WAAY,CAACG,EAAYE,EAAM,KAAK,CAAA,CAAA,CAExC,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CAEJ,CACF,CAEJ,EC5EaI,GAAmB,CAAC,CAC/B,KAAAC,EACA,MAAAC,EACA,SAAArE,EACA,mBAAAsE,CACF,IAA6B,CACrB,KAAA,CAAE,EAAAjE,CAAE,EAAIC,EAAe,EACvB,CAACR,EAAMwD,CAAO,EAAIzC,EAAS,EAAK,EAEhC,CAAE,oBAAqBV,CAAM,EAAIC,GAAS,EAG1CmE,EADmBC,GAAoB,EACNC,GAAQ,IAAI,EAE7C,CAAE,QAAAd,CAAQ,EAAIC,GAAe,EAEjC,OAAA3B,EAACyC,GAAA,CACC,KAAK,eACL,kBAAmBJ,EACnB,aAAY,GAEX,SAAA,CAAAtE,IAAa,kBACZ4B,EAACQ,EAAA,CACC,MAAO/B,EAAE,mBAAmB,EAC5B,QAAQ,oBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,uBAAuB,EACnC,aAAa,mBAAA,CACf,EAGF,SAAAuB,EAACkC,GAAA,CACC,KAAMa,EACJ,oCACF,EACA,aAAa,GACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACsC,GAAA,CACC,MAAO,CAAC,SAAU,MAAO,MAAM,EAC/B,MAAOH,EAAM,MACb,SAAUA,EAAM,QAAA,CAAA,CAClB,CAAA,CAEJ,CACF,EAED/D,IAAa,kBAEViC,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACsB,GAAA,CACC,GAAG,sBACH,KAAMyB,EACJ,kCACF,EACA,aAAcxE,GAAO,oBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EACAyB,EAACsB,GAAA,CACC,GAAG,oBACH,KAAMyB,EACJ,wCACF,EACA,aAAcxE,GAAO,yBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EACAyB,EAACsB,GAAA,CACC,GAAG,mBACH,KAAMyB,EACJ,wCACF,EACA,aAAcxE,GAAO,yBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EACAyB,EAACsB,GAAA,CACC,GAAG,2BACH,KAAMyB,EACJ,gDACF,EACA,aAAcxE,GAAO,0BACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAECA,GAAO,kCACNyB,EAACsB,GAAA,CACC,GAAG,0BACH,KAAMyB,EACJ,gDACF,EACA,aACExE,GAAO,iCACHA,EAAM,0BACN,OAEN,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEFyB,EAACiD,GAAA,CACC,KAAMF,EACJ,uDACF,EACA,MAAOtE,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,EAC9B,UAAS,EAAA,CACX,EACCkE,GACC3C,EAACiD,GAAA,CACC,KAAMF,EACJ,qCACF,EACA,MAAOtE,EAAE,WAAW,EACpB,UAAWA,EAAE,eAAe,EAC5B,UAAS,EAAA,CACX,EAEFuB,EAACQ,EAAA,CACC,MAAO/B,EAAE,oBAAoB,EAC7B,QAAQ,qBACR,gBAAe,GACf,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,wBAAwB,EACpC,aAAa,oBAAA,CACf,EAGF,SAAAuB,EAACkC,GAAA,CACC,KAAMa,EACJ,uCACF,EACA,aAAa,GACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACU,GAAA,CACC,OAASE,GACPZ,EAACa,GAAA,CACC,GAAG,qBACH,IAAAD,EACA,QAAS,IAAMc,EAAQ,CAACxD,CAAI,EAC5B,WAAYA,EAEX,SAAC,CAAAiE,EAAM,OAAS1D,EAAE,QAAQ,CAAC,CAAA,CAC9B,EAEF,OAAQP,EACR,aAAeyC,GAAWe,EAAQf,CAAM,EACxC,SAAU,CAACG,EAAGC,IAAU,CACtBoB,EAAM,SAASpB,CAAK,EACpBW,EAAQ,EAAK,CACf,EACA,SAAUS,EAAM,MAEhB,SAAAnC,EAACgB,IACE,SAAC,CAAA,GAAI,OAAQ,OAAO,EAAE,IAAKkC,KACzBhC,GAAqB,CAAA,MAAOgC,EAC1B,SAAKA,GAAAzE,EAAE,QAAQ,CADC,EAAAyE,CAEnB,CACD,CACH,CAAA,CAAA,CAAA,CACF,CAAA,CAEJ,CACF,EACAlD,EAACiD,GAAA,CACC,KAAMF,EACJ,kDACF,EACA,MAAOtE,EAAE,oCAAoC,EAC7C,UAAWA,EAAE,wCAAwC,EACrD,UAAS,EAAA,CACX,EACAuB,EAACiD,GAAA,CACC,KAAMF,EACJ,wDACF,EACA,MAAOtE,EAAE,wBAAwB,EACjC,UAAWA,EAAE,4BAA4B,EACzC,UAAS,EAAA,CACX,EAEAuB,EAACiD,GAAA,CACC,KAAMF,EACJ,kEACF,EACA,MAAOtE,EAAE,wCAAwC,EACjD,UAAWA,EAAE,4CAA4C,EACzD,UAAS,EAAA,CACX,EACAuB,EAACQ,EAAA,CACC,MAAO/B,EAAE,iBAAiB,EAC1B,QAAQ,kBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,qBAAqB,EACjC,aAAa,iBAAA,CACf,EAGF,SAAAuB,EAACmD,GAAA,CACC,MAAO1E,EAAE,iBAAiB,EAC1B,KAAMsE,EAA2B,wBAAwB,CAAA,CAAA,CAC3D,CACF,EACA/C,EAACQ,EAAA,CACC,MAAO/B,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAuB,EAACoD,GAAA,CACC,GAAG,mBACH,aAAW,mBACX,KAAML,EAA2B,+BAA+B,EAChE,UAAS,EAAA,CAAA,CACX,CACF,EACA/C,EAACqD,EAAA,CACC,KAAK,OACL,KAAMN,EAA2B,8BAA8B,EAC/D,MAAOtE,EAAE,iBAAiB,EAC1B,UAAWA,EAAE,qBAAqB,CAAA,CAAA,CACpC,EACF,IAED6E,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,QAAQ,YACR,QAASf,EACT,cAAY,mBAEX,WAAE,MAAM,CAAA,CACX,EACAxC,EAACuD,EAAO,CAAA,QAAQ,OAAO,QAASd,EAAO,cAAY,qBAChD,SAAEhE,EAAA,QAAQ,CACb,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,ECjQa+E,GAA0B,CAAC,CACtC,SAAApF,EACA,KAAAoE,EACA,MAAAC,EACA,mBAAAC,CACF,IAAoC,CAC5B,KAAA,CAAE,YAAArE,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAC+E,EAAOC,CAAQ,EAAIzE,EAA6C,CAAA,CAAE,EAEzES,OAAAA,GACE,IAAMrB,EAAY,yBAAyB,SAAS,EACnDoF,GAAU,CACT,IAAIE,EAAgB,CAClB,GAAGF,EAAM,OAAQG,GAASA,EAAK,aAAe,aAAa,CAC7D,EACAD,EAAgBE,GAAOF,EAAe,CAAEG,GAAMA,EAAE,KAAK,CAAC,EACtDJ,EAASC,CAAa,CACxB,EACA,CAAA,CACF,EAGEtD,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBJ,EACnB,aAAY,GAEZ,SAAA,CAAA1C,EAAC+D,EAAA,CACC,KAAK,6CACL,MAAOtF,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,EAC9B,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,GAAI,MAAOA,EAAE,QAAQ,CAAE,EAC9B,GAAGgF,EAAM,IAAI,CAAC,CAAE,GAAAxF,EAAI,MAAA+F,MAAa,CAAE,IAAK/F,EAAK,MAAO+F,GAAS,CAAA,CAC/D,CACF,EACC5F,IAAa,kBACZ4B,EAAC+D,EAAA,CACC,KAAK,kDACL,MAAOtF,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,EAC9B,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,GAAI,MAAOA,EAAE,QAAQ,CAAE,EAC9B,GAAGgF,EAAM,IAAI,CAAC,CAAE,GAAAxF,EAAI,MAAA+F,MAAa,CAAE,IAAK/F,EAAK,MAAO+F,GAAS,CAAA,CAC/D,CACF,IAEDV,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,QAAQ,YACR,QAASf,EACT,cAAY,2BAEX,WAAE,MAAM,CAAA,CACX,EACAxC,EAACuD,EAAA,CACC,QAAQ,OACR,QAASd,EACT,cAAY,6BAEX,WAAE,QAAQ,CAAA,CAAA,CACb,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,EClFawB,GAAoB9G,GAAiC,CAChE,KAAM,CAAE,MAAAgF,CAAA,EAAU+B,GAAc/G,CAAK,EAErC,OAAQ6C,EAAAsC,GAAA,CAAc,GAAGnF,EAAQ,GAAGgF,CAAO,CAAA,CAC7C,ECaagC,GAAgB,CAAC,CAC5B,SAAUlG,EACV,OAAA0C,EACA,QAAAyD,EACA,QAAAC,CACF,IAA0B,CAClB,KAAA,CAAE,YAAAhG,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB4F,EAAOC,GAAoB,EAC3B,CACJ,aAAAC,EACA,UAAW,CAAE,QAAAC,EAAS,QAAAC,CAAQ,CAAA,EAC5BJ,EACE,CAAE,SAAAK,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAE1B,eAAAC,EAAS,CAAE,KAAAC,GAAoB,CACxC,GAAA,CACI,MAAA1G,EAAY,QAAQ,eAAe,CACvC,GAAAJ,EACA,KAAA8G,CAAA,CACD,EACDX,EAAQW,CAAI,EACZJ,EAASlG,EAAE,kBAAkB,EAAGuG,EAAa,OAAO,QAC7CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CAAA,CAGzBZ,EAAA,CAAA,CAIR,OAAArE,EAACkF,GAAA,CACC,MAAOzG,EAAE,SAAS,EAClB,OAAAkC,EACA,QAAA0D,EACA,QAAQ,QACR,QAAS,CACPrE,EAACuD,EAAA,CAEC,GAAG,mBACH,KAAK,SACL,KAAK,gBACL,WAAY,CAACkB,GAAW,CAACC,EAExB,WAAE,MAAM,CAAA,EANL,SAON,EACA1E,EAACuD,EAAA,CAEC,GAAG,kBACH,QAAS4B,GAAc,KACvB,QAASd,EAER,WAAE,QAAQ,CAAA,EALP,QAAA,CAOR,EAEA,SAACrE,EAAAoF,GAAA,CAAc,GAAGd,EAChB,SAACtE,EAAAI,GAAA,CAAK,GAAG,gBAAgB,SAAUoE,EAAaM,CAAQ,EAAG,aAAY,GACrE,SAAA9E,EAACqD,EAAA,CACC,KAAK,OACL,MAAO5E,EAAE,UAAU,EACnB,MAAO,CACL,SAAUA,EAAE,UAAU,CAAA,CACxB,GAEJ,CACF,CAAA,CAAA,CACF,CAEJ,ECjEa4G,GAAkB,CAAC,CAC9B,KAAA7C,EACA,OAAQ,CAAE,GAAAvE,EAAI,gBAAAqH,EAAiB,OAAAC,CAAO,CACxC,IAAqB,CACb,KAAA,CAAE,YAAAlH,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnCW,EAAaC,GAAc,EAE3B,CAACC,EAAOC,CAAQ,EAAI1G,EAASqG,GAAmB,CAAA,CAAE,EAClD,CAACM,EAAUC,CAAW,EAAI5G,EAAS,EAAK,EACxC,CAAC6G,EAAcC,CAAe,EAAI9G,EAAS,EAAE,EAC7C,CAAC+G,EAAaC,CAAc,EAAIhH,EAAS,EAAK,EAC9C,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,MAAW,KAAK,EAAE,SAAS,EAE3CE,EAAc,SAAY,CAC9B,MAAMC,EAAS,MAAMjI,EAAY,QAAQ,mBAAmB,CAAE,GAAAJ,EAAS,EAC3DsI,GAAAD,EAAQ,cAAe3B,EAAUlG,CAAC,CAChD,EAEM,CAAC+H,EAAyBC,CAAiB,EAAIC,GAAiB,CACpE,SAAU,aACV,WAAYjI,EAAE,iBAAkB,CAC9B,KAAMqH,CAAA,CACP,EACD,oBAAqB,SACrB,sBAAuBX,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACI,MAAA9G,EAAY,QAAQ,kBAAkB,CAC1C,GAAAJ,EACA,KAAM6H,CAAA,CACP,EACQH,EAAA,CACP,GAAG,OAAO,KAAKD,CAAK,EAAE,OAAO,CAACiB,EAAaT,KACrCA,IAAQJ,IACHI,EAAAA,CAAG,EAAIR,EAAMQ,CAAG,GAElBS,GACN,CAAE,CAAA,CAAA,CACN,EACOP,EAAA,EACRzB,EAASlG,EAAE,mBAAmB,EAAGuG,EAAa,OAAO,QAC9CC,EAAO,CACdL,EAAS,iBAAkBK,CAAK,CAAA,CAClC,CACF,CACD,EAED,OAEI5E,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC8C,GAAA,CACC,KAAK,iBACL,kBAAmByC,GAAQ,UAC3B,aAAY,GAEZ,SAAAvF,EAACQ,EAAA,CACC,MAAO/B,EAAE,2BAA2B,EACpC,QAAQ,iCACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,+BAA+B,EAC3C,aAAa,2BAAA,CACf,EAGF,SAAA4B,EAAC+B,GAAM,CAAA,UAAS,GACd,SAAA,CAAApC,EAACqC,GACC,CAAA,SAAArC,EAACiE,GAAiB,CAAA,KAAK,2BAA4B,CAAA,EACrD,EACCjE,EAAAqC,GAAA,CACC,SAACrC,EAAAuD,EAAA,CAAO,QAAS4B,GAAc,UAAW,QAAS,IAAM3C,IACtD,SAAE/D,EAAA,MAAM,EACX,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CACF,EAEE4B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACyG,EAAkB,EAAA,EACnBzG,EAACmE,GAAA,CACC,SAAUlG,EACV,OAAQ+H,EACR,QAAUjB,GAAS,CACjBW,EAAMX,CAAI,EAAI,KAAK,IAAQ,EAAA,IACnBqB,EAAA,CACV,EACA,QAAS,IAAMH,EAAe,EAAK,CAAA,CACrC,EACAjG,EAAC4G,GAAA,CACC,WAAYnI,EAAE,wBAAwB,EACtC,SAAU,CAACoI,EAAQC,IAAQjB,EAAYiB,CAAG,EAC1C,WAAYlB,EAEZ,SAAA5F,EAAC+G,GAAA,CAEC,aAAa,yBACb,OAAQ,IACN,QAAQ,QACN,OAAO,QAAQrB,GAAS,CAAE,CAAA,EAAE,IAAKsB,IACxB,CAAE,KAAMA,EAAM,CAAC,EAAG,aAAcA,EAAM,CAAC,CAAE,EACjD,CACH,EAEF,YAEI3G,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACuD,EAAA,CACC,GAAG,0BACH,QAAS8C,EACT,QAASlB,GAAc,UACvB,WAAY,OAAO,KAAKO,CAAK,EAAE,SAAW,EAEzC,WAAE,yBAAyB,CAAA,CAAA,EAEhC,IACCuB,GACC,CAAA,SAAAjH,EAACuD,EAAA,CACC,GAAG,uBACH,QAAS,IAAM0C,EAAe,EAAI,EAClC,QAASd,GAAc,SAEtB,WAAE,sBAAsB,CAAA,CAAA,CAE7B,CAAA,CAAA,EACF,EAEF,QAAS,CACP,CACE,MAAO1G,EAAE,QAAQ,EACjB,WAAasG,GAAS,CACpBgB,EAAgBhB,EAAK,IAAI,EACDyB,EAAA,CAAA,CAC1B,CAEJ,EACA,QAAS,CACP,CACE,KAAM,OACN,WAAY,UACd,EACA,CACE,KAAM,eACN,WAAY,mBACZ,eAAgB,CACbzF,GACCA,EACIyE,EACE,IAAI,KAAK,SAASzE,EAAM,SAAU,CAAA,EAAI,GAAI,EAC1CmG,EAAA,EAEF,EAAA,CACR,CAEJ,EACA,WACElH,EAACmH,GAAA,CACC,QAAS1I,EAAE,SAAS,EACpB,aAAcA,EAAE,qBAAqB,EACrC,kBAAmBA,EAAE,sBAAsB,EAC3C,gBAAiB,IAAMwH,EAAe,EAAI,CAAA,CAAA,CAC5C,EAlEGC,CAAA,CAoEP,CAAA,CACF,CACF,CAAA,CAAA,EACF,CAEJ,EChMakB,GAAmBjK,GAAgC,CACxD,KAAA,CAAE,EAAAsB,CAAE,EAAIC,EAAe,EAE7B,OAEI2B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqD,EAAA,CACC,KAAK,qBACL,MAAO5E,EAAE,SAAS,EAClB,UAAWA,EAAE,aAAa,EAC1B,KAAK,MACJ,GAAGtB,CAAA,CACN,EACA6C,EAACqD,EAAA,CACC,KAAK,uBACL,MAAO5E,EAAE,WAAW,EACpB,UAAWA,EAAE,eAAe,EAC5B,KAAK,MACJ,GAAGtB,CAAA,CACN,EACA6C,EAACqD,EAAA,CACC,KAAK,oBACL,MAAO5E,EAAE,mBAAmB,EAC5B,UAAWA,EAAE,uBAAuB,EACpC,KAAK,MACJ,GAAGtB,CAAA,CAAA,CACN,EACF,CAEJ,EClBakK,GAAyB,CAAC,CACrC,KAAA7E,EACA,MAAAC,EACA,mBAAAC,CACF,IAAmC,CAC3B,KAAA,CAAE,CAAE,EAAIhE,EAAe,EACvB4I,EAAYxI,KAAgB,UAC5ByI,EAA2BD,GAAW,gBAAgB,UACtDE,EAA6BF,GAAW,kBAAkB,UAC1DG,EAAyBH,GAAW,cAAc,UAClDI,EAAqBJ,GAAW,UAAU,UAE1CK,EAAWC,GACfC,GAAcD,CAAI,EAAE,IAAKE,IAAO,CAAE,IAAKA,EAAG,MAAOA,CAAI,EAAA,EAEjDC,EAAgBH,GAAsD,CAC1E,CAAE,IAAK,GAAI,MAAO,EAAE,QAAQ,CAAE,EAC9B,GAAGD,EAAQC,CAAI,CACjB,EAEMI,EAAcJ,GAAsD,CACxE,CAAE,IAAK,MAAO,MAAO,EAAE,KAAK,CAAE,EAC9B,GAAGD,EAAQC,CAAI,CACjB,EAEMK,EAAeL,GAAsD,CACzE,CAAE,IAAK,OAAQ,MAAO,EAAE,MAAM,CAAE,EAChC,GAAGD,EAAQC,CAAI,CACjB,EAGE,OAAAvH,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBJ,EACnB,aAAY,GAEZ,SAAA,CAAA1C,EAACoH,GAAgB,EAAA,EACjBpH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,6CACF,EACA,MAAO,EAAE,+BAA+B,EACxC,UAAW,EAAE,mCAAmC,EAChD,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaR,CAAyB,CAAA,CACjD,EACAvH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,yCACF,EACA,MAAO,EAAE,2BAA2B,EACpC,UAAW,EAAE,+BAA+B,EAC5C,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaR,CAAyB,CAAA,CACjD,EACAvH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,4CACF,EACA,MAAO,EAAE,yCAAyC,EAClD,UAAW,EAAE,6CAA6C,EAC1D,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaN,CAAuB,CAAA,CAC/C,EACAzH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,4CACF,EACA,MAAO,EAAE,6CAA6C,EACtD,UAAW,EAAE,iDAAiD,EAC9D,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaP,CAA2B,CAAA,CACnD,EACAxH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,6CACF,EACA,MAAO,EAAE,iCAAiC,EAC1C,UAAW,EAAE,qCAAqC,EAClD,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaL,CAAmB,CAAA,CAC3C,EACA1H,EAAC+D,EAAA,CACC,KAAMhB,EACJ,6CACF,EACA,MAAO,EAAE,kDAAkD,EAC3D,UAAW,EAAE,sDAAsD,EACnE,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaN,CAAuB,CAAA,CAC/C,EACAzH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,6CACF,EACA,MAAO,EAAE,sDAAsD,EAC/D,UAAW,EACT,0DACF,EACA,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaP,CAA2B,CAAA,CACnD,EACAxH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,yCACF,EACA,MAAO,EAAE,iCAAiC,EAC1C,UAAW,EAAE,qCAAqC,EAClD,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,MAAO,MAAO,EAAE,KAAK,CAAE,EAC9B,GAAGkF,EAAYV,CAAyB,CAAA,CAC1C,CACF,EACAvH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,0CACF,EACA,MAAO,EAAE,yBAAyB,EAClC,UAAW,EAAE,6BAA6B,EAC1C,WAAY,CACV,aAAc,EAChB,EACA,QAASiF,EAAWP,CAAuB,CAAA,CAC7C,EACAzH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,0CACF,EACA,MAAO,EAAE,uBAAuB,EAChC,UAAW,EAAE,2BAA2B,EACxC,WAAY,CACV,aAAc,EAChB,EACA,QAASiF,EAAWR,CAA2B,CAAA,CACjD,EACAxH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,oCACF,EACA,MAAO,EAAE,uBAAuB,EAChC,UAAW,EAAE,2BAA2B,EACxC,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,eACA,yBACA,eACA,kBAAA,EACA,IAAKmF,IAAO,CACZ,IAAKA,EACL,MAAO,EAAE,iBAAiBA,CAAC,EAAE,CAAA,EAC7B,CAAA,CACJ,EACAlI,EAACQ,EAAA,CACC,MAAO,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAT,EAACoD,GAAA,CACC,KAAML,EAA2B,yBAAyB,EAC1D,aAAY,EAAE,kBAAkB,EAChC,eAAe,gBACf,UAAS,EAAA,CAAA,CACX,CACF,EACA/C,EAAC+D,EAAA,CACC,KAAMhB,EACJ,8CACF,EACA,MAAO,EAAE,gCAAgC,EACzC,UAAW,EAAE,oCAAoC,EACjD,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaL,CAAmB,CAAA,CAC3C,EACA1H,EAAC+D,EAAA,CACC,KAAMhB,EACJ,iDACF,EACA,MAAO,EAAE,mCAAmC,EAC5C,UAAW,EAAE,uCAAuC,EACpD,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaN,CAAuB,CAAA,CAC/C,EACAzH,EAAC+D,EAAA,CACC,KAAMhB,EACJ,iDACF,EACA,MAAO,EAAE,mCAAmC,EAC5C,UAAW,EAAE,uCAAuC,EACpD,WAAY,CACV,aAAc,EAChB,EACA,QAASgF,EAAaP,CAA2B,CAAA,CACnD,IACClE,GACC,CAAA,SAAA,CAACtD,EAAAuD,EAAA,CAAO,QAAQ,YAAY,GAAG,gBAAgB,QAASf,EACrD,SAAE,EAAA,MAAM,CACX,CAAA,EACAxC,EAACuD,EAAO,CAAA,GAAG,kBAAkB,QAAQ,OAAO,QAASd,EAClD,SAAE,EAAA,QAAQ,CACb,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,EC5Oa0F,GAA8B,CAAC,CAC1C,KAAA3F,EACA,MAAAC,CACF,IAAwC,CAChC,KAAA,CAAE,EAAAhE,CAAE,EAAIC,EAAe,EAC7B,OACG2B,EAAAyC,GAAA,CAAW,KAAK,eAAe,aAAY,GAC1C,SAAA,CAAA9C,EAACoH,GAAgB,EAAA,EACjBpH,EAACqD,EAAA,CACC,KAAK,8CACL,MAAO5E,EAAE,wCAAwC,EACjD,UAAWA,EAAE,4CAA4C,EACzD,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,kDACL,MAAO5E,EAAE,4CAA4C,EACrD,UAAWA,EAAE,gDAAgD,EAC7D,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,iDACL,MAAO5E,EAAE,6BAA6B,EACtC,UAAWA,EAAE,iCAAiC,EAC9C,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,qDACL,MAAO5E,EAAE,iCAAiC,EAC1C,UAAWA,EAAE,qCAAqC,EAClD,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,iDACL,MAAO5E,EAAE,6BAA6B,EACtC,UAAWA,EAAE,iCAAiC,EAC9C,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,qDACL,MAAO5E,EAAE,iCAAiC,EAC1C,UAAWA,EAAE,qCAAqC,EAClD,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,uCACL,MAAO5E,EAAE,oBAAoB,EAC7B,UAAWA,EAAE,wBAAwB,EACrC,KAAK,KAAA,CACP,EACAuB,EAACqD,EAAA,CACC,KAAK,kDACL,MAAO5E,EAAE,2BAA2B,EACpC,UAAWA,EAAE,+BAA+B,EAC5C,KAAK,KAAA,CACP,IAEC6E,GACC,CAAA,SAAA,CAACtD,EAAAuD,EAAA,CAAO,QAAQ,WAAW,QAASf,EAAM,cAAY,gBACnD,SAAE/D,EAAA,MAAM,CACX,CAAA,EACAuB,EAACuD,EAAO,CAAA,QAAQ,OAAO,QAASd,EAAO,cAAY,kBAChD,SAAEhE,EAAA,QAAQ,CACb,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,EChEa2J,GAAkC,CAAC,CAC9C,KAAA5F,EACA,MAAAC,EACA,mBAAAC,CACF,IAA4C,CACpC,KAAA,CAAE,CAAE,EAAIhE,EAAe,EACvB,CAAE,QAAAqD,CAAQ,EAAIC,GAAe,EAEjC,OAAA3B,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBJ,EACnB,aAAY,GAEZ,SAAA,CAAA1C,EAACQ,EAAA,CACC,MAAO,EAAE,+CAA+C,EACxD,QAAQ,gDACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,mDAAmD,EAC/D,aAAa,+CAAA,CACf,EAGF,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,qDACF,EACA,aAAa,GACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,uDACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,+CAA+C,CAAA,CAAA,CAC/D,CAAA,CAEJ,CACF,EACAf,EAACQ,EAAA,CACC,MAAO,EAAE,yCAAyC,EAClD,QAAQ,0CACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6CAA6C,EACzD,aAAa,yCAAA,CACf,EAGF,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,8CACF,EACA,aAAa,GACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,iDACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,yCAAyC,CAAA,CAAA,CACzD,CAAA,CAEJ,CACF,EACAf,EAACQ,EAAA,CACC,MAAO,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,+BACF,EACA,aAAa,OACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,mBACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,kBAAkB,CAAA,CAAA,CAClC,CAAA,CAEJ,CACF,EACAf,EAACQ,EAAA,CACC,MAAO,EAAE,0CAA0C,EACnD,QAAQ,2CACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,8CAA8C,EAC1D,aAAa,0CAAA,CACf,EAGF,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,iDACF,EACA,aAAa,QACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,2CACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,0CAA0C,CAAA,CAAA,CAC1D,CAAA,CAEJ,CACF,EACAf,EAACQ,EAAA,CACC,MAAO,EAAE,wBAAwB,EACjC,QAAQ,yBACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,4BAA4B,EACxC,aAAa,wBAAA,CACf,EAGF,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,kDACF,EACA,aAAa,QACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,yBACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,wBAAwB,CAAA,CAAA,CACxC,CAAA,CAEJ,CACF,IACCuC,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,QAAQ,YACR,QAASf,EACT,cAAY,wBAEX,WAAE,MAAM,CAAA,CACX,EACAxC,EAACuD,EAAA,CACC,QAAQ,OACR,QAASd,EACT,cAAY,0BAEX,WAAE,QAAQ,CAAA,CAAA,CACb,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,EC9Ka8D,GAAc,CACzBD,EACAgC,EACA3D,EACA,IACG,CACG,MAAA4D,EAAejC,EAAO,iBAAiB,QAAU,EACjDkC,EAAclC,EAAO,gBAAgB,QAAU,EAEjDiC,IAAiB,GAAKC,IAAgB,EACxC7D,EAAS,EAAE,eAAe,EAAGK,EAAa,OAAO,EACxCwD,EAAc,GACvB7D,EACE,EAAE2D,EAAY,UAAW,CAAE,aAAchC,EAAO,gBAAiB,EACjEtB,EAAa,OACf,EACAL,EACE,EAAE2D,EAAY,OAAQ,CAAE,YAAahC,EAAO,eAAgB,EAC5DtB,EAAa,MACf,GAEAL,EACE,EAAE2D,EAAY,UAAW,CAAE,aAAchC,EAAO,gBAAiB,EACjEtB,EAAa,OACf,CAEJ,EAOayD,GAAc,CAAC,CAAE,KAAAjG,EAAM,OAAAkG,KAA4B,CACxD,KAAA,CAAE,EAAAjK,CAAE,EAAIC,EAAe,EACvBiK,EAAgB,iBAEhB,CAAE,SAAAC,CAAS,EAAI5G,GAAe,EAC9B,CACJ,aAAA6G,EACA,WAAAC,EACA,SAAA1K,EACA,mCAAA2K,CAAA,EACEL,EAEEM,EAAeC,GAAoB,CACvC,UAAW1H,KAAQ0H,EACjBL,EACE7F,EAAuC,cAAcxB,CAAI,EAAE,EAC3DuH,IAAavH,CAAI,GAAK,EACxB,CAEJ,EAEA,OACGvB,EAAAkJ,GAAA,CAAY,QAAQ,QAAQ,UAAU,eACrC,SAAAlJ,EAACmJ,GAAA,CACC,MAAO1K,EAAE,eAAe,EACxB,SAAU,CACR,CACE,MAAOA,EAAE,YAAY,EACrB,SAAU,CAACoK,EACX,MAAO7I,EAACqF,GAAgB,CAAA,OAAAqD,EAAgB,KAAAlG,CAAY,CAAA,CACtD,EACA,CACE,MAAO/D,EAAE,qCAAqC,EAC9C,SAAUL,IAAauK,EACvB,MAEItI,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoJ,GAAK,CAAA,UAAU,gBACb,SAAA3K,EAAE,yCAAyC,EAC9C,EACAuB,EAACqH,GAAA,CACC,KAAA7E,EACA,MAAO,IAAM,CACCwG,EAAA,CACV,UACA,YACA,SACA,mCACA,+BACA,kCACA,kCACA,mCACA,mCACA,mCACA,+BACA,gCACA,gCACA,0BACA,eACA,oCACA,uCACA,sCAAA,CACD,CAAA,CACH,CAAA,CACF,CACF,CAAA,CAEJ,EACA,CACE,MAAOvK,EAAE,iCAAiC,EAC1C,SAAUL,IAAauK,EACvB,MAEItI,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoJ,GAAK,CAAA,UAAU,gBACb,SAAA3K,EAAE,qCAAqC,EAC1C,EACAuB,EAACoI,GAAA,CACC,KAAM,IAAM5F,EAAK,EACjB,MAAO,IACLwG,EAAY,CACV,2CACA,qBACA,uCACA,uCACD,CAAA,CAAA,CAAA,CAEL,CACF,CAAA,CAEJ,EACA,CACE,MAAOvK,EAAE,6BAA6B,EACtC,SAAUL,IAAauK,EACvB,MAEItI,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoJ,GAAK,CAAA,UAAU,gBACb,SAAA3K,EAAE,iCAAiC,EACtC,EACAuB,EAACmI,GAAA,CACC,KAAM,IAAM3F,EAAK,EACjB,MAAO,IACLwG,EAAY,CACV,UACA,YACA,SACA,mCACA,uCACA,sCACA,0CACA,0CACA,4BACA,sCACD,CAAA,CAAA,CAAA,CAEL,CACF,CAAA,CAEJ,EACA,CACE,MAAOvK,EAAE,kBAAkB,EAC3B,MAEI4B,EAAA2C,EAAA,CAAA,SAAA,CAAChD,EAAAoJ,GAAA,CAAK,UAAU,gBACb,SAAA3K,EAAE,mBAAqB4K,GAAYjL,GAAY,EAAE,CAAC,CACrD,CAAA,EACA4B,EAACuC,GAAA,CACC,SAAAnE,EACA,KAAM,IAAMoE,EAAK,EACjB,MAAO,IAAM,CACCwG,EAAA,CACV,0BACA,wBACA,6CACA,4BAAA,CACD,CAAA,CACH,CAAA,CACF,CACF,CAAA,CAEJ,EACA,CACE,MAAOvK,EAAE,yBAAyB,EAClC,MAEI4B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoJ,GAAK,CAAA,UAAU,gBACb,SAAA3K,EAAE,6BAA6B,EAClC,EACAuB,EAACwD,GAAA,CACC,SAAApF,EACA,KAAM,IAAMoE,EAAK,EACjB,MAAO,IAAM,CACXoG,EACE,6CACAG,GAAoC,OACtC,EACAH,EACE,kDACAG,GAAoC,YACtC,CAAA,CACF,CAAA,CACF,CACF,CAAA,CAAA,CAGN,EACA,QAAO,EAAA,CAAA,EAEX,CAEJ,EC9MaO,GAAiB,CAAC,CAAE,OAAAZ,KAAkC,CAC3D,KAAA,CAAE,YAAArK,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EA6B7B,OACGsB,EAAAkJ,GAAA,CAAY,QAAQ,QAAQ,UAAU,cACrC,SAAAlJ,EAACuJ,GAAA,CACC,OA9BoD,MACxDC,EACAC,IACG,CACG,MAAAC,EACHC,GAAkBC,GACjBA,EAAS,IAAKC,IAAa,CACzB,KAAAF,EACA,GAAGE,CAAA,EACH,EAeN,OAboB,MAAM,QAAQ,IAAI,CACpCxL,EAAY,QACT,aAAa,CAAE,GAAIqK,EAAO,GAAK,MAAAc,EAAO,IAAAC,CAAK,CAAA,EAC3C,KAAKC,EAAkBjL,EAAE,yBAAyB,CAAC,CAAC,EACvDJ,EAAY,QACT,oBAAoB,CACnB,GAAIqK,EAAO,GACX,MAAAc,EACA,IAAAC,CACD,CAAA,EACA,KAAKC,EAAkBjL,EAAE,sBAAsB,CAAC,CAAC,CAAA,CACrD,GAEkB,KAAK,CAC1B,EAMM,cAAe,CAAC,SAAS,EACzB,kBAAmBA,EAAE,qBAAqB,CAAA,CAAA,EAE9C,CAEJ,EC1CaqL,GAAiB,CAAC,CAC7B,OAAApB,EACA,KAAAlG,EACA,MAAAC,CACF,IAA2B,CACnB,KAAA,CAAE,CAAE,EAAI/D,EAAe,EACvB,CAAE,MAAAqL,CAAM,EAAI/H,GAA2B,EAEvC,CAAE,UAAAgI,CAAU,EAAIC,GAAU,EAC1BC,EAAYF,EAAU,gBAAgB,GAAKtB,EAAO,QAAQ,UAE1DtK,EAAW2L,EAAM,UAAU,EAG/B,OAAA1J,EAACyC,GAAA,CACC,aAAY,GACZ,kBAAmB4F,EAAO,QAAQ,UAClC,KAAK,iBAEJ,SAAA,CAAA,CAACA,EAAO,YAAe1I,EAAAmK,GAAA,CAAc,SAAA/L,CAAoB,CAAA,EACzDA,IAAa,QACZ4B,EAACqD,EAAA,CACC,KAAK,MACL,KAAK,WACL,MAAO,EAAE,UAAU,EACnB,UAAW,EAAE,cAAc,CAAA,CAC7B,EAEDqF,EAAO,YACN1I,EAACoK,GAAA,CACC,KAAK,WACL,KAAA5H,EACA,MAAAC,EACA,WAAYyH,CAAA,CAAA,CACd,CAAA,CAEJ,CAEJ,ECxCaG,GAAqB,CAAC,CAAE,OAAA9E,KAAmC,CAChE,KAAA,CAAE,EAAA9G,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAqL,CAAM,EAAI/H,GAA2B,EAEvCsI,EAAcxL,KAAgB,OAAQ,MACtCyL,EAAkBR,EAAM,iBAAiB,EACzCS,EAAiCT,EACrChH,EACE,sCAAA,CAEJ,EAEA,SACGD,GAAW,CAAA,aAAY,GAAC,kBAAmByC,EAAQ,KAAK,iBACvD,SAAA,CAAAvF,EAAC+D,EAAA,CACC,KAAK,yBACL,MAAOtF,EAAE,YAAY,EACrB,UAAWA,EAAE,gBAAgB,EAC7B,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,GAAI,MAAOA,EAAE,QAAQ,CAAE,EAC9B,GAAG6L,EAAY,IAAI,CAAC,CAAE,KAAA/I,CAAA,KAAY,CAAE,IAAKA,EAAM,MAAOA,GAAO,CAAA,CAC/D,CACF,EACAvB,EAACiD,GAAA,CACC,KAAK,kBACL,MAAOxE,EAAE,iBAAiB,EAC1B,UAAWA,EAAE,qBAAqB,CAAA,CACpC,EACAuB,EAACiD,GAAA,CACC,KAAMF,EACJ,sCACF,EACA,MAAOtE,EAAE,iBAAiB,EAC1B,UAAWA,EAAE,qBAAqB,EAClC,WAAY,CAAC8L,EACb,UAAS,EAAA,CACX,EACAvK,EAACyK,GAAA,CACC,KAAM1H,EACJ,gCACF,EACA,MAAOtE,EAAE,mBAAmB,EAC5B,UAAWA,EAAE,uBAAuB,EACpC,WAAY,EAAE8L,GAAmBC,IAA2B,OAAA,CAAA,CAC9D,EACF,CAEJ,EC9CME,GAAc,CAACC,EAAyB1F,KAC1C0F,GAAK,WAAW,UAAU,GAAKA,GAAK,WAAW,SAAS,IACxD,CAACA,EAAI,SAAS,GAAG,GACnBA,IAAQ,IACR1F,EAEW2F,GAAc,CAAC,CAC1B,KAAApI,EACA,MAAAC,EACA,OAAQ,CAAE,OAAA8C,CAAO,CACnB,IAA2B,CACnB,KAAA,CAAE,CAAE,EAAI7G,EAAe,EACvB,CAAE,QAAAqD,EAAS,MAAAgI,CAAM,EAAI/H,GAA2B,EAEhD,CAAE,UAAAgI,CAAU,EAAIC,GAAU,EAC1BC,EAAYF,EAAU,gBAAgB,GAAKzE,GAAQ,UAEnDnH,EAAW2L,EAAM,UAAU,EAC3Bc,EAAqBd,EAAM,oBAAoB,EAC/Ce,EACJ1M,IAAa,iBACT,6BACA,yBAGJ,OAAAiC,EAACyC,GAAA,CACC,aAAY,GACZ,kBAAmByC,GAAQ,UAC3B,KAAK,iBAEL,SAAA,CAAAvF,EAACQ,EAAA,CACC,MAAO,EAAE,oBAAoB,EAC7B,UACER,EAACS,EAAA,CACC,SAAU,EAAEqK,CAAyB,EACrC,aAAa,oBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAA9K,EAACkC,GAAA,CACC,KAAK,qBACL,aAAc,GACd,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,+BACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,MACjB,SAAUA,EAAM,SAChB,aAAY,EAAE,oBAAoB,CAAA,CAAA,CACpC,CAAA,CAEJ,CACF,EACC/D,IAAa,kBAAoByM,GAChC7K,EAACqD,EAAA,CACC,cAAY,wBACZ,KAAK,MACL,KAAMN,EACJ,oCACF,EACA,MAAO,EAAE,uBAAuB,EAChC,UAAW,EAAE,2BAA2B,EACxC,MAAO,CACL,SAAW4H,GACTD,GAAYC,EAAK,EAAE,wBAAwB,EAAE,SAAU,CAAA,CAAA,CAC3D,CACF,EAEDvM,IAAa,kBAAoByM,GAChC7K,EAACiD,GAAA,CACC,KAAMF,EACJ,iDACF,EACA,aAAa,OACb,MAAO,EAAE,mCAAmC,EAC5C,UAAW,EAAE,uCAAuC,EACpD,UAAS,EAAA,CACX,EAED3E,IAAa,kBAAoB,CAACyM,GAE/BxK,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqD,EAAA,CACC,cAAY,uBACZ,KAAK,MACL,KAAMN,EACJ,mCACF,EACA,MAAO,EAAE,sBAAsB,EAC/B,UAAW,EAAE,0BAA0B,EACvC,MAAO,CACL,SAAW4H,GACTD,GAAYC,EAAK,EAAE,uBAAuB,EAAE,SAAU,CAAA,CAAA,CAC1D,CACF,EACA3K,EAACQ,EAAA,CACC,MAAO,EAAE,kCAAkC,EAC3C,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sCAAsC,EAClD,aAAa,kCAAA,CACf,EAEF,QAAQ,mCACR,gBAAe,GAEf,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,gDACF,EACA,aAAa,OACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,mCACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,kCAAkC,CAAA,CAAA,CAClD,CAAA,CAEJ,CACF,EACAf,EAACQ,EAAA,CACC,MAAO,EAAE,wCAAwC,EACjD,UACER,EAACS,EAAA,CACC,SAAU,EAAE,4CAA4C,EACxD,aAAa,wCAAA,CACf,EAEF,QAAQ,yCACR,gBAAe,GAEf,SAAAT,EAACkC,GAAA,CACC,KAAMa,EACJ,qDACF,EACA,aAAa,QACb,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,GAAG,yCACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWlG,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAUoB,EAAM,SAASpB,EAAM,UAAU,EAC5D,aAAY,EAAE,wCAAwC,CAAA,CAAA,CACxD,CAAA,CAEJ,CAAA,CACF,EACF,EAEFf,EAACoK,GAAA,CACC,KAAK,WACL,KAAA5H,EACA,MAAAC,EACA,WAAY,CAACyH,CAAA,CAAA,CACf,CAAA,CACF,CAEJ,ECvKaa,GAAS,CAAC,CAAE,KAAAxJ,EAAM,MAAAyJ,KAAyB,CAChD,KAAA,CAAE,EAAAvM,CAAE,EAAIC,EAAe,EAG3B,OAAAsB,EAACiD,GAAA,CACC,KAAA1B,EACA,MAAO9C,EAAEuM,CAAK,EACd,UAAWvM,EAAE,GAAGuM,CAAK,MAAM,EAC3B,UAAS,EAAA,CACX,CAEJ,EAEaC,GAAa,IAAM,CACxB,KAAA,CAAE,EAAAxM,CAAE,EAAIC,EAAe,EAG3B,OAAA2B,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,iBACL,UAAU,oCAEV,SAAA,CAAA9C,EAAC+D,EAAA,CACC,KAAK,iCACL,MAAOtF,EAAE,cAAc,EACvB,UAAWA,EAAE,kBAAkB,EAC/B,WAAY,CACV,aAAc,UAChB,EACA,QAAS,CAAC,WAAY,QAAS,YAAa,YAAY,CAAA,CAC1D,EACAuB,EAAC+K,GAAA,CACC,KAAK,uCACL,MAAM,mBAAA,CACR,EACA/K,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,oCAAoC,EACrE,MAAM,kBAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,kCAAkC,EACnE,MAAM,sBAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,gCAAgC,EACjE,MAAM,uBAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EACJ,sCACF,EACA,MAAM,4BAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EACJ,8CACF,EACA,MAAM,gBAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,gCAAgC,EACjE,MAAM,cAAA,CAAA,CACR,CAAA,CACF,CAEJ,ECrEMmI,GAAuB,CAC3B,WACA,aACA,kBACA,aACA,kBACA,UACF,EAEMC,GAAsB,CAAC,OAAQ,SAAU,cAAc,EAEvDC,GAAmB,CACvB,CAAE,KAAM,YAAa,MAAO,yCAA0C,EACtE,CACE,KAAM,0BACN,MAAO,qDACT,EACA,CACE,KAAM,YACN,MAAO,iDACT,EACA,CACE,KAAM,0BACN,MAAO,8DAAA,CAEX,EAEaC,GAAgB,IAAM,CAC3B,KAAA,CAAE,EAAA5M,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAqL,CAAM,EAAI/H,GAA2B,EAEvCsJ,EAAWvB,EACfhH,EAAuC,kCAAkC,CAC3E,EACMwI,EAAgBxB,EACpBhH,EACE,qCAAA,CAEJ,EAGE,OAAA1C,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,iBACL,UAAU,oCAEV,SAAA,CAAA9C,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,kCAAkC,EACnE,MAAM,eAAA,CACR,EACA/C,EAAC+K,GAAA,CACC,KAAMhI,EAA2B,qCAAqC,EACtE,MAAM,gBAAA,CACR,GACEuI,IAAa,QAAUC,IAAkB,SAEvClL,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC+D,EAAA,CACC,KAAMhB,EACJ,qCACF,EACA,MAAOtE,EAAE,oBAAoB,EAC7B,UAAWA,EAAE,wBAAwB,EACrC,WAAY,CACV,aAAcyM,GAAqB,CAAC,CACtC,EACA,QAAS,CAAC,GAAGA,EAAoB,CAAA,CACnC,EACAlL,EAAC+D,EAAA,CACC,KAAMhB,EACJ,0EACF,EACA,MAAOtE,EAAE,kBAAkB,EAC3B,UAAWA,EAAE,sBAAsB,EACnC,WAAY,CACV,aAAc0M,GAAoB,CAAC,CACrC,EACA,QAAS,CAAC,GAAGA,EAAmB,CAAA,CAClC,EACAnL,EAAC+D,EAAA,CACC,KAAK,oDACL,MAAOtF,EAAE,kBAAkB,EAC3B,UAAWA,EAAE,sBAAsB,EACnC,WAAY,CACV,aAAc2M,GAAiB,CAAC,EAAE,KACpC,EACA,QAASA,GAAiB,IAAI,CAAC,CAAE,KAAA7J,EAAM,MAAAR,MAAa,CAClD,IAAKA,EACL,MAAOQ,CAAA,EACP,CAAA,CAAA,CACJ,CACF,CAAA,CAAA,CAAA,CAEJ,CAEJ,EClFaiK,GAAkBrO,GAA+B,CACtD,KAAA,CAAE,EAAAsB,CAAE,EAAIC,EAAe,EAEvB,CAAE,MAAAqL,CAAM,EAAI/H,GAA2B,EACvC5D,EAAW2L,EAAM,UAAU,EAE3B,CAAE,OAAArB,GAAWvL,EAGjB,OAAA6C,EAACmJ,GAAA,CACC,MAAO1K,EAAE,eAAe,EACxB,UAAU,8BACV,SAAU,CACR,CACE,MAAOA,EAAE,iBAAiB,EAC1B,MACEuB,EAACI,GAAK,CAAA,aAAY,GAChB,SAAAJ,EAACyL,GAAA,CACC,SAAU/C,EAAO,SACjB,mBAAoBA,EAAO,QAAQ,SAAA,CAAA,CAEvC,CAAA,CAEJ,EACA,CACE,MAAOjK,EAAE,gBAAgB,EACzB,MAAOuB,EAAC8J,GAAgB,CAAA,GAAG3M,CAAO,CAAA,CACpC,EACA,CACE,MAAOsB,EAAE,sBAAsB,EAC/B,SAAUL,IAAa,QAAUsK,EAAO,WACxC,QAAQuC,GAAW,CAAA,CAAA,CACrB,EACA,CACE,MAAOxM,EAAE,wBAAwB,EACjC,SAAUL,IAAa,QAAUsK,EAAO,WACxC,QAAQ2C,GAAc,CAAA,CAAA,CACxB,EACA,CACE,MAAO5M,EAAE,kBAAkB,EAC3B,SAAUL,IAAa,kBAAoBsK,EAAO,WAClD,QAAQgD,GAAiB,CAAA,CAAA,CAC3B,EACA,CACE,MAAOjN,EAAE,eAAe,EACxB,SAAUiK,EAAO,WACjB,MAAQ1I,EAAAqK,GAAA,CAAmB,OAAQ3B,EAAO,QAAQ,SAAW,CAAA,CAC/D,EACA,CACE,MAAOjK,EAAE,gBAAgB,EACzB,SAAUiK,EAAO,WACjB,MAAO1I,EAAC4K,GAAa,CAAA,GAAGzN,CAAO,CAAA,CAAA,CACjC,CACF,CACF,CAEJ,ECxCMwO,GAAa,CAAC,CAClB,KAAApK,EACA,SAAAqK,EACA,UAAAC,EACA,iBAAAC,EACA,UAAAC,CACF,IAAuB,CACf,KAAA,CAAE,EAAAtN,CAAE,EAAIC,EAAe,EACvB,CAAE,QAAAqD,EAAS,SAAAiK,EAAU,UAAAC,CAAA,EAAcjK,GAAe,EAClD,CAACkK,EAAkBC,CAAmB,EAAIlN,EAAS,CAAC,EAAK,CAAC,EAE1DmN,EAAoB,CAACR,EAAkB1N,IAAkB,CACvD,MAAAmO,EAAM,CAAC,GAAGH,CAAgB,EAChCG,EAAIT,CAAQ,EAAI1N,EAChBiO,EAAoBE,CAAG,CACzB,EAEMC,EAAkB/M,GAAQ,IAAM,CACpC,IAAIgN,EAAsC,CAAC,EAE3C,OAAIT,IACFS,EAASC,GAAyB,KAC/BC,GAASA,EAAK,MAAQR,IAAY,UAAUL,CAAQ,GAAG,GAAA,GACvD,QAGEW,CAAA,EACN,CAACN,CAAS,CAAC,EAERS,EAAyB,IAAM,CACnC,MAAMC,EAAcZ,GAAW,KAC5Ba,GAAaA,EAAS,OAASX,IAAY,YAAYL,CAAQ,GAAG,GAAA,GAClE,OAEC,GAAAU,GAAiB,QAAU,CAACP,EAC9B,OAAOO,EAAgB,IAAKG,GACzBzM,EAAAkB,GAAA,CAA4B,MAAOuL,EAAK,IACtC,SAAAA,EAAK,IADW,EAAAA,EAAK,GAExB,CACD,EACH,GAAWE,GAAa,OACtB,OAAOA,EAAY,IAAKE,GACrB7M,EAAAkB,GAAA,CAA8B,MAAO2L,EAAM,KACzC,SAAAA,EAAM,IADU,EAAAA,EAAM,IAEzB,CACD,CAEL,EAEMC,EAAuBC,GAC3BC,GAAUD,CAAa,EAAE,QAAQ,MAAO,EAAE,EAE5C,OACG/M,EAAAiN,EAAA,CACE,SAAalB,GAAAO,GAAiB,OAC7BtM,EAACkC,GAAA,CACC,KAAM,GAAGX,CAAI,IAAIqK,CAAQ,SACzB,aAAc,CAAC,EACf,QAAA7J,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACkN,GAAA,CACC,SAAU,GAAGrB,EAAU,EAAE,SACzB,UAAU,gCACV,eAAgB,CACd,SAAU,EACV,aAAcpN,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,SAAWP,GAASkO,EAAkBR,EAAU1N,CAAI,EACpD,OAAQgO,EAAiBN,CAAQ,EACjC,QAASuB,GAAc,UACvB,mBAAoB1O,EAAE,kBAAkB,EACxC,gBAAiBA,EAAE,kBAAkB,EACrC,WAAY0D,EAAM,MAClB,SAAWe,GAAM,CACff,EAAM,SAASe,CAAC,EAEhBkJ,EAAkBR,EAAU,EAAK,CACnC,EAEC,SAAuBc,EAAA,CAAA,CAAA,CAC1B,CAAA,EAIJ1M,EAACoN,GAAA,CACC,GAAI,GAAGN,EAAoBjB,EAAU,GAAG,CAAC,SACzC,UAAU,cACV,aAAcA,EAAU,MACxB,cAAY,wBACZ,aAAYpN,EAAE,OAAO,EACpB,GAAGuN,EAAS,GAAGzK,CAAI,IAAIqK,CAAQ,QAAQ,CAAA,CAAA,EAG9C,CAEJ,EAEayB,GAAyB,CAAC,CACrC,KAAA9L,EACA,iBAAAuK,EACA,UAAAC,CACF,IAA2B,CACnB,KAAA,CAAE,CAAE,EAAIrN,EAAe,EACvB,CAAE,QAAAqD,EAAS,MAAAgI,CAAM,EAAI/H,GAAe,EACpC,CAAE,OAAAsL,EAAQ,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,GAAc,CAC/C,QAAA1L,EACA,KAAAR,CAAA,CACD,EAEK,CAACmM,EAAgBC,CAAiB,EAAI1O,EAAS,CAAC,EAAK,CAAC,EACtD2O,EAAkB,CAAChC,EAAkB1N,IAAkB,CACrD,MAAAmO,EAAM,CAAC,GAAGqB,CAAc,EAC9BrB,EAAIT,CAAQ,EAAI1N,EAChByP,EAAkBtB,CAAG,CACvB,EAEAtM,GAAU,IAAM,CACTuN,EAAO,QACHC,EAAA,CAAE,IAAK,GAAI,MAAO,IAAM,CAAE,YAAa,GAAO,CACvD,EACC,CAACD,CAAM,CAAC,EAEL,MAAAO,EAAiB9D,EAAM,GAAGxI,CAAI,IAAI+L,EAAO,OAAS,CAAC,SAAU,EAAE,EAGnE,OAAAjN,EAACyN,GAAA,CACC,UAAU,uBACV,aAAW,iCACX,QAAQ,UAER,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAAhO,EAACiO,EAAG,CAAA,MAAO,GAAK,SAAA,EAAE,KAAK,EAAE,IACxBA,EAAG,CAAA,MAAO,GAAK,SAAA,EAAE,OAAO,CAAE,CAAA,CAAA,CAAA,CAC7B,CACF,CAAA,IACCC,GACE,CAAA,SAAA,CAAAZ,EAAO,IAAI,CAACzB,EAAWD,IACrBvL,EAAA2N,GAAA,CAAsB,cAAY,gBACjC,SAAA,CAAAhO,EAACiN,EACC,CAAA,SAAAjN,EAACkC,GAAA,CACC,KAAM,GAAGX,CAAI,IAAIqK,CAAQ,OACzB,aAAa,GACb,QAAA7J,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACkN,GAAA,CACC,SAAU,GAAG3L,CAAI,IAAIqK,CAAQ,OAC7B,UAAU,8BACV,SAAW1N,GAAS0P,EAAgBhC,EAAU1N,CAAI,EAClD,OAAQwP,EAAe9B,CAAQ,EAC/B,QAASuB,GAAc,UACvB,mBAAoB,EAAE,kBAAkB,EACxC,gBAAiB,EAAE,kBAAkB,EACrC,WAAYhL,EAAM,MAClB,SAAWe,GAAM,CACTf,EAAA,SAASe,EAAE,UAAU,EAE3B0K,EAAgBhC,EAAU,EAAK,CACjC,EAEC,SAAAE,GAAkB,IAAKD,GACtB7L,EAACkB,GAAA,CACC,SAAU2K,EAAU,OAAS1J,EAAM,MAEnC,MAAO4J,EAAYF,EAAU,KAAOA,EAAU,IAE7C,SAAAA,EAAU,IAAA,EAHNA,EAAU,GAKlB,CAAA,CAAA,CAAA,CACH,CAAA,EAGN,EACA7L,EAAC2L,GAAA,CACC,KAAApK,EACA,UAAAsK,EACA,SAAAD,EACA,iBAAAE,EACA,UAAAC,CAAA,CACF,IACCkB,EACC,CAAA,SAAAjN,EAACuD,EAAA,CACC,GAAI,GAAGhC,CAAI,iBAAiBqK,CAAQ,GACpC,QAAQ,OACR,UAAU,4BACV,QAAS,IAAM4B,EAAO5B,CAAQ,EAC9B,aAAY,EAAE,QAAQ,EAEtB,WAACuC,GAAgB,CAAA,CAAA,CAAA,CAAA,CAErB,CAAA,CAAA,GApDOtC,EAAU,EAqDnB,CACD,EACD7L,EAACgO,GACC,CAAA,SAAAhO,EAACiN,EACC,CAAA,SAAAjN,EAACuD,EAAA,CACC,aAAY,EAAE,eAAgB,CAAE,MAAO,EAAE,WAAW,EAAG,EACvD,GAAI,GAAGhC,CAAI,aACX,QAAQ,OACR,UAAU,2BACV,QAAS,IAAM,CACbgM,EAAO,CAAE,IAAK,GAAI,MAAO,GAAI,EAC7BI,EAAkB,CAAC,GAAGD,EAAgB,EAAK,CAAC,CAC9C,EACA,OAAOU,GAAe,EAAA,EACtB,WAAY,CAACP,EACb,cAAY,oBAEX,WAAE,eAAgB,CAAE,MAAO,EAAE,WAAW,CAAG,CAAA,CAAA,GAEhD,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,ECzOaQ,GAAyB,CAAC,CACrC,KAAAC,CACF,IAAmC,CAC3B,KAAA,CAAE,EAAA7P,CAAE,EAAIC,EAAe,EACvB,CAAC6P,EAAMC,CAAM,EAAIC,GAAU,EAEjC,OAEIpO,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACuD,EAAA,CACC,cAAY,uBACZ,QAASiL,EACT,QAAQ,YAEP,WAAE,cAAc,CAAA,CACnB,EACAxO,EAACkF,GAAA,CACC,QAAS/E,GAAa,OACtB,OAAQoO,EACR,aAAY9P,EAAE,UAAU,EACxB,SACGiQ,GACC,CAAA,SAAA,CAAA1O,EAACoJ,IAAK,UAAWuF,GAAa,GAAK,SAAAlQ,EAAE,UAAU,EAAE,EAChDuB,EAAAoJ,GAAA,CAAM,SAAE3K,EAAA,qBAAqB,CAAE,CAAA,CAAA,EAClC,EAEF,QAAS+P,EACT,QAAS,CACPxO,EAACuD,EAAA,CACC,cAAY,SACZ,GAAG,eAEH,QAASiL,EAER,WAAE,QAAQ,CAAA,EAHP,QAAA,CAKR,EAEA,SAAAxO,EAACmB,IAAS,SAAQ,GAAC,KAAM,GAAI,MAAOrB,GAAgBwO,CAAI,CAAG,CAAA,CAAA,CAAA,CAC7D,EACF,CAEJ,EChCaM,GAAwC,CAAC,CACpD,IAAAC,EACA,SAAAjD,EACA,YAAAkD,EACA,SAAAlC,CACF,IAAa,CACX,KAAM,CAAChH,EAAUC,CAAW,EAAI5G,EAAkB,EAAK,EACjD,CAAE,EAAAR,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAH,CAAM,EAAIC,GAAS,EACrB,CAAE,SAAAuQ,CAAS,EAAIC,GAAwB,EAG3C,OAAA3O,EAAC6N,GAAgB,CAAA,WAAYtI,EAC3B,SAAA,CAAAvF,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,EACA,WAAYhG,EACZ,SAAU,IAAMC,EAAaoJ,GAAS,CAACA,CAAI,CAAA,CAC7C,CACF,IACChC,EAAG,CAAA,cAAa,eAAeL,EAAS,QAAQ,GAC/C,SAAA5M,EAACkP,GAAA,CACC,GAAIC,GAAoB,CACtB,MAAA5Q,EACA,GAAIwQ,EACJ,eAAgBD,EAAY,QAAQ,KACpC,aAAcA,EAAY,QAAQ,EAAA,CACnC,EAEA,WAAY,QAAQ,IAAA,CAAA,EAEzB,EACC9O,EAAAiN,EAAA,CAAG,GAAI6B,EAAY,QAAQ,YAAA,EACzB,SAAArQ,EAAEqQ,EAAY,QAAQ,YAAY,CAAW,CAChD,CAAA,EACA9O,EAACiN,EAAI,CAAA,SAAAxO,EAAE,GAAGqQ,EAAY,QAAQ,kBAAkB,aAAa,EAAE,CAAE,CAAA,EAChE9O,EAAAiN,EAAA,CACE,SAAY6B,EAAA,SAAWM,GAAe,OACnCxC,EAAS,WAAWhB,CAAQ,GAAG,QAAQ,KAAK,IAAI,EAChD,IACN,EACA5L,EAACiN,GACE,SAAY6B,EAAA,SAAWM,GAAe,MACvCxC,EAAS,WAAWhB,CAAQ,GAAG,QAAQ,OACnCgB,EAAS,SAAShB,CAAQ,EAAE,QAAQ,KAAK,IAAI,EAC7C,GACN,CAAA,CAAA,EACF,EACAvL,EAAC2N,GAAsC,CAAA,WAAYpI,EACjD,SAAA,CAAA5F,EAACiN,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACV,SAAArH,KACEyJ,GACC,CAAA,SAAArP,EAACsP,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAAtP,EAAC0O,GACC,CAAA,SAAA1O,EAACtC,GACE,CAAA,SAAAoR,EAAY,oBAAoB,IAAKS,GACpClP,EAACtC,GACC,CAAA,SAAA,CAAAiC,EAACkP,GAAA,CACC,GAAIM,GAAgB,CAClB,MAAAjR,EACA,GAAIwQ,EACJ,WAAYQ,EAAK,QAAQ,KACzB,SAAUA,EAAK,QAAQ,EAAA,CACxB,EAEA,WAAK,QAAQ,IAAA,CAChB,EAEC9Q,EAAE,gBAAiB,CAClB,OAAQgR,GAAWF,EAAK,MAAgB,CACzC,CAAA,CAAA,GAde,eAelB,CACD,CAAA,CACH,CACF,CAAA,CAAA,GAEJ,CAEJ,CAAA,CAlCO,CAAA,EAAA,SAAS3C,EAAS,QAAQ,EAmCnC,CAAA,CAAA,EAxEUiC,CAyEZ,CAEJ,EC7Faa,GAAgC,CAAC,CAC5C,SAAA9D,EACA,SAAAgB,EACA,gBAAA+C,CACF,IAAa,CACX,KAAM,CAAC/J,EAAUC,CAAW,EAAI5G,EAAkB,EAAK,EACjD,CAAE,EAAAR,CAAE,EAAIC,EAAe,EAG3B,OAAA2B,EAAC6N,GAAM,CAAA,WAAYtI,EACjB,SAAA,CAAAvF,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,EACA,WAAYhG,EACZ,SAAU,IAAMC,EAAaoJ,GAAS,CAACA,CAAI,CAAA,CAC7C,CACF,EACAjP,EAACiN,GAAG,cAAa,eAAeL,EAAS,QAAQ,GAC9C,SAASA,EAAA,UAAU,IACtB,CAAA,EACC5M,EAAAiN,EAAA,CAAG,GAAIL,EAAS,QAAQ,cACtB,SAAEnO,EAAA,GAAGmO,EAAS,QAAQ,YAAa,CAAA,EAAE,EACxC,EACC5M,EAAAiN,EAAA,CACE,SAASL,EAAA,eAAe,OACrBA,EAAS,cAAc,IAAK2C,GAASA,EAAK,IAAI,EAC9C,GACN,CAAA,CAAA,EACF,EACAlP,EAAC2N,GAAsC,CAAA,WAAYpI,EACjD,SAAA,CAAA5F,EAACiN,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAAAjN,EAACqP,IACE,SACCzJ,GAAA5F,EAACsP,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAACjP,EAAAyN,GAAA,CAAM,aAAYrP,EAAE,mBAAmB,EACtC,SAAA,CAACuB,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAExP,EAAA,YAAY,CAAE,CAAA,EACpBuB,EAAAiO,EAAA,CAAI,SAAExP,EAAA,SAAS,CAAE,CAAA,EACjBuB,EAAAiO,EAAA,CAAI,SAAExP,EAAA,kBAAkB,CAAE,CAAA,EAC1BuB,EAAAiO,EAAA,CAAI,SAAExP,EAAA,eAAe,CAAE,CAAA,EACvBuB,EAAAiO,EAAA,CAAI,SAAExP,EAAA,cAAc,CAAE,CAAA,EACvBuB,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC,OAAO,OAAO0B,EAAgB/D,CAAQ,EAAE,QAAQ,EAAE,IACjD,CAACkD,EAAaD,IACZ7O,EAAC4O,GAAA,CAEC,IAAAC,EACA,SAAAjD,EACA,YAAAkD,EACA,SAAAlC,CAAA,EAJKiC,CAAA,CAKP,CAEJ,CACF,CAAA,CAAA,GAGN,CACF,CAAA,CApCO,CAAA,EAAA,SAASjC,EAAS,QAAQ,EAqCnC,CAAA,EACF,CAEJ,EClDA,SAASgD,GACPC,EACAC,EACA,CACA,OAAQA,EAAQ,CACd,IAAK,mBACH,OAAOD,EAAQ,OAAO,CAAC,CAAE,OAAAE,CAAO,IAAMA,IAAW,QAAQ,EAC3D,IAAK,gBACH,OAAOF,EAAQ,OAAO,CAAC,CAAE,OAAAE,CAAO,IAAMA,IAAW,MAAM,EACzD,QACS,OAAAF,CAAA,CAEb,CAEO,MAAMG,GAAU,CAAC,CAAE,eAAAC,EAAgB,QAAA7J,EAAS,KAAA8J,KAAwB,CACnE,KAAA,CAAE,CAAE,EAAIxR,EAAe,EAEvB,CAACyR,EAAoBC,CAAoB,EAAI3B,GAAU,EAEvD,CAACqB,EAAQO,CAAS,EAAIpR,EAAS,KAAiB,EAChD,CAACqR,EAAaC,CAAc,EAAItR,EAAS,EAAE,EAC3C,CAACuR,EAAaC,CAAc,EAAIxR,EAAS,EAAE,EAE3CyR,EAAqB,IAAM,CAC/BH,EAAeC,CAAW,CAC5B,EAEMG,EAAiBC,GAAuC,CACxDA,EAAE,MAAQ,SACOF,EAAA,CAEvB,EAEMG,EAAoBtR,GACxB,IACEqQ,GAAcK,EAAe,QAAUH,CAAM,EAAE,OAC7C,CAAC,CAAE,SAAAlD,CAAS,IAAMA,GAAU,MAAM,SAAS0D,CAAW,GAAK,EAC7D,EACF,CAACL,EAAe,QAASH,EAAQQ,CAAW,CAC9C,EAEMQ,EAAkBb,EAAe,QAAS,SAAW,EACrDc,EAAiBF,EAAkB,SAAW,EAEpD,SACG3H,GACC,CAAA,SAAA,CAAAlJ,EAACgR,GACC,CAAA,SAAA3Q,EAAC4Q,GAAa,CAAA,UAAU,oBACtB,SAAA,CAACjR,EAAAiH,GAAA,CACC,WAACiK,GACC,CAAA,SAAA,CAAClR,EAAAmR,GAAA,CAAe,OAAM,GACpB,SAAAnR,EAACoN,GAAA,CACC,KAAM,iBACN,GAAI,iBACJ,KAAK,SACL,aAAY,EAAE,QAAQ,EACtB,YAAa,EAAE,QAAQ,EACvB,SAAU,CAACvG,EAAQC,IAAQ2J,EAAe3J,CAAG,EAC7C,UAAW6J,CAAA,CAAA,EAEf,IACCQ,GACC,CAAA,SAAAnR,EAACuD,EAAA,CACC,QAAS4B,GAAc,QACvB,aAAY,EAAE,QAAQ,EACtB,QAAS,IAAMuL,EAAmB,EAElC,WAACU,GAAW,CAAA,CAAA,CAAA,CAAA,CAEhB,CAAA,CAAA,CAAA,CACF,CACF,CAAA,IACCnK,GACC,CAAA,SAAAjH,EAACU,GAAA,CACC,cAAY,qBACZ,OAAQyP,EACR,UAAU,wBACV,OAASvP,GACPZ,EAACa,GAAA,CACC,IAAAD,EACA,QAASwP,EACT,WAAYD,EACZ,MAAO,CAAE,MAAO,OAAQ,EAEvB,SAAAL,CAAA,CACH,EAEF,SAAU,CAAChP,EAAGC,IAAU,CACtBsP,EAAUtP,CAAsB,EACXqP,EAAA,EACbhK,EAAA,CACV,EACA,SAAU0J,EAEV,WAAC9O,GACC,CAAA,SAAA,CAAAhB,EAACkB,GAAA,CACC,cAAY,qBACZ,MAAO,MAEN,WAAE,YAAY,CAAA,CACjB,EACAlB,EAACkB,GAAA,CACC,cAAY,uBACZ,MAAO,mBAEN,WAAE,cAAc,CAAA,CACnB,EACAlB,EAACkB,GAAA,CACC,cAAY,qBACZ,MAAO,gBAEN,WAAE,YAAY,CAAA,CAAA,CACjB,CACF,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACC,CAAC6P,GACA1Q,EAACyN,IAAM,aAAY,EAAE,mBAAmB,EACtC,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,UAAU,CAAE,CAAA,EAClBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,gBAAgB,CAAE,CAAA,EACxBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,QAAQ,CAAE,CAAA,EACjBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC4C,EAAkB,IAAI,CAACjE,EAAUhB,IAChC5L,EAAC0P,GAAA,CAEC,SAAA9D,EACA,SAAAgB,EACA,gBAAiBqD,EAAe,OAAA,EAH3BrE,CAKR,CAAA,CAAA,EACH,GAEAmF,GAAkBD,IAEhBzQ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqR,GAAQ,EAAA,EACTrR,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAAA,CAC/C,EACF,EAEDnH,EAAAI,GAAA,CACC,SAACC,EAAA+J,GAAA,CAAkB,KAAK,gBACtB,SAAA,CAACpK,EAAAuD,EAAA,CAAO,cAAY,qBAAqB,GAAG,WAAW,QAAS2M,EAC7D,SAAE,EAAA,MAAM,CACX,CAAA,EAAU,IACVlQ,EAACuD,EAAA,CACC,cAAY,2BACZ,GAAG,iBACH,QAAQ,YACR,QAAS6C,EAER,WAAE,YAAY,CAAA,CACjB,EAAU,IACTpG,EAAAqO,GAAA,CAAuB,KAAM4B,EAAe,GAAM,CAAA,CAAA,CAAA,CACrD,CACF,CAAA,CAAA,EACF,CAEJ,EC9HaqB,GAAyBnU,GAAiB,CAC/C,KAAA,CAAE,UAAA6M,CAAU,EAAIC,GAAU,EAE5B,OAACD,EAAU,YAAY,EAIpBhK,EAACuR,GAA8B,CAAA,GAAGpU,CAAO,CAAA,EAHvC6C,EAACwR,GAAiB,CAAA,iBAAiB,YAAa,CAAA,CAI3D,EAEMD,GAA+B,CAAC,CAAE,OAAA7I,KAAoB,CACpD,KAAA,CAAE,YAAArK,CAAY,EAAIC,EAAe,EAEjCgG,EAAOC,GAA4B,CAAE,KAAM,WAAY,EACvD,CACJ,MAAA9B,EACA,QAAAgP,EACA,UAAW,CAAE,QAAA/M,CAAQ,CAAA,EACnBJ,EACE,CAAE,EAAA7F,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAkG,CAAS,EAAIC,GAAU,EACzBtG,EAAQC,GAAS,EACjB,CAACkT,EAAYC,CAAa,EAAI1S,EAAS,EAAK,EAC5C,CAAC2S,EAAqBC,CAAsB,EAAI5S,EAAS,EAAK,EAC9D,CAAC8M,EAAW+F,CAAY,EAAI7S,EAAmC,CAAA,CAAE,EACjE,CAAC8S,EAAQC,CAAS,EAAI/S,EAAgC,CAAA,CAAE,EACxD,CAACgR,EAAgBgC,CAAiB,EACtChT,EAAmC,EAC/B,CAACiT,EAAaC,CAAc,EAAIlT,EAA+B,CAAA,CAAE,EAEvES,GACE,IAAMrB,EAAY,MAAM,KAAK,EAC5B+T,GAAU,CACTD,EAAeC,CAAK,CACtB,EACA,CAAA,CACF,EAEA1S,GACE,IACE,QAAQ,IAAI,CACVrB,EAAY,QAAQ,cAAc,CAChC,GAAIqK,EAAO,EAAA,CACZ,EACDrK,EAAY,QAAQ,cAAc,CAChC,GAAIqK,EAAO,EACZ,CAAA,CAAA,CACF,EACH,CAAC,CAACqD,EAAWgG,CAAM,IAAM,CACvBD,EAAa/F,CAAS,EACtBiG,EAAUD,CAAM,CAClB,EACA,CAAA,CACF,EAEA,MAAMM,EAAW,SAAY,CACvB,GAAA,CAAE,MAAMZ,IACV,OAEI,MAAAa,EAAahO,EAAK,UAAU,EAC5BiO,EAAOC,GAAgBF,EAAW,SAA2B,EAC7DG,EAA8B,CAClC,QAASH,EAAW,SAAW,CAAC,EAChC,SAAUA,EAAW,OAAO,GAC5B,OAAQA,EAAW,KAAM,CAAC,EAC1B,UAAWvG,EACR,OAAQa,GAAa,OAAO,KAAK2F,CAAI,EAAE,SAAS3F,EAAS,IAAK,CAAC,EAC/D,IAAK8F,IAAO,CACX,GAAGA,EACH,OAAQA,EAAE,QAAQ,OAAQC,GACxB,OAAO,OAAOJ,CAAI,EACf,QAASrP,GAAMA,CAAC,EAChB,SAASyP,EAAE,IAAK,CAAA,CACrB,EACA,EACJ,aAAc,GACd,QAAS,CACP,WAAY,OAAO,YACjBL,EAAW,QAAQ,WAChB,OAAQ/C,GAASA,EAAK,KAAOA,EAAK,QAAU,EAAE,EAC9C,IAAI,CAAC,CAAE,IAAArJ,EAAK,MAAAnF,KAAY,CAACmF,EAAKnF,CAAK,CAAC,CAAA,CACzC,CAEJ,EAEI,GAAA,CACI,MAAA6R,EAAa,MAAMvU,EAAY,QAAQ,iBAC3C,CAAE,GAAIqK,EAAO,GAAK,MAAOnK,EAAM,KAAM,EACrCkU,CACF,EAEAR,EAAkBW,CAAU,QACrB3N,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CAAA,CAEnC,EAEA,OAAIgL,EAEAjQ,EAACgQ,GAAA,CACC,eAAAC,EACA,QAASoC,EACT,KAAM,IAAMJ,EAAkB,MAAS,CAAA,CACzC,EAKDjS,EAAAkJ,GAAA,CACC,SAAC7I,EAAA+E,GAAA,CAAc,GAAGd,EAChB,SAAA,CAAAjE,EAACwS,GACC,CAAA,SAAA,CAAC7S,EAAAxC,GAAA,CACC,WAACsV,GAAM,CAAA,aAAa,KAAM,SAAErU,EAAA,qBAAqB,EAAE,CACrD,CAAA,IACCsU,GACC,CAAA,SAAA1S,EAACyC,IAAW,aAAY,GAAC,KAAK,eAC5B,SAAA,CAAA9C,EAACgT,GAAA,CACC,KAAK,SACL,MAAM,SACN,SAAU,aACV,aAActK,EAAO,QAAA,CACvB,EACA1I,EAACiT,GAAA,CACC,KAAK,OACL,MAAM,QACN,SAAUxU,EAAE,YAAY,EACxB,aAAc,CAAC,EACf,QAAQ,YACR,WAAU,EAAA,CACZ,EACAuB,EAAC+D,EAAA,CACC,KAAK,UACL,MAAOtF,EAAE,OAAO,EAChB,UAAWA,EAAE,WAAW,EACxB,QAAQ,iBACR,gBAAiBA,EAAE,aAAa,EAChC,WAAY,CACV,aAAc,CAAC,EACf,MAAO,CACL,SAAU,EAAA,CAEd,EACA,QAASyT,EAAY,IAAKgB,GAASA,EAAK,IAAK,CAAA,CAAA,CAC/C,CAAA,CACF,CACF,CAAA,CAAA,EACF,IACCL,GACC,CAAA,SAAA,CAAC7S,EAAAxC,GAAA,CACC,WAACsV,GAAM,CAAA,aAAa,KAAM,SAAErU,EAAA,aAAa,EAAE,CAC7C,CAAA,IACCsU,GACC,CAAA,SAAA1S,EAACyC,IAAW,aAAY,GAAC,KAAK,eAC5B,SAAA,CAAA9C,EAACQ,EAAA,CACC,MAAO/B,EAAE,qBAAqB,EAC9B,QAAQ,sBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,yBAAyB,EACrC,aAAa,qBAAA,CACf,EAGF,SAAAuB,EAACqI,GAAA,CACC,GAAG,yBACH,MAAO5J,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWmT,EACX,SAAU,CAAC/K,EAAQC,IAAQ+K,EAAuB/K,CAAG,EACrD,aAAYrI,EAAE,qBAAqB,CAAA,CAAA,CACrC,CACF,EACEmT,EAuBEvR,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqD,EAAA,CACC,KAAK,QACL,MAAO5E,EAAE,cAAc,EACvB,UAAWA,EAAE,kBAAkB,EAC/B,MAAO,CAAE,SAAUA,EAAE,UAAU,CAAE,CAAA,CACnC,EACAuB,EAAC+D,EAAA,CACC,KAAK,aACL,MAAOtF,EAAE,YAAY,EACrB,UAAWA,EAAE,cAAc,EAC3B,WAAY,CACV,aAAc,CAAA,CAChB,EACA,QAAQ,iBACR,QAASsT,EAAO,IAAKY,GAAMA,EAAE,IAAK,CAAA,CAAA,CACpC,EACF,EAtCA3S,EAACQ,EAAA,CACC,MAAO/B,EAAE,oBAAoB,EAC7B,GAAG,qBACH,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,0BAA0B,EACtC,aAAc,oBAAA,CAChB,EAEF,QAAQ,qBAER,SAAAuB,EAACqN,GAAA,CACC,iBAAkBtB,EAAU,IAAoBwD,IAAU,CACxD,KAAMA,EAAK,KACX,IAAKA,EAAK,GAAA,EACV,EACF,UAAAxD,EACA,KAAK,WAAA,CAAA,CACP,CAAA,EAsBJ/L,EAAC4G,GAAA,CACC,WAAYnI,EAAE,gBAAgB,EAC9B,SAAU,IAAMkT,EAAc,CAACD,CAAU,EACzC,WAAAA,EAEA,SAAA1R,EAACQ,EAAA,CACC,MAAO/B,EAAE,sBAAsB,EAC/B,GAAG,uBACH,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,0BAA0B,EACtC,aAAc,sBAAA,CAChB,EAEF,QAAQ,uBAER,SAAAuB,EAACqN,GAAA,CACC,iBAAkBb,GAClB,KAAK,oBAAA,CAAA,CACP,CAAA,CACF,CAAA,CACF,CAAA,CACF,CACF,CAAA,CAAA,EACF,IACClJ,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,cAAY,qBACZ,GAAG,qBACH,UAAU,gBACV,WAAY,CAACmB,EACb,QAAS,IAAM2N,EAAS,EAEvB,WAAE,UAAU,CAAA,CACf,EACArS,EAACuD,EAAA,CACC,cAAY,uBACZ,GAAG,uBACH,UAAU,gBACV,QAAQ,OACR,QAAS,IAAMd,EAAM,EAEpB,WAAE,QAAQ,CAAA,CAAA,CACb,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAEJ,EClUa0Q,GAAsB,IAAM,CACjC,KAAA,CAAE,YAAA9U,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAqQ,CAAS,EAAIC,GAAwB,EACvC,CAAE,SAAArK,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAACuO,EAAMC,CAAO,EAAIpU,EAAiB,EACnC,CAACqU,EAAsBC,CAAuB,EAClDtU,EAAuC,EAEzCS,GACE,IACErB,EAAY,QAAQ,eAAe,CACjC,GAAI0Q,CAAA,CACL,EAEFyE,GAAgB,CACfH,EAAQ,KAAK,UAAUG,EAAa,KAAM,CAAC,CAAC,EAC5CD,EAAwBC,CAAW,CACrC,EACA,CAAA,CACF,EAEA,MAAMC,EAAoB,IAAM,CAC1B,GAAA,CACFvT,GAAA,OACE,IAAI,KAAK,CAACJ,GAAgBwT,CAAoB,CAAC,EAAG,CAChD,KAAM,kBAAA,CACP,EACD,wBACF,EACA3O,EAASlG,EAAE,0BAA0B,EAAGuG,EAAa,OAAO,QACrDC,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAAA,CAE5C,EAEA,OAAKmO,IAKFlK,GACC,CAAA,SAAA7I,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,uBACL,UAAU,gBAEV,SAAA,CAAA9C,EAACyK,GAAA,CACC,KAAK,cACL,MAAOhM,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,EAC9B,kBAAkB,WAClB,aAAc2U,EACd,SAAQ,GACR,KAAM,EAAA,CACR,IACC9P,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,cAAY,gCACZ,QAAS,IAAMkQ,EAAkB,EAEhC,WAAE,UAAU,CAAA,CACf,EACAzT,EAACuD,EAAA,CACC,cAAY,4BACZ,QAAQ,YACR,QAAS,SAAY,CACf,GAAA,CACI,MAAA,UAAU,UAAU,UAAU6P,CAAK,EACzCzO,EAASlG,EAAE,QAAQ,EAAGuG,EAAa,OAAO,QACnCC,EAAO,CACdL,EAAS,YAAaK,CAAK,CAAA,CAE/B,EAEC,WAAE,MAAM,CAAA,CAAA,CACX,CACF,CAAA,CAAA,CAAA,CAAA,EAEJ,IA1CQyO,GAAgB,EAAA,CA4C5B,EC3FO,SAASC,GAAqBxW,EAAkC,CAC9D,OAAA6C,EAAC4T,GAAuB,CAAA,GAAGzW,CAAO,CAAA,CAC3C,CAMO,SAASyW,GAAyB,CACvC,KAAArS,EACA,MAAAsS,EACA,QAAAlM,EACA,KAAAmM,CACF,EAAkC,CAC1B,KAAA,CAAE,EAAArV,CAAE,EAAIC,EAAe,EAC7B,SACGqV,GACC,CAAA,SAAA,CAAC/T,EAAAgU,GAAA,CAAqB,SAAEvV,EAAA8C,CAAI,CAAE,CAAA,IAC7B0S,GACE,CAAA,SAAA,CAAOJ,GAAA,IAAKK,GAAY,CACvB,MAAMnT,EACJ,OAAOmT,GAAY,SAAWA,EAAUvM,EAASuM,CAAO,EAC1D,OAAOJ,EACJ9T,EAAAkP,GAAA,CAAiB,GAAI4E,EAAKI,CAAY,EAAG,UAAU,gBACjD,SAAAnT,CAAA,EADQA,CAEX,EAEAf,EAAC,QAAiB,UAAU,gBACzB,YADQe,CAEX,CAAA,CAEH,EACA8S,GAAO,SAAW,KAAM,IAAG,CAAA,SAAApV,EAAE,MAAM,CAAE,CAAA,CAAA,CACxC,CAAA,CAAA,EACF,CAEJ,CC3BA,MAAM0V,GAAc,CAAC,CACnB,eAAAC,EACA,SAAAC,EAAW,GACX,SAAAtF,CACF,IAAwB,CAChB,KAAA,CAAE,CAAE,EAAIrQ,EAAe,EACvB,CAAE,MAAAH,CAAM,EAAIC,GAAS,EACrB8V,EAAWC,GAAY,EAE3B,OAAAvU,EAACuD,EAAA,CACC,cAAa,UAAU6Q,CAAc,GACrC,UACEC,EAAW,sCAAwC,eAErD,QAAQ,YACR,QAAS,IACP,CAACA,GACDC,EAASE,GAAgB,CAAE,MAAAjW,EAAO,GAAIwQ,EAAU,eAAAqF,CAAe,CAAC,CAAC,EAGlE,SAAE,EAAA,SAAS/K,GAAY+K,CAAc,CAAC,iBAAiB,CAAA,CAC1D,CAEJ,EAEMK,GAAqB,CAAC,CAC1B,eAAAL,EACA,SAAAC,EACA,GAAGlX,CACL,IAAwB,CAChB,KAAA,CAAE,CAAE,EAAIuB,EAAe,EACtB,OAAA2V,EACJrU,EAAA0U,GAAA,CAAQ,QAAS,EAAE,KAAKrL,GAAY+K,CAAc,CAAC,YAAY,EAC9D,SAAApU,EAACmU,GAAA,CACE,GAAGhX,EACJ,SAAAkX,EACA,eAAAD,CAAA,GAEJ,EAEApU,EAACmU,GAAA,CACE,GAAGhX,EACJ,SAAAkX,EACA,eAAAD,CAAA,CACF,CAEJ,EAQaO,GAAwB,CAAC,CACpC,SAAA5F,EACA,kBAAA6F,EACA,eAAAC,CACF,IAAkC,CAC1B,KAAA,CAAE,CAAE,EAAInW,EAAe,EAC7B,OACG2B,EAAAyU,GAAA,CAAW,cAAY,cAAc,QAAQ,KAC5C,SAAA,CAAA9U,EAAC+U,GAAA,CACC,UAAW/U,EAAAgD,EAAA,CAAG,SAAE,EAAA,kBAAkB,EAAE,EACpC,KAAMhD,EAACgV,GAAe,CAAA,KAAM5G,EAAgB,CAAA,EAC5C,aAAa,IAAA,CACf,EACCpO,EAAAiV,GAAA,CAAgB,SAAE,EAAA,6BAA6B,CAAE,CAAA,IACjDC,GACC,CAAA,SAAA,CAAAlV,EAACyU,GAAA,CACC,eAAe,WACf,SAAUG,EACV,SAAA7F,CAAA,CACF,IACC,KAAG,EAAA,EACJ/O,EAACyU,GAAA,CACC,eAAe,QACf,SAAUI,EACV,SAAA9F,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,CAEJ,ECnGaoG,GAAY,CAAC,CAAE,MAAAtB,KAA4B,CAChD,KAAA,CAAE,EAAApV,CAAE,EAAIC,EAAe,EAE7B,MAAI,CAACmV,GAASA,EAAM,QAAU,EACrB,KAED7T,EAAAoV,GAAA,CAAM,MAAM,OAAQ,SAAE3W,EAAA,OAAQ,CAAE,MAAOoV,EAAM,OAAS,CAAE,CAAC,CAAE,CAAA,CACrE,ECkBawB,GAAiB,CAAC,CAC7B,MAAAC,EACA,OAAAC,EACA,SAAAC,EACA,KAAA7L,CACF,IAA2B,CACnB,KAAA,CAAE,EAAAlL,CAAE,EAAIC,EAAe,EACvB4F,EAAOC,GAAoB,CAAE,KAAM,WAAY,EAC/C,CACJ,MAAA9B,EACA,UAAW,CAAE,QAAAgC,CAAQ,EACrB,aAAAD,CAAA,EACEF,EAEE,CAACpG,EAAMsQ,CAAM,EAAIC,GAAU,EAE3BgH,EAAUnR,GAAqB,CAC5BkK,EAAA,EACPgH,EAASlR,CAAI,CACf,EAEA,OAAAvE,GAAU,IAAM0C,EAAM8S,CAAM,EAAG,CAACA,CAAM,CAAC,EAGrCvV,EAAC0V,GAAA,CACC,aAAclH,EACd,OAAS5N,GACPP,EAACQ,GAAA,CACC,cAAY,0BACZ,IAAAD,EACA,QAAS4N,EACT,UAAU,kDAET,SAAA,CAAS7E,IAAA,YAAclL,EAAE,mCAAmC,EAC5DkL,IAAS,UAAYlL,EAAE,iCAAiC,EACxDkL,IAAS,cAAgBlL,EAAE,qCAAqC,CAAA,CAAA,CACnE,EAEF,OAAQP,EAER,SAAA8B,EAACoF,GAAc,CAAA,GAAGd,EAChB,SAAAjE,EAACD,GAAA,CACC,aAAY,GACZ,UAAU,uDACV,SAAUoE,EAAaiR,CAAM,EAE7B,SAAA,CAAAzV,EAACqD,GAAY,KAAK,OAAO,MAAO5E,EAAE,MAAM,EAAG,EAC1CkL,IAAS,YAENtJ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqD,GAAY,KAAK,OAAO,MAAO5E,EAAE,MAAM,EAAG,IAC1C4E,EAAY,CAAA,KAAK,OAAO,MAAO5E,EAAE,MAAM,EAAG,IAC1C4E,EAAY,CAAA,KAAK,QAAQ,MAAO5E,EAAE,OAAO,CAAG,CAAA,CAAA,EAC/C,EAEDkL,IAAS,YAAcA,IAAS,UAC/B3J,EAACqD,EAAY,CAAA,KAAK,WAAW,MAAO5E,EAAE,UAAU,CAAG,CAAA,EAEpDkL,IAAS,UAAa3J,EAAAqD,EAAA,CAAY,KAAK,QAAQ,MAAO5E,EAAE,OAAO,EAAG,EAClEkL,IAAS,YACR3J,EAAC+D,EAAA,CACC,KAAK,OACL,MAAOtF,EAAE,MAAM,EACf,WAAY,CACV,aAAc,EAChB,EACA,QAAS,CACP,CAAE,IAAK,GAAI,MAAOA,EAAE,UAAU,CAAE,EAChC,IAAI6W,GAAS,CAAA,GAAI,IAAI,CAAC,CAAE,KAAA3L,EAAM,KAAApI,MAAY,CACxC,IAAKoI,EACL,MAAOpI,CAAA,EACP,CAAA,CACJ,CACF,IAED+B,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,QAAQ,UACR,KAAK,SACL,cAAY,aACZ,WAAY,CAACkB,EAEZ,WAAE,QAAQ,CAAA,CACb,EACAzE,EAACuD,EAAA,CACC,QAAQ,OACR,cAAY,aACZ,QAAS,IAAMiS,EAAS,EAAE,EAEzB,WAAE,OAAO,CAAA,CAAA,CACZ,CACF,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAEJ,ECrEMG,GAA6B,CAAC,CAClC,IAAAC,CACF,IAKOvV,EAAA2C,EAAA,CAAA,SAAA,CAAI4S,EAAA,qBAAqB,CAAC,GAAG,MAAQ,IAAK,IAC1C5V,EAAAmV,GAAA,CAAU,MAAOS,EAAI,kBAAoB,CAAA,CAAA,EAC5C,EAISC,GAA2B,CAAC,CACvC,SAAA9G,EACA,WAAA+G,EAAa,EACf,IAAwB,CAChB,KAAA,CAAE,YAAAzX,CAAY,EAAIC,EAAe,EAEjC,CAAE,CAAE,EAAII,EAAe,EACvB4V,EAAWC,GAAY,EACvB,CAAE,SAAA5P,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,CAAM,EAAIC,GAAS,EAErB,CAACuX,EAAaC,CAAc,EAChC/W,EAA2C,EACvC,CAACgX,EAAoBC,CAAqB,EAC9CjX,EAA+B,EAC3B,CAACkX,EAAiBC,CAAkB,EACxCnX,EAAyC,EACrC,CAACoX,EAAgBC,CAAiB,EAAIrX,EAGzC,EACG,CAACsX,EAAYC,CAAY,EAAI/H,GAAU,EACvC,CAAC8G,EAAQkB,CAAS,EAAIxX,EAAqB,CAAA,CAAE,EAE7C,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACuD,EAAKiN,CAAM,EAAIzX,EAAS,EAAE,EAC3B,CAACuK,EAAOmN,CAAQ,EAAI1X,EAAS,CAAC,EAEpCS,GACE,SAAY,CACV,MAAMqW,EAAc,MAAM1X,EAAY,QAAQ,gBAAgB,CAC5D,MAAAmL,EACA,IAAKC,EAAM,EACX,GAAIsF,EACJ,GAAGwG,CAAA,CACJ,EAED,OAAO,MAAM,QAAQ,IACnBQ,EAAY,IAAI,MAAOa,IAAe,CACpC,MAAMC,EACJ,MAAMxY,EAAY,QAAQ,sBAAsB,CAC9C,GAAI0Q,EACJ,aAAc6H,GAAW,EAAA,CAC1B,EAEI,MAAA,CACL,GAAGA,GACH,mBAAAC,EACA,WAAY,EACd,CACD,CAAA,CACH,CACF,EACAb,EACA,CAAC9P,EAAKqP,EAAQ/L,EAAOC,CAAG,CAC1B,EAEA/J,GACE,SAAY,CACV,MAAMoX,EAAS,CACb,MAAO,EACP,IAAK,CACP,EACM,CAACC,GAAUhL,EAAWgG,CAAM,EAAI,MAAM,QAAQ,IAAI,CACtD1T,EAAY,QAAQ,oBAAoB,CACtC,GAAI0Q,CAAA,CACL,EACD1Q,EAAY,QAAQ,cAAc,CAAE,GAAGyY,EAAQ,GAAI/H,EAAU,EAC7D1Q,EAAY,QAAQ,cAAc,CAAE,GAAGyY,EAAQ,GAAI/H,CAAU,CAAA,CAAA,CAC9D,EACM,MAAA,CACL,SAAUgI,GAAS,OAChB7O,IAAMA,GAAE,OAAS,YAAcA,GAAE,OAAS,OAC7C,EACA,UAAW6D,EAAU,SAAW,EAChC,OAAQgG,EAAO,SAAW,CAC5B,CACF,EACA,CAAC,CAAE,SAAAgF,EAAU,UAAAhL,GAAW,OAAAgG,KAAa,CACnCqE,EAAmBW,CAAQ,EACTT,EAAA,CAAE,UAAAvK,GAAW,OAAAgG,EAAQ,CACzC,EACA,CAAA,CACF,EAEA,KAAM,CAACiF,EAAoBC,CAAa,EAAIvQ,GAAiB,CAC3D,SAAU,mBACV,WAAY,EAAE,0BAA2B,CACvC,WAAYuP,GAAoB,IAAA,CACjC,EACD,sBAAuB9Q,GAAc,OACrC,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAA9G,EAAY,QAAQ,cAAc,CACtC,GAAI0Q,EACJ,KAAMkH,GAAoB,KAC1B,aAAcA,GAAoB,EAAA,CACnC,EACDtR,EAAS,EAAE,0BAA0B,EAAGK,EAAa,OAAO,EACpDoB,EAAA,QACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAAA,CAC1C,CACF,CACD,EAED,GAAI,CAAC8Q,EACH,SAAQrC,GAAgB,EAAA,EAGpB,MAAAwD,EAASnB,EAAY,SAAW,EAChCoB,EAAY,OAAO,KAAK5B,CAAM,EAAE,SAAW,EACjD,OACGlV,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,cACrC,SAAA,CAAAlJ,EAACiX,EAAc,EAAA,GACb,CAACC,GAAUC,IACXnX,EAACoX,GAAA,CACC,MAAOrB,EAAY,OACnB,MAAAvM,EACA,IAAAC,EACA,YAAakN,EACb,gBAAiBA,EACjB,gBAAiB,CAACnN,EAAOC,KAAQ,CAC/BkN,EAASnN,CAAK,EACdkN,EAAOjN,EAAG,CACZ,EACA,YAEIpJ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACqV,GAAA,CACC,MAAOc,EACP,OAAAZ,EACA,SAAUkB,EACV,KAAK,YAAA,CAAA,EAET,IACCxP,GACC,CAAA,SAAAjH,EAAC0V,GAAA,CACC,aAAcc,EACd,OAAS5V,GACPZ,EAACa,GAAA,CACC,IAAAD,EACA,QAAS4V,EACT,WAAAV,EACA,QAAQ,UACR,cAAY,2BAEX,WAAE,kBAAkB,CAAA,CACvB,EAEF,OAAQS,EAER,WAACc,GACC,CAAA,SAAA,CAAArX,EAACsX,GAAA,CACC,cAAY,kBACZ,WAAYxB,GAAcO,GAAgB,UAC1C,UAAU,SACV,QAAS,IACP/B,EACEE,GAAgB,CACd,MAAAjW,EACA,GAAIwQ,EACJ,eAAgB,UACjB,CAAA,CACH,EAGD,WAAE,+BAA+B,CAAA,CACpC,IACCsC,GAAQ,EAAA,EACThR,EAACiX,GAAA,CACC,cAAY,eACZ,WAAYxB,GAAcO,GAAgB,OAC1C,UAAU,SACV,QAAS,IACP/B,EACEE,GAAgB,CACd,MAAAjW,EACA,GAAIwQ,EACJ,eAAgB,OACjB,CAAA,CACH,EAGD,SAAA,CAAA,EAAE,4BAA4B,EAC9BsH,GAAgB,QACfrW,EAACuX,GAAA,CACC,UAAU,gBACV,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,MAAO,EAAE,mBAAmB,CAAA,CAAA,CAC9B,CAAA,CAAA,CAEJ,CACF,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAGD,SAAA,CAACL,GACC7W,EAAAyN,GAAA,CAAM,aAAY,EAAE,WAAW,EAAG,QAAQ,UACzC,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,kBAAkB,CAAE,CAAA,EAC1BjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,aAAa,CAAE,CAAA,EACtBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC8H,EAAY,IAAI,CAACa,EAAYhL,KAC3BvL,EAAA6N,GAAA,CAA0B,WAAY0I,EAAW,WAChD,SAAA,CAAAvW,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,GACA,WAAYgL,EAAW,WACvB,SAAU,CAAC9V,EAAG8K,IAAa,CACzB,MAAM4L,GAAOzB,EAAY,IAAI,CAAC7N,GAAGuP,IAC/BA,IAAU7L,EACN,CAAE,GAAG1D,GAAG,WAAY,CAACA,GAAE,YACvBA,EACN,EACA8N,EAAewB,EAAI,CAAA,CACrB,CACF,CACF,IACCvK,EAAG,CAAA,cAAa,eAAe2J,EAAW,IAAI,GAC7C,SAAA5W,EAACkP,GAAA,CACC,GAAIC,GAAoB,CACtB,MAAA5Q,EACA,GAAIwQ,EACJ,eAAgB6H,EAAW,KAC3B,aAAcA,EAAW,EAAA,CAC1B,EAEA,SAAWA,EAAA,IAAA,CAAA,EAEhB,EACA5W,EAACiN,EAEG,CAAA,SAAAkJ,GAAiB,KAAMjO,GAAMA,EAAE,OAAS0O,EAAW,IAAI,GACnD,IAER,CAAA,IACC3J,EACC,CAAA,SAAAjN,EAAC2V,GAA2B,CAAA,IAAKiB,CAAY,CAAA,EAC/C,EACC5W,EAAAiN,EAAA,CAAI,SAAW2J,EAAA,aAAe,IAAI,EACnC5W,EAACiN,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAO,EAAE,QAAQ,EACjB,QAAS,SAAY,CACnBiJ,EAAsBU,CAAU,EACbI,EAAA,CAAA,CACrB,CACF,CACF,CACF,CAAA,CACD,EACH,EACA3W,EAAC2N,GAAA,CAEC,WAAY4I,EAAW,WAEvB,SAAA,CAAA5W,EAACiN,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAACjN,EAAAqP,GAAA,CACE,WAAW,YACVrP,EAACsP,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAAtP,EAAC4T,GAAA,CACC,KAAK,mBACL,MAAOgD,EAAW,mBAClB,QAAU1O,GAAMA,EAAE,KAClB,KAAOA,GACLsH,GAAgB,CACd,GAAIT,EACJ,MAAAxQ,EACA,SAAU2J,EAAE,GACZ,WAAYA,EAAE,IACf,CAAA,CAAA,CAAA,CAEL,GAGN,CACF,CAAA,CAAA,CAAA,EA3BK,SAAS0O,EAAW,EAAE,EAAA,CA4B7B,CAjFU,EAAAA,EAAW,EAkFvB,CACD,CAAA,CACH,CAAA,CAAA,CAEJ,EAEDM,GAAU,CAACC,GACVnX,EAAC2U,GAAA,CACC,SAAA5F,EACA,kBAAmB,CAAC+G,GAAcO,GAAgB,UAClD,eAAgB,CAACP,GAAcO,GAAgB,MAAA,CACjD,EAEDa,GAAUC,GACTnX,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAAA,CAC/C,EAEJ,CAEJ,ECpVMuQ,GAA4B,CAAC,CACjC,IAAA9B,CACF,IAKOvV,EAAA2C,EAAA,CAAA,SAAA,CAAI4S,EAAA,oBAAoB,CAAC,GAAG,KAAM,IAClC5V,EAAAmV,GAAA,CAAU,MAAOS,EAAI,iBAAmB,CAAA,CAAA,EAC3C,EAIS+B,GAAwB,CAAC,CACpC,SAAA5I,EACA,WAAA+G,EAAa,EACf,IAAqB,CACb,KAAA,CAAE,YAAAzX,CAAY,EAAIC,EAAe,EAEjC,CAAE,CAAE,EAAII,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,CAAM,EAAIC,GAAS,EACrB8V,EAAWC,GAAY,EAEvB,CAACwC,EAAUa,CAAW,EAAI3Y,EAA2C,EACrE,CAAC4Y,EAAgBC,CAAiB,EACtC7Y,EAAyC,EACrC,CAACkX,EAAiBC,CAAkB,EACxCnX,EAAyC,EAErC,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACuD,EAAKiN,CAAM,EAAIzX,EAAS,EAAE,EAC3B,CAACuK,EAAOmN,CAAQ,EAAI1X,EAAS,CAAC,EAC9B,CAACsW,EAAQkB,CAAS,EAAIxX,EAAqB,CAAA,CAAE,EAC7C,CAAC8Y,EAAW5Z,CAAY,EAAIsQ,GAAU,EAE5C/O,GACE,SAAY,CACV,MAAMqX,EAAW,MAAM1Y,EAAY,QAAQ,aAAa,CACtD,MAAAmL,EACA,IAAKC,EAAM,EACX,GAAIsF,EACJ,WAAY,QACZ,GAAGwG,CAAA,CACJ,EAEM,OAAA,MAAM,QAAQ,IAAI,CACvBlX,EAAY,QAAQ,oBAAoB,CAAE,GAAI0Q,EAAU,EACxD,IAAIgI,GAAY,CAAA,GAAI,IAAI,MAAOiB,GAAW,CACxC,MAAMC,EACJ,MAAM5Z,EAAY,QAAQ,sBAAsB,CAC9C,GAAI0Q,EACJ,SAAUiJ,EAAO,EAAA,CAClB,EAEI,MAAA,CACL,GAAGA,EACH,kBAAAC,EACA,WAAY,EACd,CACD,CAAA,CAAA,CACF,CACH,EACA,CAAC,CAAC3Q,EAAcyP,GAAAA,CAAQ,IAAM,CAC5BX,EACE9O,EAAU,OAAQY,GAAMA,EAAE,OAAS,YAAcA,EAAE,OAAS,OAAO,CACrE,EACA0P,EAAYb,CAAQ,CACtB,EACA,CAAC7Q,EAAKqP,EAAQ/L,EAAOC,CAAG,CAC1B,EAEA,KAAM,CAACuN,EAAoBC,CAAa,EAAIvQ,GAAiB,CAC3D,SAAU,eACV,SAEKrG,EAAA2C,EAAA,CAAA,SAAA,CAAA,EAAE,qBAAqB,EACvB6U,GAAgB,mBACfA,EAAe,kBAAkB,OAAS,GACxC7X,EAACuX,GAAA,CACC,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,UAAU,IACV,MAAO,EAAE,qBAAqB,EAC9B,UAAU,gBAEV,WAAC,IAAE,CAAA,UAAU,gBACV,SAAeM,EAAA,kBAAkB,IAAKG,GACpChY,EAAA,SAAA,CAAuB,UAAU,gBAC/B,SAAAgY,EAAO,MADGA,EAAO,EAEpB,CACD,CACH,CAAA,CAAA,CAAA,CACF,EAEN,EAEF,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAA3Z,EAAY,QAAQ,UAAU,CAClC,GAAI0Q,EACJ,SAAU8I,GAAgB,EAAA,CAC3B,EACDlT,EAAS,EAAE,sBAAsB,EAAGK,EAAa,OAAO,EAChDoB,EAAA,QACDnB,EAAO,CACdL,EAAS,qBAAsBK,CAAK,CAAA,CACtC,CACF,CACD,EAED,GAAI,CAAC8R,EACH,SAAQrD,GAAgB,EAAA,EAGpB,MAAAwD,EAASH,EAAS,SAAW,EAC7BI,EAAY,OAAO,KAAK5B,CAAM,EAAE,SAAW,EACjD,OACGlV,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,cACrC,SAAA,CAAAlJ,EAACiX,EAAc,EAAA,GACb,CAACC,GAAUC,IAER9W,EAAA2C,EAAA,CAAA,SAAA,CACC+U,GAAA/X,EAACkY,GAAA,CACC,gBAAA/B,EACA,SAAWjO,GACToM,EACE6D,GAAe,CAAE,GAAIpJ,EAAU,MAAAxQ,EAAO,WAAY2J,EAAE,IAAO,CAAA,CAC7D,EAEF,aAAA/J,CAAA,CACF,EAGF6B,EAACoX,GAAA,CACC,MAAOL,EAAS,OAChB,MAAAvN,EACA,IAAAC,EACA,YAAakN,EACb,gBAAiBA,EACjB,gBAAiB,CAACnN,EAAOC,IAAQ,CAC/BkN,EAASnN,CAAK,EACdkN,EAAOjN,CAAG,CACZ,EACA,YAEIpJ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACqV,GAAA,CACC,MAAOc,EACP,OAAAZ,EACA,SAAUkB,EACV,KAAK,QAAA,CAAA,EAET,IACCxP,GACC,CAAA,SAAAjH,EAACuD,EAAA,CACC,cAAY,eACZ,QAASpF,EACT,WAAA2X,EAEC,WAAE,cAAc,CAAA,CAAA,CAErB,CAAA,CAAA,EACF,EAGD,SAAA,CAACoB,GACC7W,EAAAyN,GAAA,CAAM,aAAY,EAAE,WAAW,EAAG,QAAQ,UACzC,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,qBAAqB,CAAE,CAAA,EAC7BjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,aAAa,CAAE,CAAA,EACtBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC8I,EAAS,IAAI,CAACiB,EAAQpM,IACpBvL,EAAA6N,GAAA,CAAsB,WAAY8J,EAAO,WACxC,SAAA,CAAA3X,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,EACA,WAAYoM,EAAO,WACnB,SAAU,CAAClX,EAAG8K,KAAa,CACzB,MAAM4L,EAAOT,EAAS,IAAI,CAACiB,EAAQP,KACjCA,KAAU7L,GACN,CAAE,GAAGoM,EAAQ,WAAY,CAACA,EAAO,YACjCA,CACN,EACAJ,EAAYJ,CAAI,CAAA,CAClB,CACF,CACF,IACCvK,EAAG,CAAA,cAAa,eAAe+K,EAAO,IAAI,GACzC,SAAAhY,EAACkP,GAAA,CACC,GAAIM,GAAgB,CAClB,MAAAjR,EACA,GAAIwQ,EACJ,WAAYiJ,EAAO,KACnB,SAAUA,EAAO,EAAA,CAClB,EAEA,SAAOA,EAAA,IAAA,CAAA,EAEZ,EACChY,EAAAiN,EAAA,CAAI,SAAY5D,GAAA2O,EAAO,IAAK,EAAE,IAC9B/K,EACC,CAAA,SAAAjN,EAAC0X,GAA0B,CAAA,IAAKM,CAAQ,CAAA,EAC1C,EACAhY,EAACiN,EAAI,CAAA,SAAA+K,EAAO,WAAY,CAAA,EACvB,CAAClC,GACA9V,EAACiN,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAO,EAAE,QAAQ,EACjB,QAAS,IAAM,CACb6K,EAAkBE,CAAM,EACLhB,EAAA,CAAA,CACrB,CACF,CACF,CACF,CAAA,CACF,EAEJ,EACA3W,EAAC2N,GAAA,CAEC,WAAYgK,EAAO,WAEnB,SAAA,CAAAhY,EAACiN,EAAG,EAAA,EACJjN,EAACiN,EAAG,CAAA,QAAS,GAAK6I,EAAa,EAAI,GACjC,SAAA9V,EAACqP,GACE,CAAA,SAAA2I,EAAO,YACNhY,EAACsP,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAAtP,EAAC4T,GAAA,CACC,KAAK,sBACL,MAAOoE,EAAO,kBACd,QAAU9P,GAAMA,EAAE,KAClB,KAAO0O,GACLzH,GAAoB,CAClB,MAAA5Q,EACA,GAAIwQ,EACJ,aAAc6H,EAAW,GACzB,eAAgBA,EAAW,IAC5B,CAAA,CAAA,CAAA,CAEL,GAGN,CACF,CAAA,CAAA,CAAA,EA3BK,SAASoB,EAAO,EAAE,EAAA,CA4BzB,CA9EU,EAAAA,EAAO,EA+EnB,CACD,CAAA,CACH,CAAA,CAAA,CAAA,CAEJ,EACF,EAEDd,GAAUC,GACTnX,EAACmH,GAAA,CACC,gBAAe,GACf,WAAA2O,EACA,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAC/C,EAEDoB,GAAU,CAACC,GAEP9W,EAAA2C,EAAA,CAAA,SAAA,CACC+U,GAAA/X,EAACkY,GAAA,CACC,gBAAiB/B,GAAiB,OAC/BjO,GAAMA,EAAE,OAAS,WACpB,EACA,SAAWA,GACToM,EACE6D,GAAe,CAAE,GAAIpJ,EAAU,MAAAxQ,EAAO,WAAY2J,EAAE,IAAO,CAAA,CAC7D,EAEF,aAAA/J,CAAA,CACF,EAEF6B,EAACmH,GAAA,CACC,QAAS,EAAE,eAAe,EAC1B,aAAc,EAAE,2BAA2B,EAC3C,WAAA2O,EACA,kBAAmB,EAAE,cAAc,EACnC,gBAAiB3X,CAAA,CAAA,CACnB,CACF,CAAA,CAAA,EAEJ,CAEJ,EC9Uaia,GAAa,CAAC,CAAE,GAAAna,EAAI,SAAA8Q,EAAU,KAAAsJ,KAA4B,CAC/D,KAAA,CAAE,YAAAha,CAAY,EAAIC,EAAe,EAEjC,CAAE,MAAAC,CAAM,EAAIC,GAAS,EACrB,CAACqO,EAAOyL,CAAQ,EAAIrZ,EAAgB,EACpC,CAAC8W,EAAaC,CAAc,EAChC/W,EAAyC,EAqBvC,OAnBJS,GACE,IACE,QAAQ,IAAI,CACVrB,EAAY,QAAQ,qBAAqB,CACvC,GAAI0Q,EACJ,aAAc9Q,CAAA,CACf,EACDI,EAAY,QAAQ,0BAA0B,CAC5C,GAAI0Q,EACJ,WAAY9Q,CACb,CAAA,CAAA,CACF,EACH,CAAC,CAAC8T,EAAQgE,CAAW,IAAM,CACzBuC,EAASvG,CAAM,EACfiE,EAAeD,CAAW,CAC5B,EACA,CAAA,CACF,EAEI,CAACA,GAAe,CAAClJ,IACX6G,GAAgB,EAAA,EAIvBrT,EAAAiP,GAAA,CAAgB,aAAY,GAAC,UAAU,4BACtC,SAAA,CAAAtP,EAAC2T,GAAkB,CAAA,KAAK,OAAO,MAAO0E,EAAM,EAC5CrY,EAAC4T,GAAA,CACC,KAAK,SACL,MAAO/G,EACP,QAAU8F,GAAMA,EAAE,KAClB,KAAO9F,GACL0L,GAAe,CAAE,GAAIxJ,EAAU,MAAAxQ,EAAO,QAASsO,EAAM,EAAK,CAAA,CAAA,CAE9D,EACA7M,EAAC4T,GAAA,CACC,KAAK,wBACL,MAAOmC,EACP,QAAU7N,GAAMA,EAAE,KAClB,KAAO0O,GACLzH,GAAoB,CAClB,GAAIJ,EACJ,MAAAxQ,EACA,aAAcqY,EAAW,GACzB,eAAgB,UACjB,CAAA,CAAA,CAAA,CAEL,EACF,CAEJ,EC9BM4B,GAAc,CAAC,CAAE,IAAA5C,KACpBvV,EAAAoY,GAAA,CAAU,aAAa,WACrB,SAAA,CAAA7C,EAAI,OAAO,CAAC,EAAE,IAAE5V,EAAAmV,GAAA,CAAU,MAAOS,EAAI,IAAM,CAAA,CAAA,EAC9C,EAGW8C,GAAyB,CAAC,CACrC,SAAA3J,EACA,WAAA+G,EAAa,EACf,IAAsB,CACd,KAAA,CAAE,YAAAzX,CAAY,EAAIC,EAAe,EAEjC,CAAE,CAAE,EAAII,EAAe,EACvB4V,EAAWC,GAAY,EACvB,CAAE,SAAA5P,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,CAAM,EAAIC,GAAS,EAErB,CAACuN,EAAW+F,CAAY,EAC5B7S,EAA6C,EACzC,CAAC0Z,EAAkBC,CAAmB,EAC1C3Z,EAAiC,EAC7B,CAAC8W,EAAa8C,CAAa,EAC/B5Z,EAAyC,EAErC,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACuD,EAAKiN,CAAM,EAAIzX,EAAS,EAAE,EAC3B,CAACuK,EAAOmN,CAAQ,EAAI1X,EAAS,CAAC,EAC9B,CAACsW,EAAQkB,CAAS,EAAIxX,EAAqB,CAAA,CAAE,EAEnDS,GACE,IAAM,CACJ,MAAMoX,EAAS,CACb,MAAAtN,EACA,IAAKC,EAAM,EACX,KAAM,GACN,GAAG8L,CACL,EACO,OAAAlX,EAAY,QAAQ,cAAc,CACvC,GAAGyY,EACH,GAAI/H,CAAA,CACL,CACH,EACChD,GACC+F,EACE/F,EAAU,IAAKa,IAAc,CAAE,GAAGA,EAAU,WAAY,IAAQ,CAClE,EACF,CAAC1G,EAAKqP,EAAQ/L,EAAOC,CAAG,CAC1B,EAEM,MAAAqP,EAAmB,MAAO7a,GACvBI,EAAY,QAAQ,0BAA0B,CACnD,GAAI0Q,EACJ,WAAY9Q,CAAA,CACb,EAGG,CAAC+Y,EAAoBC,CAAa,EAAIvQ,GAAiB,CAC3D,SAAU,iBACV,SAEKrG,EAAA2C,EAAA,CAAA,SAAA,CAAA,EAAE,uBAAuB,EACzB+S,GAAa,QACZ/V,EAACuX,GAAA,CACC,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,MAAO,EAAE,uBAAuB,EAChC,UAAU,gBAEV,WAAC,IAAE,CAAA,UAAU,gBACV,SAAAxB,EAAY,IAAKa,GACf5W,EAAA,SAAA,CAA2B,UAAU,gBACnC,SAAA4W,EAAW,MADDA,EAAW,EAExB,CACD,CACH,CAAA,CAAA,CAAA,CACF,EAEJ,EAEF,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAAvY,EAAY,QAAQ,YAAY,CACpC,GAAI0Q,EACJ,WAAY4J,GAAkB,GAAA,CAC/B,EACDhU,EAAS,EAAE,wBAAwB,EAAGK,EAAa,OAAO,EAClDoB,EAAA,QACDnB,EAAO,CACdL,EAAS,uBAAwBK,CAAK,CAAA,CACxC,CACF,CACD,EAED,GAAI,CAAC8G,EACH,SAAQ2H,GAAgB,EAAA,EAGpB,MAAAwD,EAASnL,EAAU,SAAW,EAC9BoL,EAAY,OAAO,KAAK5B,CAAM,EAAE,SAAW,EACjD,OACGlV,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,cACrC,SAAA,CAAAlJ,EAACiX,EAAc,EAAA,GACb,CAACC,GAAUC,IACXnX,EAACoX,GAAA,CACC,MAAOrL,EAAU,OACjB,MAAAvC,EACA,IAAAC,EACA,YAAakN,EACb,gBAAiBA,EACjB,gBAAiB,CAACnN,EAAOC,IAAQ,CAC/BkN,EAASnN,CAAK,EACdkN,EAAOjN,CAAG,CACZ,EACA,YAEIpJ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACqV,GAAA,CACC,OAAAE,EACA,SAAUkB,EACV,KAAK,UAAA,CAAA,EAET,IAECxP,GACC,CAAA,SAAAjH,EAACuD,EAAA,CACC,cAAY,iBACZ,WAAAuS,EACA,UAAY3Y,GACV6C,EAACkP,GAAA,CACE,GAAG/R,EACJ,GAAI4b,GAAiB,CAAE,MAAAxa,EAAO,GAAIwQ,CAAU,CAAA,CAAA,CAC9C,EAGD,WAAE,gBAAgB,CAAA,CAAA,CAEvB,CAAA,CAAA,EACF,EAGD,SAAA,CAACmI,GACC7W,EAAAyN,GAAA,CAAM,aAAY,EAAE,WAAW,EAAG,QAAQ,UACzC,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,aAAa,CAAE,CAAA,EACrBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,OAAO,CAAE,CAAA,EACfjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACd,CAAC6H,GAEEzV,EAAA2C,EAAA,CAAA,SAAA,CAAChD,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACvBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CACzB,CAAA,CAAA,CAAA,CAEJ,CACF,CAAA,EACClC,EAAU,IAAI,CAACa,EAAUhB,IACvBvL,EAAA6N,GAAA,CAAyB,WAAYtB,EAAS,WAC7C,SAAA,CAAAvM,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,EACA,WAAYgB,EAAS,WACrB,SAAU,CAAC9L,EAAG8K,IAAa,CACzB,MAAM4L,GAAOzL,EAAU,IAAI,CAACa,EAAU6K,IACpCA,IAAU7L,EACN,CACE,GAAGgB,EACH,WAAY,CAACA,EAAS,UAAA,EAExBA,CACN,EACAkF,EAAa0F,EAAI,CAAA,CACnB,CACF,CACF,EACAxX,EAACiN,EAAG,CAAA,cAAa,eAAeL,EAAS,IAAI,GAC3C,SAAA5M,EAACyY,GAAU,CAAA,aAAa,WACtB,SAAAzY,EAACkP,GAAA,CACC,GAAI8J,GAAkB,CACpB,MAAAza,EACA,GAAIwQ,EACJ,WAAYnC,EAAS,GAAA,CACtB,EAEA,SAASA,EAAA,IAAA,GAEd,CACF,CAAA,EACA5M,EAACiN,GACC,SAACjN,EAAAyY,GAAA,CAAU,aAAa,WACrB,SAAA7L,EAAS,YACZ,CACF,CAAA,EACA5M,EAACiN,GACC,SAACjN,EAAAyY,GAAA,CAAU,aAAa,WACrB,SAAA7L,EAAS,KACZ,CACF,CAAA,EACA5M,EAACiN,GACC,SAACjN,EAAAyY,GAAA,CAAU,aAAa,WACrB,SAAA7L,EAAS,OAAO,IAAA,CACnB,CACF,CAAA,IACCK,EACC,CAAA,SAAAjN,EAACwY,GAAY,CAAA,IAAK5L,CAAU,CAAA,EAC9B,EACC,CAACkJ,GAEEzV,EAAA2C,EAAA,CAAA,SAAA,CAAChD,EAAAiN,EAAA,CAAG,MAAO,GACT,SAAAjN,EAACuD,EAAA,CACC,QAAQ,OACR,UAAYpG,GACV6C,EAACkP,GAAA,CACE,GAAG/R,EACJ,GAAIqX,GAAgB,CAClB,MAAAjW,EACA,GAAIwQ,EACJ,eAAgB,WAChB,WAAYnC,EAAS,GACtB,CAAA,CAAA,CACH,EAGD,WAAE,kBAAkB,CAAA,CAAA,EAEzB,EACA5M,EAACiN,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAO,EAAE,QAAQ,EACjB,QAAS,SAAY,CACnB2L,EAAoBhM,CAAQ,EAC5BiM,EACE,MAAMC,EAAiBlM,EAAS,GAAI,CACtC,EACmBoK,EAAA,CAAA,CACrB,CACF,CACF,CACF,CAAA,CACF,CACF,CAAA,CAAA,EAEJ,EACA3W,EAAC2N,GAAA,CAEC,WAAYpB,EAAS,WAErB,SAAA,CAAA5M,EAACiN,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAACjN,EAAAqP,GAAA,CACE,WAAS,YACRrP,EAACoY,GAAA,CACC,SAAArJ,EACA,GAAInC,EAAS,IACb,KAAMA,EAAS,IAAA,GAGrB,CACF,CAAA,CAAA,CAAA,EAdK,SAASA,EAAS,GAAG,EAAA,CAe5B,CAzGU,EAAAA,EAAS,GA0GrB,CACD,CAAA,CACH,CAAA,CAAA,CAEJ,EAEDsK,GAAUC,GACTnX,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAC/C,EAED+P,GAAU,CAACC,GACVnX,EAACmH,GAAA,CACC,QAAS,EAAE,gBAAgB,EAC3B,aAAc,EAAE,4BAA4B,EAC5C,WAAA2O,EACA,kBAAmB,EAAE,gBAAgB,EACrC,gBAAiB,IACfxB,EAASyE,GAAiB,CAAE,MAAAxa,EAAO,GAAIwQ,EAAU,CAAC,CAAA,CAAA,CAEtD,EAEJ,CAEJ,ECnSakK,GAAsB,CAAC,CAClC,SAAAlK,EACA,WAAA+G,EAAa,EACf,IAAmB,CACX,KAAA,CAAE,YAAAzX,CAAY,EAAIC,EAAe,EAEjC,CAAE,CAAE,EAAII,EAAe,EACvB4V,EAAWC,GAAY,EACvB,CAAE,MAAAhW,CAAM,EAAIC,GAAS,EAErB,CAAC0a,EAAclC,CAAkB,EAAIvI,GAAU,EAC/C,CAACsD,EAAQC,CAAS,EAAI/S,EAA0C,EAChE,CAACka,EAAeC,CAAgB,EACpCna,EAAwC,EACpC,CAACoa,EAAWC,CAAY,EAAIra,EAA0B,CAAA,CAAE,EAExD,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACuD,EAAKiN,CAAM,EAAIzX,EAAS,EAAE,EAC3B,CAACuK,EAAOmN,CAAQ,EAAI1X,EAAS,CAAC,EAC9B,CAACsW,EAAQkB,CAAS,EAAIxX,EAAS,EAAE,EAEvCS,GACE,IAAM,CACJ,MAAMoX,EAAS,CACb,MAAAtN,EACA,IAAKC,EAAM,EACX,KAAM,GACN,KAAM8L,CACR,EACO,OAAAlX,EAAY,QAAQ,cAAc,CACvC,GAAGyY,EACH,GAAI/H,CAAA,CACL,CACH,EACCgD,GAAW,CACAA,EAAAA,EAAO,IAAKY,IAAO,CAAE,GAAGA,EAAG,SAAU,EAAM,EAAE,CAAC,EAC3CZ,EAAAA,EAAO,IAAKY,IAAO,CAAE,GAAIA,EAAE,GAAK,WAAY,EAAM,EAAE,CAAC,CACpE,EACA,CAACzM,EAAKqP,EAAQ/L,EAAOC,CAAG,CAC1B,EAEM,MAAA8P,EAAYtb,GAAe8T,GAAQ,KAAMlF,GAAUA,EAAM,KAAO5O,CAAE,EAClEyT,EAAczT,GAClBob,EAAU,KAAMG,GAAMA,EAAE,KAAOvb,CAAE,GAAG,YAAc,GAiDpD,GA/CAyB,GACE,IAAM,CACE,MAAA+Z,EAAcJ,EACjB,OAAQzD,GAAQA,EAAI,UAAU,EAC9B,IAAI,CAAC,CAAE,GAAA3X,KAASsb,EAAStb,CAAE,CAAC,EAC5B,OAAQ0U,GAAM,CAACA,EAAE,QAAQ,EAE5B,OAAO,QAAQ,IACb8G,EAAY,IAAI,MAAO5M,GAAU,CAC/B,KAAM,CAACd,EAAWgK,CAAW,EAAI,MAAM,QAAQ,IAAI,CACjD1X,EAAY,QAAQ,wBAAwB,CAC1C,GAAI0Q,EACJ,QAASlC,EAAM,EAAA,CAChB,EACDxO,EAAY,QAAQ,0BAA0B,CAC5C,GAAI0Q,EACJ,QAASlC,EAAM,EAChB,CAAA,CAAA,CACF,EAEM,MAAA,CACL,GAAGA,EACH,UAAAd,EACA,YAAAgK,EACA,SAAU,EACZ,CACD,CAAA,CACH,CACF,EACC2D,GAAoB,CACnB,IAAIpT,EAAS,CAAC,GAAIyL,GAAU,EAAG,EACf2H,EAAA,QAASC,GAAkB,CACzC,MAAMlC,EAAQ1F,GAAQ,UACnBlF,GAAU8M,EAAc,KAAO9M,EAAM,EACxC,EACSvG,EAAA,CACP,GAAGA,EAAO,MAAM,EAAGmR,CAAK,EACxBkC,EACA,GAAGrT,EAAO,MAAMmR,EAAQ,CAAC,CAC3B,CAAA,CACD,EAEDzF,EAAU1L,CAAM,CAClB,EACA,CAAC+S,CAAS,CACZ,EAEI,CAACtH,EACH,SAAQ2B,GAAgB,EAAA,EAGpB,MAAAwD,EAASnF,EAAO,SAAW,EAC3BoF,EAAY5B,IAAW,GAC7B,OACGlV,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,cACrC,SAAA,CAAAlJ,EAAC4Z,GAAA,CACC,SAAA7K,EACA,KAAMmK,EACN,aAAclC,EACd,cAAAmC,EACA,QAAA/S,CAAA,CACF,GACE,CAAC8Q,GAAUC,IACXnX,EAACoX,GAAA,CACC,MAAOrF,EAAO,OACd,MAAAvI,EACA,IAAAC,EACA,YAAakN,EACb,gBAAiBA,EACjB,gBAAiB,CAACnN,EAAOC,IAAQ,CAC/BkN,EAASnN,CAAK,EACdkN,EAAOjN,CAAG,CACZ,EACA,eAAe,SACf,sBAAuB,EAAE,cAAc,EACvC,kBAAmBgN,EACnB,cACGxP,GACC,CAAA,SAAAjH,EAACuD,EAAA,CACC,cAAY,2BACZ,UAAYpG,GACV6C,EAACkP,IAAM,GAAG/R,EAAO,GAAI0c,GAAW,CAAE,MAAAtb,EAAO,GAAIwQ,CAAA,CAAU,CAAG,CAAA,EAG3D,WAAE,0BAA0B,CAAA,CAAA,EAEjC,EAGD,SAAA,CAACmI,GACC7W,EAAAyN,GAAA,CAAM,aAAY,EAAE,QAAQ,EAAG,QAAQ,UACtC,SAAA,CAAC9N,EAAA+N,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAChO,EAAAiO,EAAA,CAAG,cAAY,MAAO,CAAA,EACtBjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,MAAM,CAAE,CAAA,EACdjO,EAAAiO,EAAA,CAAI,SAAE,EAAA,aAAa,CAAE,CAAA,EACtBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,EACvBjO,EAACiO,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC8D,EAAO,IAAI,CAAClF,EAAOjB,IACjBvL,EAAA6N,GAAA,CAAqB,WAAYwD,EAAW7E,EAAM,EAAE,EACnD,SAAA,CAAAxM,EAAC2N,GACC,CAAA,SAAA,CAAAhO,EAACiN,EAAA,CACC,OAAQ,CACN,SAAArB,EACA,WAAY8F,EAAW7E,EAAM,EAAE,EAC/B,SAAU,CAAChG,EAAQ4Q,EAAO/F,IAAe,CAC1B4H,EAAA,CACX,GAAGD,EAAU,MAAM,EAAG5B,CAAK,EAC3B,CAAE,GAAI5K,EAAM,GAAK,WAAA6E,CAAW,EAC5B,GAAG2H,EAAU,MAAM5B,EAAQ,CAAC,CAAA,CAC7B,CAAA,CACH,CACF,CACF,IACCxK,EAAG,CAAA,cAAa,eAAeJ,EAAM,IAAI,GACxC,SAAA7M,EAACkP,GAAA,CACC,GAAIqJ,GAAe,CACjB,MAAAha,EACA,GAAIwQ,EACJ,QAASlC,EAAM,EAAA,CAChB,EAEA,SAAMA,EAAA,IAAA,CAAA,EAEX,EACA7M,EAACiN,EAAI,CAAA,SAAAJ,EAAM,WAAY,CAAA,EACvB7M,EAACiN,EAAG,CAAA,MAAO,GACT,SAAAjN,EAACuD,EAAA,CACC,QAAQ,OACR,UAAYpG,GACV6C,EAACkP,GAAA,CACE,GAAG/R,EACJ,GAAIqX,GAAgB,CAClB,MAAAjW,EACA,GAAIwQ,EACJ,eAAgB,QAChB,WAAYlC,EAAM,EACnB,CAAA,CAAA,CACH,EAGD,WAAE,kBAAkB,CAAA,CAAA,EAEzB,EACA7M,EAACiN,EAAA,CACC,aAAY,GACZ,QAAS,CACP,MAAO,CACL,CACE,MAAO,EAAE,QAAQ,EACjB,QAAS,IAAM,CACbmM,EAAiBvM,CAAK,EACHmK,EAAA,CAAA,CACrB,CACF,CACF,CACF,CAAA,CACF,EACF,EACA3W,EAAC2N,GAAA,CAEC,WAAY0D,EAAW7E,EAAM,EAAE,EAE/B,SAAA,CAAA7M,EAACiN,EAAG,EAAA,EACJjN,EAACiN,EAAG,CAAA,QAAS,EACX,SAAAjN,EAACqP,GACE,CAAA,SAAAqC,EAAW7E,EAAM,EAAE,GAAKA,EAAM,SAC7BxM,EAACiP,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAA,CAAAtP,EAAC4T,GAAA,CACC,KAAK,YACL,MAAO/G,EAAM,UACb,QAAU6F,GAAMA,EAAE,KAClB,KAAOA,GACLsG,GAAkB,CAChB,GAAIjK,EACJ,MAAAxQ,EACA,WAAYmU,EAAE,GACf,CAAA,CAAA,CAEL,EACA1S,EAAC4T,GAAA,CACC,KAAK,wBACL,MAAO/G,EAAM,YACb,QAAU3E,GAAMA,EAAE,KAClB,KAAOA,GACLiH,GAAoB,CAClB,GAAIJ,EACJ,MAAAxQ,EACA,aAAc2J,EAAE,GAChB,eAAgBA,EAAE,IACnB,CAAA,CAAA,CAAA,CAEL,CAAA,CAGF,EAAAlI,EAAC0T,GAAgB,CAAA,CAAA,CAErB,CAAA,CACF,CAAA,CAAA,CAAA,EAzCK,SAAS7G,EAAM,EAAE,EAAA,CA0CxB,CAvGU,EAAAA,EAAM,EAwGlB,CACD,CAAA,CACH,CAAA,CAAA,CAEJ,EAEDqK,GAAU,CAACC,GACVnX,EAACmH,GAAA,CACC,QAAS,EAAE,0BAA0B,EACrC,aAAc,EAAE,gCAAgC,EAChD,WAAA2O,EACA,gBAAiB,IAAMxB,EAASuF,GAAW,CAAE,GAAI9K,EAAU,MAAAxQ,CAAM,CAAC,CAAC,EACnE,kBAAmB,EAAE,0BAA0B,CAAA,CACjD,EAED2Y,GAAUC,GACTnX,EAACmH,GAAA,CACC,gBAAe,GACf,WAAA2O,EACA,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAAA,CAC/C,EAEJ,CAEJ,EClTagE,GAAe,CAAC,CAAE,UAAAC,EAAW,YAAAC,KAAqC,CACvE,KAAA,CAAE,EAAAvb,CAAE,EAAIC,EAAe,EACvB,CAACub,EAAUC,CAAW,EAAIjb,EAAuC,CAAA,CAAE,EAEvE,OAAAoB,EAAC6E,GAAA,CACC,MAAOzG,EAAE,QAAQ,EACjB,OAAM,GACN,QAAQ,QACR,QAASub,EACT,QAAS,CACPha,EAACuD,EAAA,CACC,GAAG,gBAEH,QAAS,IAAM,CACbwW,EAAUE,CAAQ,EACND,EAAA,CACd,EACA,cAAY,UAEX,WAAE,SAAS,CAAA,EAPR,SAQN,EACAha,EAACuD,EAAA,CACC,cAAY,SACZ,GAAG,eAEH,QAAS4B,GAAc,KACvB,QAAS,IAAM,CACD6U,EAAA,CACd,EAEC,WAAE,QAAQ,CAAA,EANP,QAAA,CAQR,EAEA,SAAA,CAAAha,EAACI,IACC,SAACJ,EAAAma,GAAA,CAAe,GAAG,kBAAkB,SAAUD,EAAa,CAC9D,CAAA,EACC,OAAO,KAAKD,CAAQ,EAAE,SAAW,GAE9B5Z,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqR,GAAQ,EAAA,IACR,IAAE,CAAA,UAAU,gBAAiB,SAAA5S,EAAE,iBAAiB,EAAE,EACnD4B,EAACD,GAAK,CAAA,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAO/B,EAAE,uBAAuB,EAChC,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAuB,EAACoa,GAAA,CACC,GAAG,wBACH,KAAK,wBACL,MAAO3b,EACL,0BAA0Bwb,EAAS,qBAAqB,EAC1D,EACA,UAAS,GACT,WAAU,GACV,UAAU,eAAA,CAAA,CACZ,CACF,EACAja,EAACQ,EAAA,CACC,MAAO/B,EAAE,kBAAkB,EAC3B,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAEF,QAAQ,mBACR,gBAAe,GAEf,SAAAuB,EAACoa,GAAA,CACC,GAAG,mBACH,KAAK,mBACL,UAAS,GACT,WAAU,GACV,MAAO3b,EAAE,sBAAsBwb,EAAS,gBAAgB,EAAE,EAC1D,UAAU,eAAA,CAAA,CACZ,CACF,EACAja,EAACQ,EAAA,CACC,gBAAe,GACf,MAAO/B,EAAE,+BAA+B,EACxC,QAAQ,gCACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,+BAA+B,EAC3C,aAAa,+BAAA,CACf,EAGF,SAAAuB,EAACqI,GAAA,CACC,GAAG,gCACH,MAAO5J,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWwb,EAAS,8BACpB,WAAU,GACV,aAAYxb,EAAE,+BAA+B,CAAA,CAAA,CAC/C,CAAA,CACF,EACF,EACAuB,EAAC,MAAI,CAAA,UAAU,gBACZ,SAAA,OAAO,QAAQia,CAAQ,EACrB,OAAO,CAAC,CAAA,CAAGlZ,CAAK,IAAM,MAAM,QAAQA,CAAK,CAAC,EAC1C,IAAI,CAAC,CAACmF,EAAKnF,CAAK,IACdiC,EAAAA,GAAA,CACC,SAAA,CAAAhD,EAACqR,GAAQ,EAAA,EACRrR,EAAA,IAAA,CAAE,UAAU,gBACX,WAAC,SACE,CAAA,SAAA,CAAMe,EAAA,OAAO,IAAEtC,EAAEyH,CAAG,CAAA,CAAA,CACvB,CACF,CAAA,CAAA,GANaA,CAOf,CACD,EACL,IACCmL,GAAQ,EAAA,EACTrR,EAACuX,GAAA,CACC,QAAQ,UACR,UAAU,gBACV,SAAQ,GACR,MAAO9Y,EAAE,eAAe,CAAA,CAAA,CAC1B,CACF,CAAA,CAAA,CAAA,CAEJ,CAEJ,EClIM4b,GAA2B,CAC/B,YACA,aACA,UACF,EAOaC,GAAwB,CAAC,CAAE,SAAAvL,KAAqC,CACrE,KAAA,CAAE,YAAA1Q,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAACkO,EAAU2N,CAAW,EAAItb,EAAuC,EACjE,CAACub,EAAcC,CAAkB,EAAIhM,GAAU,EAE/CnK,EAAOC,GAAoB,EAAE,EAC7B,CAAE,QAAAxC,EAAS,MAAAU,EAAO,aAAA+B,CAAiB,EAAAF,EAEnC,CAAE,SAAAK,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,UAAAmF,CAAU,EAAIC,GAAU,EAE1B6L,EAAa,CAAC9L,EAAU,sBAAsB,EAEpDtK,GACE,IAAMrB,EAAY,QAAQ,kBAAkB,CAAE,GAAI0Q,EAAU,EAC3DnC,GAAa,CACZ2N,EAAY3N,CAAQ,EACpBnK,EAAMmK,CAAQ,CAChB,EACA,CAAA,CACF,EAEM,MAAA8N,EAAiB,MAAO3Z,GAAwC,CAChE,GAAA,CACF,MAAM1C,EAAY,QAAQ,eAAe,CAAE,GAAI0Q,GAAYhO,CAAK,EAChE4D,EAASlG,EAAE,uBAAuB,EAAGuG,EAAa,OAAO,EACnDvC,EAAA,CAAE,GAAG1B,EAAO,QACXkE,EAAO,CACdL,EAAS,sBAAuBK,CAAK,CAAA,CAEzC,EAEMH,EAAW,MAAO8H,GAA2C,CAC7D,GAAA,CACF,MAAMvO,EAAY,QAAQ,qBACxB,CAAE,GAAI0Q,CAAS,EACfnC,CACF,EACAjI,EAASlG,EAAE,uBAAuB,EAAGuG,EAAa,OAAO,QAClDC,EAAO,CACdL,EAAS,oBAAqBK,CAAK,CAAA,CAEvC,EAEA,OAAK2H,EAKHvM,EAAC6I,GAAY,CAAA,QAAQ,QAClB,SAAA,CACCsR,GAAAxa,EAAC8Z,GAAA,CACC,UAAWY,EACX,YAAaD,CAAA,CACf,EAEFpa,EAACyC,GAAA,CACC,KAAK,uBACL,aAAY,GACZ,SAAU0B,EAAaM,CAAQ,EAE/B,SAAA,CAAA9E,EAACQ,EAAA,CACC,MAAO/B,EAAE,QAAQ,EACjB,QAAQ,SACR,YACGgC,EAAS,CAAA,SAAUhC,EAAE,YAAY,EAAG,aAAa,SAAS,EAG7D,SAAAuB,EAACuD,GAAO,QAAQ,YAAY,QAASkX,EAClC,SAAAhc,EAAE,QAAQ,CACb,CAAA,CAAA,CACF,IACC4S,GAAQ,EAAA,EACTrR,EAACQ,EAAA,CACC,MAAO/B,EAAE,uBAAuB,EAChC,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAuB,EAACkC,GAAA,CACC,KAAK,wBACL,cAAY,wBACZ,aAAcmY,GAAyB,CAAC,EACxC,QAAAtY,EACA,OAAQ,CAAC,CAAE,MAAAI,KAENnC,EAAAgD,EAAA,CAAA,SAAAqX,GAAyB,IAAKM,GAC7B3a,EAACoa,GAAA,CACC,GAAIO,EAEJ,cAAaA,EACb,UAAWxY,EAAM,QAAUwY,EAC3B,WAAA7E,EACA,KAAK,wBACL,SAAU,IAAM3T,EAAM,SAASwY,CAAI,EACnC,MAAOlc,EAAE,0BAA0Bkc,CAAI,EAAE,EACzC,UAAU,eAAA,EAPLA,CAAA,CASR,CACH,CAAA,CAAA,CAAA,CAEJ,CACF,EACAta,EAAC+E,GAAc,CAAA,GAAGd,EAChB,SAAA,CAACtE,EAAA4a,GAAA,CAAuB,UAAS,EAAC,CAAA,EAClC5a,EAACiD,GAAA,CACC,KAAK,gCACL,MAAOxE,EAAE,+BAA+B,EACxC,UAAWA,EAAE,mCAAmC,CAAA,CAAA,CAClD,EACF,EACAuB,EAACoK,GAAA,CACC,KAAK,yBACL,MAAO,IAAM3H,EAAMmK,CAAQ,EAC3B,SAAQ,EAAA,CAAA,CACV,CAAA,CAAA,CACF,EACF,IA7EQ8G,GAAgB,EAAA,CA+E5B,EChIMmH,GAAc,CAAC,CACnB,GAAA5c,EACA,YAAA6c,EACA,OAAApS,EACA,OAAAqS,EACA,OAAAvM,CACF,IAAwB,CAChB,KAAA,CAAE,EAAA/P,CAAE,EAAIC,EAAe,EACvB4F,EAAOtC,GAAqC,EAC5C,CAAE,UAAAgI,CAAU,EAAIC,GAAU,EAC1BC,EAAYF,EAAU,gBAAgB,GAAKtB,EAAO,QAAQ,UAG9D,OAAArI,EAAC+B,GAAM,CAAA,UAAS,GACd,SAAA,CAAApC,EAACqC,GAAU,CAAA,SAAQ,GACjB,SAAAhC,EAAC6Q,GACC,CAAA,SAAA,CAAClR,EAAAmR,GAAA,CAAe,OAAM,GACpB,SAACnR,EAAAgb,GAAA,CAAc,GAAA/c,EAAQ,MAAO8c,EAAQ,SAAQ,EAAA,CAAC,CACjD,CAAA,IACC5J,GACC,CAAA,SAAAnR,EAACib,GAAA,CACC,GAAAhd,EACA,KAAM8c,EACN,MAAM,eACN,QAAQ,SAAA,CAAA,CAEZ,CAAA,CAAA,CAAA,CACF,CACF,CAAA,IACC1Y,GACC,CAAA,SAAArC,EAACuD,EAAA,CACC,QAAQ,YACR,WAAYe,EAAK,UAAU,SAAW,CAAC4F,EACvC,QAASsE,EAER,WAAEsM,CAAW,CAAA,CAAA,CAElB,CAAA,CAAA,EACF,CAEJ,EAEMI,GAAsB,CAAC,CAAE,KAAAC,KAA6B,CACpD,KAAA,CAAE,EAAA1c,CAAE,EAAIC,EAAe,EACvB8G,EAAaC,GAAc,EAWjC,SAAQ,MAAI,CAAA,UAAU,gBAAiB,UAVb0V,GACxBA,EACI1c,EAAE,kBAAmB,CACnB,KAAM+G,EAAW,IAAI,KAAK2V,EAAO,GAAI,EAAG,CACtC,UAAW,OACX,UAAW,MACZ,CAAA,CACF,CAAA,EACD,QAEkDA,CAAI,EAAE,CAChE,EAEaC,GAAe,CAAC,CAAE,OAAA1S,EAAQ,OAAAqS,EAAQ,OAAAvM,KAAgC,CACvE,KAAA,CAAE,YAAAnQ,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAACwW,EAAeC,CAAgB,EAAIrc,EACxCyJ,EAAO,aAAa,uBAAuB,CAC7C,EACM6S,EACJ7S,EAAO,aAAa,+BAA+B,EAC/C8S,EACJ9S,EAAO,aAAa,uCAAuC,EAEvD+S,EAAWN,GAAiB,IAAI,OAAO,QAAA,GAAaA,EAAO,IAE3D,CAACO,EAAyBC,CAAiB,EAAIjV,GAAiB,CACpE,SAAU,0BACV,WAAY,iCACZ,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAArI,EAAY,QAAQ,iBAAiB,CACzC,GAAIqK,EAAO,EAAA,CACZ,EACD4S,EAAiB,MAAS,EACjB3W,EAAAlG,EAAE,0BAA0B,CAAC,QAC/BwG,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAAA,CAC1C,CACF,CACD,EAED,OAAAlF,GAAU,IAAM,CACVsb,IAAkB3S,EAAO,aAAa,uBAAuB,GAC9C4S,EAAA5S,EAAO,aAAa,uBAAuB,CAAC,CAC/D,EACC,CAACA,EAAQ2S,CAAa,CAAC,EAItBhb,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC2b,EAAkB,EAAA,EACnBtb,EAACG,EAAA,CACC,MAAO/B,EAAE,cAAc,EACvB,QAAQ,mBACR,UAAU,gBAEV,SAAA,CAAAuB,EAAC6a,GAAA,CACC,GAAG,mBACH,OAAAnS,EACA,OAAAqS,EACA,OAAAvM,EACA,YAAY,YAAA,CACd,EACAxO,EAACkb,GAAoB,CAAA,KAAMK,CAAsB,CAAA,EAChDE,EAAQF,CAAoB,GAC3Bvb,EAACuX,GAAM,CAAA,QAAQ,UAAU,SAAQ,GAAC,MAAO9Y,EAAE,kBAAkB,CAAG,CAAA,CAAA,CAAA,CAEpE,EACC4c,KACE7a,EAAU,CAAA,MAAO/B,EAAE,eAAe,EAAG,QAAQ,gBAC5C,SAAA,CAAAuB,EAAC6a,GAAA,CACC,GAAG,gBACH,OAAAnS,EACA,OAAQ2S,EACR,OAAQK,EACR,YAAY,kBAAA,CACd,EACA1b,EAACkb,GAAoB,CAAA,KAAMM,CAA6B,CAAA,CAAA,CAC1D,CAAA,CAAA,EAEJ,CAEJ,ECzJaI,GAAY,CAAC,CAAE,wBAAAC,KAA8C,CAClE,KAAA,CAAE,WAAAC,CAAW,EAAIhd,GAAc,EAC/BwI,EACJuU,IAA4B,aACvBC,GAAY,qCAAuC,CAAC,EACpDA,GAAY,oCAAsC,CAAC,EAEpD,CAAE,CAAE,EAAIpd,EAAe,EAG3B,OAAAsB,EAAC+D,EAAA,CACC,KAAMhB,EACJ,4CACF,EACA,MAAO,EAAE,oBAAoB,EAC7B,UAAW,EAAE,wBAAwB,EACrC,WAAY,CACV,aAAc,EAChB,EACA,aAAY,GACZ,cAAc,QACd,QAAS,CACP,CAAE,IAAK,GAAI,MAAO,EAAE,cAAc,CAAE,EACpC,GAAGuE,EAAU,IAAKyU,IAAY,CAAE,IAAKA,EAAQ,MAAOA,GAAS,CAAA,CAC/D,CACF,CAEJ,EC/BaC,GAAO,IAAM,CAClB,KAAA,CAAE,EAAAvd,CAAE,EAAIC,EAAe,EAC7B,OAEI2B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiD,GAAA,CACC,KAAMF,EACJ,gDACF,EACA,MAAOtE,EAAE,sBAAsB,EAC/B,UAAWA,EAAE,0BAA0B,CAAA,CACzC,EACAuB,EAACqD,EAAA,CACC,KAAMN,EAA2B,2BAA2B,EAC5D,MAAOtE,EAAE,SAAS,EAClB,UAAWA,EAAE,aAAa,EAC1B,MAAO,CACL,SAAUA,EAAE,UAAU,CAAA,CACxB,CAAA,CACF,EACF,CAEJ,ECoBawd,GAAc,CAAC,CAAE,OAAAvT,EAAQ,KAAAlG,EAAM,QAAA4D,KAAgC,CACpE,KAAA,CAAE,YAAA/H,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnCkK,EAAWrG,EAAO,GAElB,CAACpB,EAAW4U,CAAY,EAAIjd,EAEhC,CAAA,CAAE,EAEE,CACJ,QAAA8C,EACA,UAAW,CAAE,QAAA0C,CAAQ,EACrB,aAAAD,GACExC,GAA2B,EAEzB6Z,EAA0BM,GAAS,CACvC,QAAApa,EACA,KAAM,0BACN,aAAc,EAAA,CACf,EAEK,CAACgZ,EAAQqB,CAAS,EAAInd,EAAS,EAAE,EACjC,CAACod,EAAaC,CAAc,EAAIrd,EAAS,EAAE,EAE3Csd,EAAmBjV,EAAU,KAChCkV,GAAaA,EAAS,KAAOX,CAChC,EAEM,CAAE,eAAAY,CAAe,EAAI3d,GAAc,EACnC4d,EAAqBnd,GACzB,IACEkd,IAAiB,iDAAiD,GAAG,KAClEvU,GAAMA,EAAE,KAAO2T,CAAA,GACf,WACL,CAACA,EAAyBY,CAAc,CAC1C,EAEA/c,GACE,IACE,QAAQ,IAAI,CACVrB,EAAY,yBAAyB,gCAAgC,EACrEA,EAAY,QAAQ,gBAAgB,CAClC,GAAI0Q,CACL,CAAA,CAAA,CACF,EACH,CAAC,CAACzH,EAAWyT,CAAM,IAAM,CACvBmB,EAAa5U,CAAS,EACtB8U,EAAUrB,EAAO,KAAM,CACzB,EACA,CAAA,CACF,EAEe,eAAA4B,EACbC,EACAC,EACwB,CACpB,GAAA,CACI,MAAAvO,EAAO,MAAMsO,EAAK7N,CAAQ,EAChC,OAAApK,EAASlG,EAAE,GAAGoe,CAAO,SAAS,EAAG7X,EAAa,OAAO,EAC9CsJ,QACArJ,EAAO,CACLL,EAAA,GAAGiY,CAAO,QAAS5X,CAAK,CAAA,CACnC,CAGF,MAAM6X,EAAyB,SAAY,CACzC,MAAM/B,EAAS,MAAM4B,EAClB5N,GACC1Q,EAAY,QAAQ,wBAAwB,CAAE,GAAI0Q,EAAU,EAC9D,cACF,EACUgM,EAAAA,GAAQ,OAAS,EAAE,EACrB3U,EAAA,CACV,EAEM,CAAC2W,EAA2BC,CAAmB,EAAItW,GAAiB,CACxE,SAAU,2BACV,WAAY,0BACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAWoW,CAAA,CACZ,EAEKG,EAAwB,SAAY,CACxC,MAAMZ,EAAc,MAAMM,EACvB5N,GACC1Q,EAAY,QAAQ,gCAAgC,CAAE,GAAI0Q,EAAU,EACtE,aACF,EACesN,EAAAA,GAAa,yBAA2B,EAAE,CAC3D,EAEM,CAACa,EAA0BC,CAAkB,EAAIzW,GAAiB,CACtE,SAAU,0BACV,WAAY,yBACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAWuW,CAAA,CACZ,EAED,SACG/T,GACC,CAAA,SAAA7I,EAACyC,GAAA,CACC,SAAU0B,EAAahC,CAAI,EAC3B,aAAY,GACZ,UAAU,gBACV,KAAK,iBACL,kBAAmBkG,EAAO,QAAQ,UAElC,SAAA,CAAA1I,EAACgd,EAAoB,EAAA,IACpBG,EAAmB,EAAA,EACpB9c,EAAC+c,GAAK,CAAA,OAAM,GACV,SAAA,CAAA/c,EAACgd,GACC,CAAA,SAAA,CAAArd,EAAC+D,EAAA,CACC,KAAK,0BACL,MAAOtF,EAAE,qBAAqB,EAC9B,UAAWA,EAAE,6BAA6B,EAC1C,WAAY,CACV,aAAc,EAChB,EACA,QAAS6I,EAAU,IAAI,CAAC,CAAE,GAAArJ,EAAI,YAAAqf,MAAmB,CAC/C,IAAKrf,EACL,MAAOqf,GAAerf,CAAA,EACtB,CAAA,CACJ,GACE4d,IAA4B,cAC5BA,IAA4B,sBAC5B7b,EAAC4b,IAAU,wBAAAC,EAAkD,EAE9DA,IAA4B,cAC1B7b,EAAAQ,EAAA,CACC,WAAC+W,GAAM,CAAA,QAAQ,OAAO,SAAQ,GAAC,MAAO9Y,EAAE,kBAAkB,CAAG,CAAA,EAC/D,EAEDod,IAA4B,eAAiB7b,EAACgc,GAAK,CAAA,CAAA,EACnDU,GACE1c,EAAAI,GAAA,CACC,WAACmd,GAAkB,CAAA,WAAYb,CAAoB,CAAA,EACrD,EAED1c,EAAAsD,GAAA,CACC,SAACtD,EAAAuD,EAAA,CAAO,QAAQ,UAAU,KAAK,SAAS,WAAY,CAACkB,EAClD,SAAEhG,EAAA,MAAM,EACX,CACF,CAAA,CAAA,EACF,EACC8d,GAAkB,gBAEflc,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqR,GAAQ,EAAA,IACRgM,GACC,CAAA,SAAArd,EAACob,GAAA,CACC,OAAA1S,EACA,OAAAqS,EACA,OAAQgC,CAAA,CAAA,CAEZ,CAAA,CAAA,CACF,CAAA,CAAA,EAEJ,EACC/c,EAAAod,GAAA,CAAK,OAAM,GACV,WAACC,GACC,CAAA,SAAArd,EAACQ,EAAA,CACC,MAAO/B,EAAE,yBAAyB,EAClC,QAAQ,kBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,6BAA6B,EACzC,aAAa,yBAAA,CACf,EAGF,SAAA4B,EAAC+B,GAAM,CAAA,UAAS,GACd,SAAA,CAACpC,EAAAqC,GAAA,CAAU,SAAQ,GACjB,SAACrC,EAAAwd,GAAA,CAAc,GAAG,kBAAkB,WAAU,GAC3C,SAAAnB,CACH,CAAA,EACF,IACCha,GACC,CAAA,SAAArC,EAACuD,EAAA,CACC,QAAQ,YACR,QAAS2Z,EAER,WAAE,YAAY,CAAA,CAAA,CAEnB,CAAA,CAAA,CACF,CAAA,CAAA,GAEJ,CACF,CAAA,CAAA,CAAA,CAAA,EAEJ,CAEJ,EClOMO,GAAqB,CAAC,CAAE,GAAAxf,EAAI,QAAAyf,KAAuC,CACjE,KAAA,CAAE,EAAAjf,CAAE,EAAIC,EAAe,EAE3B,OAAAsB,EAACmB,GAAA,CACC,SAAQ,GACR,KAAM,EACN,GAAAlD,EACA,cAAY,cACZ,MAAOyf,GAAS,YAChB,aAAYjf,EAAE,aAAa,CAAA,CAC7B,CAEJ,EAEakf,GAAc,CAAC,CAAE,QAAAD,EAAS,MAAAE,EAAQ,MAA8B,CACrE,KAAA,CAAE,EAAAnf,CAAE,EAAIC,EAAe,EACvBT,EAAK4f,GAAM,EAEjB,OAAOD,EACL5d,EAACyd,GAAmB,CAAA,GAAAxf,EAAQ,QAAAyf,CAAkB,CAAA,EAE9C1d,EAACQ,EAAA,CACC,MAAO/B,EAAE,aAAa,EACtB,QAASR,EACT,YAAYwC,EAAS,CAAA,SAAUhC,EAAE,iBAAiB,EAAG,aAAcR,EAAI,EAEvE,SAAA+B,EAACyd,GAAmB,CAAA,GAAAxf,EAAQ,QAAAyf,CAAkB,CAAA,CAAA,CAChD,CAEJ,ECzCaI,GAAgB,CAAC,CAC5B,aAAAC,EAAe,GACf,OAAAC,EAAS,EACX,IAGM,CACE,KAAA,CAAE,EAAAvf,CAAE,EAAIC,EAAe,EAE7B,OAEI2B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqD,EAAA,CACC,KAAK,WACL,MAAO5E,EAAE,UAAU,EACnB,UAAWA,EAAE,cAAc,EAC3B,MAAO,CACL,SAAUA,EAAE,UAAU,CAAA,CACxB,CACF,EACC,CAACsf,GACA/d,EAACie,GAAA,CACC,KAAK,cACL,MAAOxf,EAAE,aAAa,EACtB,UAAWA,EAAE,iBAAiB,EAC9B,MAAO,CACL,SAAUA,EAAE,UAAU,CAAA,CACxB,CACF,EAEDuf,GACChe,EAACqD,EAAA,CACC,KAAK,aACL,MAAO5E,EAAE,uBAAuB,EAChC,UAAWA,EAAE,2BAA2B,CAAA,CAC1C,EAEFuB,EAACie,GAAA,CACC,KAAK,gBACL,MAAOxf,EAAE,eAAe,EACxB,UAAWA,EAAE,mBAAmB,EAChC,MAAO,CACL,SAAUA,EAAE,UAAU,CAAA,CACxB,CAAA,CACF,EACF,CAEJ,ECbMyf,GAAW,kBAEXC,OAAiB,IAAI,CACzB,CAAC,SAAU,KAAK,EAChB,CAAC,MAAO,KAAK,EACb,CAAC,QAAS,OAAO,CACnB,CAAC,EAMYC,GAAoBC,GAAmBF,GAAW,IAAIE,CAAM,EAE5DC,GAAU,CAAC,CACtB,OAAAN,EAAS,GACT,OAAAO,EAAS,GACT,QAAAC,EAAU,EACZ,IAAoB,CACZ,KAAA,CAAE,CAAE,EAAI9f,EAAe,EAEvB,CAAC+f,EAAUC,CAAW,EAAIzf,EAAiB,EAE3C,CAAE,QAAA8C,EAAS,MAAAgI,CAAM,EAAI/H,GAA2B,EAChDqc,EAAStU,EAAM,QAAQ,EAEvB,CAAE,WAAA+R,CAAW,EAAIhd,GAAc,EAC/B6f,EAAyB,CAC7B,GAAI7C,GAAY,wBAA0B,CAAC,EAC3C,GAAIyC,EAAS,CAACL,EAAQ,EAAI,CAAA,CAC5B,EAGE,OAAA7d,EAACD,GAAK,CAAA,UAAU,gBACd,SAAA,CAAAJ,EAAC+D,EAAA,CACC,KAAK,SACL,MAAO,EAAE,eAAe,EACxB,UAAW,EAAE,mBAAmB,EAChC,WAAY,CACV,aAAc4a,EAAuB,CAAC,CACxC,EACA,aAAa,SACb,QAASA,CAAA,CACX,EACCH,GACCxe,EAACQ,EAAA,CACC,MAAO,EAAE,YAAY,EACrB,UACER,EAACS,EAAA,CACC,SAAU,EAAE,gBAAgB,EAC5B,aAAa,YAAA,CACf,EAEF,QAAQ,aAER,SAAAT,EAACkC,GAAA,CACC,KAAK,OACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAAC4e,GAAA,CACC,GAAG,aACH,MAAOzc,EAAM,MACb,SAAAsc,EACA,iBAAkB,EAAE,QAAQ,EAC5B,aAAe1d,GAAU,CACvBoB,EAAM,SAASpB,CAAK,CACtB,EACA,kBAAmB,CAACD,EAAG+d,IAASH,EAAYG,EAAK,IAAI,CAAA,CAAA,CACvD,CAAA,CAEJ,CACF,EAEDR,IAAWH,IACVle,EAAC8d,GAAc,CAAA,aAAcU,EAAS,OAAAR,CAAgB,CAAA,CAAA,EAE1D,CAEJ,EAEac,GAAoB,CAAC,CAChC,SAAA/P,EACA,KAAAvM,EACA,aAAArE,CACF,IAA8B,CACtB,KAAA,CAAE,CAAE,EAAIO,EAAe,EACvB4F,EAAOC,GAAwB,CACnC,cAAe,CAAE,SAAUwK,CAAS,EACpC,KAAM,UAAA,CACP,EAEK,CACJ,aAAAvK,EACA,UAAW,CAAE,QAAAE,CAAQ,CAAA,EACnBJ,EAGF,OAAAjE,EAAC6E,GAAA,CACC,QAAS/E,GAAa,OACtB,MAAO,EAAE,cAAc,EACvB,OAAM,GACN,QAAShC,EACT,QAAS,CACP6B,EAACuD,EAAA,CACC,GAAG,gBAEH,cAAY,UACZ,WAAY,CAACmB,EACb,QAAS,IAAM,CACbF,EAAchF,GAAW,CACvBgD,EAAKhD,CAAM,EACErB,EAAA,CAAA,CACd,EAAE,CACL,EAEC,WAAE,UAAU,CAAA,EAVT,SAWN,EACA6B,EAACuD,EAAA,CACC,GAAG,eAEH,cAAY,SACZ,QAAS4B,GAAc,KACvB,QAAS,IAAM,CACAhH,EAAA,CACf,EAEC,WAAE,QAAQ,CAAA,EAPP,QAAA,CASR,EAEA,SAAA,CAAA6B,EAAC0O,IACC,SAAC1O,EAAAoJ,GAAA,CAAM,SAAE,EAAA,yBAAyB,EAAE,CACtC,CAAA,IACChE,GAAc,CAAA,GAAGd,EAChB,SAAAtE,EAACse,KAAQ,CACX,CAAA,CAAA,CAAA,CACF,CAEJ,EClJaS,GAAkB,CAAC,CAC9B,KAAAvc,EACA,aAAArE,CACF,IAA4B,CACpB,KAAA,CAAE,EAAAM,CAAE,EAAIC,EAAe,EACvB4F,EAAOC,GAAoB,EAC3B,CAAE,QAAAxC,EAAS,aAAAyC,CAAA,EAAiBF,EAE5B0a,EAAclgB,GAAA,EAAgB,YAAY,wBAA0B,CAAC,EAErEmgB,EAAUD,EAAY,OAAO,CACjC,kBACA,iBACA,kBAAA,CACD,EAEKX,EAASlC,GAAS,CACtB,QAAApa,EACA,KAAM,iBACN,aAAckd,EAAQ,CAAC,CAAA,CACxB,EAGC,OAAA5e,EAAC6E,GAAA,CACC,QAAS/E,GAAa,OACtB,MAAO1B,EAAE,cAAc,EACvB,OAAM,GACN,QAASN,EACT,QAAS,CACP6B,EAACuD,EAAA,CACC,GAAG,gBACH,cAAY,UAEZ,QAAS,IAAM,CACbiB,EAAc0a,GAAe,CAC3B1c,EAAK0c,CAAU,EACF/gB,EAAA,CAAA,CACd,EAAE,CACL,EAEC,WAAE,QAAQ,CAAA,EARP,SASN,EACA6B,EAACuD,EAAA,CACC,GAAG,eACH,cAAY,SAEZ,QAAS4B,GAAc,KACvB,QAAS,IAAM,CACAhH,EAAA,CACf,EAEC,WAAE,QAAQ,CAAA,EANP,QAAA,CAQR,EAEA,SAAA,CAAA6B,EAAC0O,IACC,SAAC1O,EAAAoJ,GAAA,CAAM,SAAE3K,EAAA,yBAAyB,EAAE,CACtC,CAAA,IACC2B,GAAK,CAAA,UAAU,gBACd,SAACC,EAAA+E,GAAA,CAAc,GAAGd,EAChB,SAAA,CAAAtE,EAAC+D,EAAA,CACC,KAAK,iBACL,MAAOtF,EAAE,eAAe,EACxB,UAAWA,EAAE,mBAAmB,EAChC,WAAY,CACV,aAAcwgB,EAAQ,CAAC,CACzB,EACA,QAASA,CAAA,CACX,EACCD,EAAY,SAASX,CAAM,GAAMre,EAAA8d,GAAA,CAAc,aAAY,GAAC,IAC5Dtd,EAAU,CAAA,MAAO/B,EAAE,YAAY,EAAG,QAAQ,aACzC,SAAAuB,EAACkC,GAAA,CACC,KAAK,OACL,QAAAH,EACA,aAAc,CAAE,SAAU,EAAG,EAC7B,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAAC4e,GAAA,CACC,GAAG,aACH,MAAOzc,EAAM,MAAM,MACnB,SAAUA,EAAM,MAAM,SACtB,aAAepB,GACboB,EAAM,SAAS,CAAE,GAAGA,EAAM,MAAO,MAAApB,EAAO,EAE1C,kBAAmB,CAACD,EAAG+d,IACrB1c,EAAM,SAAS,CAAE,GAAGA,EAAM,MAAO,SAAU0c,EAAK,IAAM,CAAA,CAAA,CAAA,CAE1D,CAAA,CAGN,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,CAEJ,ECxFMpS,GAAO,iBAEA0S,GAAO,CAAC,CAAE,SAAApQ,EAAU,KAAAvM,EAAM,mBAAAE,KAAoC,CACnE,KAAA,CAAE,YAAArE,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CACJ,QAAAqD,EACA,UAAAkK,EACA,UAAW,CAAE,QAAAxH,CAAQ,GACnBzC,GAA2B,EACzB,CAAE,SAAA2C,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAAC6Y,EAAS0B,CAAU,EAAIngB,EAAoC,EAC5D,CAACogB,EAAkBC,EAAwBC,CAAmB,EAClE9Q,GAAU,EACN,CAAC+Q,EAAgBC,EAAsBC,CAAiB,EAAIjR,GAAU,EACtE,CAACvI,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9ByZ,EAAaxD,GAAS,CAC1B,QAAApa,EACA,KAAMgB,EAAuC,yBAAyB,EACtE,aAAc,OAAA,CACf,EAEDrD,GACE,IAAMrB,EAAY,QAAQ,WAAW,CAAE,GAAI0Q,EAAU,KAAAtC,GAAM,EAC1DmT,GAASR,EAAWQ,CAAI,EACzB,CAAC1Z,CAAG,CACN,EAEM,MAAA2Z,EAAW,MAAOrgB,GAA2B,CAC7C,GAAA,CACI,MAAAsgB,EAAW,MAAMzhB,EAAY,QAAQ,uBACzC,CACE,GAAI0Q,EACJ,KAAAtC,EACF,EACAjN,CACF,EACAU,GAAA,OACE,IAAI,KAAK,CAAC4f,CAAQ,EAAG,CAAE,KAAM,2BAA4B,EACzD,YAAY1B,GAAiB5e,EAAO,QAAU,EAAE,CAAC,EACnD,EACAmF,EAASlG,EAAE,iBAAiB,EAAGuG,EAAa,OAAO,EAC3CoB,EAAA,QACDnB,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CAAA,CAEnC,EAEM8a,EAAY,MAAOb,GAA2B,CAC9C,GAAA,CACI,MAAAc,EAAW,IAAI,SACf,CAAE,KAAAnB,EAAM,GAAGoB,CAAA,EAASf,EAE1B,SAAW,CAAChZ,EAAKnF,CAAK,IAAK,OAAO,QAAQkf,CAAI,EACnCD,EAAA,OAAO9Z,EAAKnF,CAAK,EAGnBif,EAAA,OAAO,OAAQnB,EAAK,KAAM,EAEnC,MAAMxgB,EAAY,QAAQ,kBACxB,CAAE,GAAI0Q,EAAU,KAAAtC,EAAK,EACrBuT,CACF,EACArb,EAASlG,EAAE,eAAe,EAAGuG,EAAa,OAAO,EACzCoB,EAAA,QACDnB,EAAO,CACdL,EAAS,cAAeK,CAAK,CAAA,CAEjC,EAEA,OACG5E,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,iBACpC,SAAA,CACCmW,GAAArf,EAAC8e,GAAA,CACC,SAAU7S,EAAU,UAAU,EAC9B,aAAcqT,EACd,KAAMO,CAAA,CACR,EAEDL,GACExf,EAAA+e,GAAA,CAAgB,aAAcU,EAAsB,KAAMM,EAAW,EAExE1f,EAAC+c,GAAK,CAAA,OAAM,GACV,SAAA,CAAApd,EAACkgB,IACC,SAAClgB,EAAAmgB,GAAA,CAAW,SAAE1hB,EAAA,eAAe,EAAE,CACjC,CAAA,EACAuB,EAACqd,GACC,CAAA,SAAArd,EAAC0O,GACC,CAAA,SAAA1O,EAACoJ,IAAM,SAAE3K,EAAA,WAAW,CAAE,CAAA,CACxB,CAAA,EACF,IACC4e,GACC,CAAA,SAAAhd,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBJ,EACnB,aAAY,GAEZ,SAAA,CAAA1C,EAACiD,GAAA,CACC,KAAMF,EAA2B,yBAAyB,EAC1D,MAAOtE,EAAE,YAAY,EACrB,UAAWA,EAAE,gBAAgB,EAC7B,UAAS,EAAA,CACX,EACCkhB,IAAe,SACbjC,EACC1d,EAAC2d,IAAY,MAAK,GAAC,QAAAD,EAAkB,EAErC,oCAEHiC,IAAe,QACd3f,EAACqD,EAAA,CACC,KAAMN,EAA2B,qBAAqB,EACtD,MAAOtE,EAAE,SAAS,EAClB,UAAWA,EAAE,aAAa,EAC1B,KAAK,KAAA,CACP,IAED6E,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,cAAY,WACZ,QAASf,EACT,WAAY,CAACiC,EAEZ,WAAE,MAAM,CAAA,CACX,EACAzE,EAACuD,EAAA,CACC,cAAY,WACZ,QAAQ,YACR,QAAS,IAAMgc,EAAoB,EAAI,EAEtC,WAAE,iBAAiB,CAAA,CACtB,EACAvf,EAACuD,EAAA,CACC,cAAY,SACZ,QAAQ,YACR,QAAS,IAAMmc,EAAkB,EAAI,EACrC,WAAYC,IAAe,OAE1B,WAAE,QAAQ,CAAA,CAAA,CACb,CACF,CAAA,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,ECxKaS,GAAsB,CAAC,CAClC,SAAArR,EACA,MAAAsR,EACA,QAAAC,CACF,IAAgC,CACxB,KAAA,CAAE,YAAAjiB,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,MAAAH,CAAM,EAAIC,GAAS,EAErB,CAAE,SAAAmG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnCP,EAAOC,GAAwB,CACnC,cAAe,CAAE,WAAYhG,CAAM,CAAA,CACpC,EAEKgiB,EAAW,MAAO/gB,GAA2B,CAC7C,GAAA,CACI,MAAAsgB,EAAW,MAAMzhB,EAAY,QAAQ,YACzC,CACE,GAAI0Q,EACJ,KAAMuR,CACR,EACA9gB,CACF,EACAU,GAAA,OACE,IAAI,KAAK,CAAC4f,CAAQ,EAAG,CAAE,KAAM,2BAA4B,EACzD,YAAY1B,GAAiB5e,EAAO,QAAU,EAAE,CAAC,EACnD,EACSmF,EAAAlG,EAAE,uBAAuB,CAAC,EAC7B4hB,EAAA,QACCpb,EAAO,CACdL,EAAS,sBAAuBK,CAAK,CAAA,CAEzC,EAGE,OAAAjF,EAACkF,GAAA,CACC,QAAQ,SACR,MAAOzG,EAAE,oBAAoB,EAC7B,OAAM,GACN,QAAS4hB,EACT,QAAS,CACPrgB,EAACuD,EAAA,CACC,GAAG,gBACH,cAAY,UAEZ,KAAK,SACL,KAAK,uBAEJ,WAAE,QAAQ,CAAA,EAJP,SAKN,EACAvD,EAACuD,EAAA,CACC,GAAG,eACH,cAAY,SAEZ,QAAQ,OACR,QAAS,IAAM,CACP8c,EAAA,CACR,EAEC,WAAE,QAAQ,CAAA,EANP,QAAA,CAQR,EAEA,SAAArgB,EAACI,GAAA,CACC,GAAG,uBACH,UAAU,gBACV,SAAUkE,EAAK,aAAaic,CAAQ,EAEpC,SAAAvgB,EAACoF,IAAc,GAAGd,EAChB,WAACga,GAAQ,CAAA,OAAM,EAAC,CAAA,CAClB,CAAA,CAAA,CAAA,CACF,CACF,CAEJ,ECnDakC,GAAa,MACxBniB,EACAiG,EACArG,EACAwO,EACAgU,IACG,CACC,GAAA,CACI,MAAAT,EAAW,IAAI,SACf,CAAE,KAAAnB,EAAM,GAAGoB,CAAA,EAAS3b,EACnB,OAAA,QAAQ2b,CAAI,EAAE,IAAI,CAAC,CAAC/Z,EAAKnF,CAAK,IACnCif,EAAS,OACP9Z,IAAQ,SAAW,iBAAmBA,EACtCnF,EAAM,SAAS,CAAA,CAEnB,EACSif,EAAA,OAAO,OAAQnB,CAAI,EAE5B,MAAMxgB,EAAY,QAAQ,UAAU,CAAE,GAAAJ,EAAI,KAAAwO,GAAQuT,CAAQ,EACjDS,EAAA,QACFxb,EAAO,CACdwb,EAASxb,CAAK,CAAA,CAElB,EAEayb,GAAiB,CAAC,CAC7B,GAAAziB,EACA,KAAAwO,EACA,QAAApI,EACA,SAAAsc,CACF,IAA2B,CACnB,KAAA,CAAE,YAAAtiB,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAACiL,EAAMiX,CAAO,EAAI3hB,EAAS,EAAK,EAChC,CAACsT,EAAMsO,CAAO,EAAI5hB,EAAoC,EACtDqF,EAAOC,GAA4B,CAAE,KAAM,WAAY,EACvD,CACJ,aAAAC,EACA,UAAW,CAAE,QAAAE,CAAQ,CAAA,EACnBJ,EAEE,CAAE,SAAAK,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC4Q,EAAUnR,GAA6B,CAC3Ckc,GAAWniB,EAAaiG,EAAMrG,EAAIwO,EAAOxH,GAAU,CAC7CA,EACFL,EAAS,cAAeK,CAAK,EAE7BN,EAASlG,EAAE,eAAe,EAAGuG,EAAa,OAAO,CACnD,CACD,CACH,EAEM6a,EAAW,SAAY,CACvB,GAAA,CACF,MAAM3Z,EAAM,MAAM7H,EAAY,QAAQ,YAAY,CAChD,GAAAJ,EACA,KAAAwO,CAAA,CACD,EACDoU,EAAQ3a,CAAG,EACXhG,GAAA,OACE,IAAI,KAAK,CAACgG,EAAI,UAAW,EAAG,CAC1B,KAAM,0BAAA,CACP,EACD,aACF,EAEAvB,EAASlG,EAAE,iBAAiB,EAAGuG,EAAa,OAAO,QAC5CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CAAA,CAEnC,EAGE,OAAAjF,EAACkF,GAAA,CACC,QAAS/E,GAAa,OACtB,aAAY1B,EAAE,oCAAoC,EAClD,SACGiQ,GACC,CAAA,SAAA,CAAA1O,EAAC8S,GAAM,CAAA,aAAa,KAAM,SAAArU,EAAE,+BAA+B,EAAE,EAC5DuB,EAAAoJ,GAAA,CAAM,SAAE3K,EAAA,sCAAsC,CAAE,CAAA,CAAA,EACnD,EAEF,OAAQ,GACR,QAAA4F,EACA,QAAS,CACPrE,EAACuD,EAAA,CACC,GAAG,gBAEH,cAAY,UACZ,QAAQ,UACR,WAAY,CAACmB,GAAW,CAAC6N,EACzB,QAAS,IAAM,CACT5I,GACFnF,EAAaiR,CAAM,EAAE,EAEfpR,EAAA,CACV,EAEC,WAAE,SAAS,CAAA,EAXR,SAYN,EACArE,EAACuD,EAAA,CACC,GAAG,eAEH,cAAY,SACZ,QAAS4B,GAAc,KACvB,QAASwb,EAER,WAAE,QAAQ,CAAA,EALP,QAAA,CAOR,EAEA,SAAAtgB,EAAC+E,GAAc,CAAA,GAAGd,EAChB,SAAA,CAACjE,EAAAD,GAAA,CAAK,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAO/B,EAAE,cAAc,EACvB,QAAQ,eACR,gBAAe,GAEf,WAACqiB,GACC,CAAA,SAAA,CAAA9gB,EAAC+gB,GACC,CAAA,SAAA/gB,EAACoa,GAAA,CACC,UAAW,CAACzQ,EACZ,KAAK,mBACL,SAAU,IAAMiX,EAAQ,EAAK,EAC7B,MAAOniB,EAAE,2BAA2B,EACpC,GAAG,2BAAA,CAAA,EAEP,IACCsiB,GACC,CAAA,SAAA/gB,EAACoa,GAAA,CACC,UAAWzQ,EACX,KAAK,mBACL,SAAU,IAAMiX,EAAQ,EAAI,EAC5B,MAAOniB,EAAE,yBAAyB,EAClC,GAAG,yBAAA,CAAA,CAEP,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EACC,CAACkL,GACA3J,EAACQ,EAAA,CACC,MAAO/B,EAAE,aAAa,EACtB,QAAQ,cACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAGF,SAAA4B,EAAC+B,GAAM,CAAA,UAAS,GACd,SAAA,CAACpC,EAAAqC,GAAA,CAAU,SAAQ,GACjB,SAAArC,EAAC2d,IAAY,MAAK,GAAC,QAASpL,CAAA,CAAM,CACpC,CAAA,IACClQ,GACC,CAAA,SAAArC,EAACuD,EAAA,CACC,QAAQ,YACR,cAAY,WACZ,QAASsc,EAER,WAAE,UAAU,CAAA,CAAA,CAEjB,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,CACF,EAEJ,EACClW,GAAQ3J,EAACse,GAAQ,CAAA,QAAO,EAAC,CAAA,CAAA,CAC5B,CAAA,CAAA,CACF,CAEJ,ECvMa0C,GAAsB,CAAC,CAClC,GAAA/iB,EACA,KAAAwO,EACA,QAAApI,CACF,IAAgC,CACxB,KAAA,CAAE,YAAAhG,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB4F,EAAOtC,GAAmC,EAC1C,CAAE,aAAAwC,GAAiBF,EAEnB,CAAE,SAAAK,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC4Q,EAAUnR,GAA6B,CAC3Ckc,GAAWniB,EAAaiG,EAAMrG,EAAIwO,EAAOxH,GAAU,CAC7CA,EACFL,EAAS,cAAeK,CAAK,EAE7BN,EAASlG,EAAE,eAAe,EAAGuG,EAAa,OAAO,CACnD,CACD,CACH,EAGE,OAAAhF,EAACC,GAAA,CACC,KAAM,GACN,aAAcoE,EACd,oBAAoB,SACpB,SAAS,YACT,UAAW,IAAM,CACfG,EAAaiR,CAAM,EAAE,EACbpR,EAAA,CACV,EAEA,SAAArE,EAACoF,GAAc,CAAA,GAAGd,EAChB,SAAAtE,EAACse,IAAQ,QAAO,GAAC,OAAM,EAAC,CAAA,CAC1B,CAAA,CAAA,CACF,CAEJ,ECfM2C,GAAO,CAAC,eAAgB,iBAAiB,EAGzCC,GAAmE,CACvE,eAAgB,CACd,KAAMne,EAA2B,kCAAkC,EACnE,MAAO,oBACP,IAAK,iBACP,EACA,kBAAmB,CACjB,KAAMA,EAA2B,yBAAyB,EAC1D,MAAO,uBACP,IAAK,mBAAA,CAET,EAWMoe,GAAa,CAAC,CAClB,SAAApS,EACA,QAAA2O,EACA,KAAAjR,EACA,UAAA2U,EACA,WAAAC,EACA,SAAAC,CACF,IAAuB,CACf,KAAA,CAAE,EAAA7iB,CAAE,EAAIC,EAAe,EACvB,CAAE,QAAAqD,EAAS,MAAAgI,CAAM,EAAI/H,GAA2B,EAChDuf,EAAQL,GAAazU,CAAI,EAAE,MAC3BvG,EAAMgb,GAAazU,CAAI,EAAE,IACzBlL,EAAO2f,GAAazU,CAAI,EAAE,KAE1B,CAAC+U,EAAkB/G,CAAkB,EAAIhM,GAAU,EAEnDgT,EAAU1X,EAAMxI,CAAwB,EAC9C,OAEKlB,EAAA2C,EAAA,CAAA,SAAA,CACCwe,GAAAxhB,EAACogB,GAAA,CACC,QAAS3T,EACT,SAAAsC,EACA,MAAO0L,CAAA,CACT,IAEDiH,GAAU,CAAA,MAAOjjB,EAAE8iB,CAAK,EAAG,UAAU,uBACpC,SAAA,CAACvhB,EAAA0O,GAAA,CAAY,UAAU,gBACrB,SAAC1O,EAAAoJ,GAAA,CAAM,WAAE,GAAGmY,CAAK,SAAS,CAAE,CAAA,EAC9B,EACCvhB,EAAA8C,GAAA,CAAW,KAAK,iBAAiB,aAAY,GAC5C,SAAA9C,EAACQ,EAAA,CACC,UACGR,EAAAS,EAAA,CAAS,SAAUhC,EAAE,GAAGyH,CAAG,MAAM,EAAG,aAAcA,CAAK,CAAA,EAE1D,MAAOzH,EAAEyH,CAAG,EACZ,QAASA,EACT,gBAAe,GAEf,SAAAlG,EAACkC,GAAA,CACC,KAAAX,EACA,QAAAQ,EACA,aAAa,QACb,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTnC,EAACqI,GAAA,CACC,cAAanC,EACb,GAAIA,EACJ,MAAOzH,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAW0D,EAAM,QAAU,OAC3B,SAAU,CAAC0E,EAAQ9F,IAAU,CACrB,MAAAmC,EAAInC,EAAM,SAAS,EACrBmC,IAAM,QACRke,EAAU3U,CAAI,EACdtK,EAAM,SAASe,CAAC,GAEhBme,EAAW5U,EAAM,EAAK,CAE1B,EACA,aAAYhO,EAAEyH,CAAG,CAAA,CAAA,CACnB,CAAA,CAEJ,CAAA,CAEJ,CAAA,CAAA,EACF,EACCwX,GAAS,aAAe+D,IAAY,UAClCrE,GAAK,CAAA,OAAM,GACV,SAAApd,EAACqd,IAAS,UAAU,sBAClB,SAAChd,EAAAD,GAAA,CAAK,aAAY,GAChB,SAAA,CAAAJ,EAAC2d,IAAY,QAAAD,EAAkB,IAC9Bpa,GACC,CAAA,SAAA,CAAAtD,EAACuD,EAAA,CACC,QAAQ,YACR,QAAS,IAAM8d,EAAW5U,EAAM,EAAI,EAEnC,WAAE,YAAY,CAAA,CACjB,EACAzM,EAACuD,EAAO,CAAA,QAAQ,YAAY,QAAS,IAAM+d,EAAS7U,CAAI,EACrD,SAAEhO,EAAA,WAAW,CAChB,CAAA,EACAuB,EAACuD,GAAO,QAAQ,WAAW,QAASkX,EACjC,SAAAhc,EAAE,QAAQ,CACb,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EAEJ,CAEJ,EAEakjB,GAAW,CAAC,CAAE,SAAA5S,EAAU,KAAAvM,KAA0B,CACvD,KAAA,CAAE,YAAAnE,CAAY,EAAIC,EAAe,EAEjC,CAAE,CAAE,EAAII,EAAe,EACvB,CAACkjB,EAAWC,CAAY,EAAI5iB,EAAmB,EAC/C,CAACye,EAAS0B,CAAU,EAAIngB,EAAsC,EAC9D,CAAC6iB,EAAcC,CAAe,EAAI9iB,EAAmB,EACrD,CAAC+iB,EAAYC,CAAa,EAAIhjB,EAAmB,EACjD,CAACmH,EAAS8b,CAAU,EAAIjjB,EAAS,CAAC,EAElC,CAAE,SAAA2J,CAAS,EAAI5G,GAAe,EAC9B,CAAE,SAAA2C,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEzCnF,GACE,IACE,QAAQ,IACNuhB,GAAK,IAAKxU,GACRpO,EAAY,QAAQ,WAAW,CAAE,GAAI0Q,EAAU,KAAAtC,CAAM,CAAA,CAAA,CAEzD,EACDmT,GAASR,EAAWQ,CAAI,EACzB,CAACxZ,CAAO,CACV,EAEM,MAAAyZ,EAAW,MAAOpT,GAAmB,CACnC,MAAAgL,EAAQwJ,GAAK,QAAQxU,CAAI,EAC3B,GAAA,CACF,MAAMmT,EAAO,CAAC,GAAIlC,GAAW,EAAG,EAChCkC,EAAKnI,CAAK,EAAI,MAAMpZ,EAAY,QAAQ,YAAY,CAClD,GAAI0Q,EACJ,KAAAtC,CAAA,CACD,EAED2S,EAAWQ,CAAI,EACf1f,GAAA,OACE,IAAI,KAAK,CAAC0f,EAAKnI,CAAK,EAAE,UAAW,EAAG,CAClC,KAAM,0BAAA,CACP,EACD,aACF,EAEA9S,EAAS,EAAE,iBAAiB,EAAGK,EAAa,OAAO,QAC5CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CAAA,CAEnC,EAEMiB,EAAM4b,EAAeZ,GAAaY,CAAY,EAAE,IAAM,GACtD,CAACK,EAAqBC,CAAc,EAAI1b,GAAiB,CAC7D,SAAU,EAAE,iBAAkB,CAC5B,IAAK,EAAER,CAAG,CAAA,CACX,EACD,WAAY,EAAE,wBAAyB,CACrC,IAAK,EAAEA,CAAG,CAAA,CACX,EACD,oBAAqB,MACrB,kBAAmB,KACnB,UAAW,IAAM,CACf0C,EAASsY,GAAaY,CAAa,EAAE,KAAM,OAAO,EAC7Ctf,EAAA,CAAA,CACP,CACD,EAEK,CAAC6f,EAAwBC,CAAiB,EAAI5b,GAAiB,CACnE,SAAU,oBACV,WAAY,2BACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAW,IAAM,CACfmZ,EAASiC,CAAa,CAAA,CACxB,CACD,EAED,OACGzhB,EAAA6I,GAAA,CAAY,QAAQ,QAAQ,UAAU,iBACpC,SAAA,CACC0Y,GAAA5hB,EAAC0gB,GAAA,CACC,GAAI3R,EACJ,KAAM6S,EACN,QAAS,IAAM,CACbC,EAAa,MAAS,EACjBrf,EAAA,EACL0f,EAAW9b,EAAU,CAAC,CACxB,EACA,SAAU,IAAM,CACdwC,EAASsY,GAAaY,CAAa,EAAE,KAAM,OAAO,EAClDD,EAAa,MAAS,CAAA,CACxB,CACF,IAEDO,EAAe,EAAA,IACfE,EAAkB,EAAA,EAClBrB,GAAK,IAAI,CAACxU,EAAMgL,IACfpX,EAAC2C,GAAA,CACE,SAAA,CAAAgf,IAAevV,GACdzM,EAACghB,GAAA,CACC,GAAIjS,EACJ,KAAAtC,EACA,QAAS,IAAMwV,EAAc,MAAS,CAAA,CACxC,EAEFjiB,EAACmhB,GAAA,CACC,SAAApS,EACA,QAAS2O,IAAUjG,CAAK,EACxB,KAAAhL,EACA,UAAWoV,EACX,WAAY,CAAClY,EAAM4Y,IAAU,CAC3BR,EAAgBpY,CAAI,EACf4Y,EAGoBF,EAAA,EAFHF,EAAA,CAIxB,EACA,SAAU,IAAMF,EAAcxV,CAAI,CAAA,CAAA,CACpC,CAAA,EAtBaA,CAuBf,CACD,CAAA,EACH,CAEJ,EC5NM+V,GAAgB,YAQhBC,GAAe,CAAC,CACpB,SAAA1T,EACA,QAAA3I,EACA,kBAAAsc,EACA,GAAG7V,CACL,IAAyB,CACjB,KAAA,CAAE,YAAAxO,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAAE,UAAAmF,CAAU,EAAIC,GAAU,EAE1B0Y,EAAkB5hB,GAAeA,EAAM,KAAOyhB,GAC9CtY,EAAYF,EAAU,gBAAgB,GAAK0Y,EAG/C,OAAA1iB,EAAC4iB,GAAA,CACC,WAAYD,EAAe9V,CAAK,GAAK,CAAC3C,EACtC,YAAa2C,EACb,KAAMA,EAAM,KACZ,SAAU,MAAO9L,GAAU,CACrB,GAAA,CACI,MAAA8hB,GACJxkB,EACA0Q,EACAlC,EACAA,EAAM,KACN9L,CACF,EACA4D,EAASlG,EAAE,oBAAoB,EAAGuG,EAAa,OAAO,EAC9CoB,EAAA,QACDnB,EAAO,CACdL,EAAS,mBAAoBK,CAAK,CAAA,CACpC,CACF,CACF,CAEJ,EAEa6d,GAAe,CAAC,CAC3B,SAAA/T,EACA,SAAA3Q,EACA,WAAA2kB,EACA,kBAAAL,CACF,IAAyB,CACjB,KAAA,CAAE,YAAArkB,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,CAAM,EAAIC,GAAS,EACrBwkB,EAAaC,GAAc,EAE3B,CAACC,EAAYC,CAAa,EAAIlkB,EAAqB,MAAM,EAEzD,CAACmkB,EAAgBC,CAAiB,EAAIpkB,EAC1CqkB,GAAgB,IAClB,EAEM,CAACC,EAAeC,CAAgB,EAAIvkB,EAAS,EAAK,EAElD,CAACghB,EAAMwD,CAAO,EAAIxkB,EAAsC,EACxD,CAACykB,EAAcC,CAAmB,EAAI1kB,EAAgB,CAAA,CAAE,EACxD2kB,EAAmBpM,GACvBmM,EAAoBnM,EAAK,OAAO,CAAC,CAAE,GAAAvZ,CAAG,IAAMA,IAAOukB,EAAa,CAAC,EAC7D,CAACqB,EAAWC,CAAY,EAAI7kB,EAAS,EAAK,EAE1C,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAC1BmH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAC9Byc,EAAkB5hB,GAAeA,EAAM,KAAOyhB,GAE9C,CAAE,UAAAxY,CAAU,EAAIC,GAAU,EAC1BC,EAAYF,EAAU,gBAAgB,GAAK0Y,EAC3CqB,EAAW/Z,EAAU,cAAc,GAAK0Y,EAExCsB,EAAS,MAAOxa,EAAgBC,EAAc8L,KAAoB,CAChE,MAAA0O,GACJ,MAAM5lB,EAAY,QAAQ,wBAAwB,CAAE,GAAI0Q,EAAU,EAC9DmV,EACJ,MAAM7lB,EAAY,QAAQ,yBAAyB,CAAE,GAAI0Q,EAAU,EAC/DoV,EAAe,MAAM9lB,EAAY,aAAa,KAAK,EAEnD+lB,GAAQnmB,IACZkmB,EAAa,KAAME,IAAgBpmB,KAAOomB,GAAY,EAAE,EAEpDC,GAAWJ,EAAqB,IAAK1K,IAAM,CACzC,MAAA3M,GAAQuX,GAAK5K,GAAE,EAAG,EAMjB,MALU,CACf,GAAGA,GACH,KAAM+K,GAAY,SAClB,YAAa1X,IAAO,WACtB,CACO,CACR,EAEK2X,GAAgBP,GAAoB,IAAKzK,IAAM,CAC7C,MAAA3M,GAAQuX,GAAK5K,GAAE,EAAG,EAMjB,MALU,CACf,GAAGA,GACH,KAAM+K,GAAY,QAClB,YAAa1X,IAAO,WACtB,CACO,CACR,EAED,IAAI2K,GAAO,CAAC,GAAG8M,GAAU,GAAGE,EAAa,EACzC,MAAMvb,GAAQuO,GAAK,IAAK5B,IAAQA,GAAI,IAAI,EAExC6N,EACEU,EACG,OAAQtX,IAAU,CAAC5D,GAAM,SAAS4D,GAAM,IAAI,CAAC,EAC7C,OAAQA,IAAUA,GAAM,WAAazO,CAAQ,CAClD,EAEAoZ,GAAOwL,EAAWxL,GAAMiN,GAAS,MAAM,CAAC,EAEpCV,GACFvM,GAAK,QAAQ,CACX,GAAIgL,GACJ,KAAM/jB,EAAE,qBAAsB,CAAE,WAAAskB,EAAY,EAC5C,KAAMO,GAAgB,KACtB,YAAa7kB,EAAE,2BAA2B,CAAA,CAC3C,EAGH,MAAMqR,GACJoT,IAAe,OAASwB,GAAWnP,EAAM,EAAIoP,GAAWvB,CAAc,EAClEwB,GAAW,OAAOpb,CAAK,EAEtB,OAAAgO,GAAK,OAAO1H,EAAM,EAAE,MAAM8U,GAAUA,GAAW,OAAOnb,CAAG,CAAC,CACnE,EAEM,CAACuN,EAAoBC,EAAa,EAAIvQ,GAAiB,CAC3D,SAAUjI,EAAE,oBAAqB,CAC/B,MAAOilB,EAAa,OACpB,KAAMA,EAAa,CAAC,GAAG,IAAA,CACxB,EACD,WAAY,4BACZ,oBAAqB,SACrB,sBAAuBve,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACI,MAAA0f,GACJxmB,EACA0Q,EACA2U,EAAa,CAAC,EACdA,EAAa,CAAC,EAAE,IAClB,EACA/e,EAASlG,EAAE,0BAA0B,EAAGuG,EAAa,OAAO,EACpDoB,EAAA,QACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAAA,CAC1C,CACF,CACD,EAED,OAEK5E,EAAA2C,EAAA,CAAA,SAAA,CACCid,GAAAjgB,EAAC8kB,GAAA,CACC,aAAc7E,EACd,WAAA8C,EACA,KAAMQ,EACN,aAAc,IAAMC,EAAiB,CAACD,CAAa,EACnD,MAAO,MAAOxR,GAAW,CACnB,GAAA,CACF,MAAM,QAAQ,IACZA,EAAO,IACL,MAAOlF,GACL,MAAMkY,GACJ1mB,EACA0Q,EACAlC,EAAM,MACNA,EAAM,IAAA,CACR,CAEN,EACAlI,EAASlG,EAAE,oBAAoB,EAAGuG,EAAa,OAAO,EAC9CoB,EAAA,QACDnB,EAAO,CACdL,EAAS,mBAAoBK,CAAK,CAAA,CACpC,CACF,CACF,EAGFjF,EAAC+G,GAAA,CAEC,OAAAid,EACA,aAAc,mBAAmB9d,CAAG,GACpC,qBACEgd,IAAe,OAAS,eAAiB,OAE3C,aAAY,GACZ,YAAW,GACX,YAAaA,IAAe,OAC5B,SAAW1L,GAASoM,EAAgB,CAAC,GAAGpM,CAAI,CAAC,EAC7C,oBACExX,EAACqV,GAAA,CACC,WAAA6N,EACA,SAAWA,GAAeC,EAAcD,CAAU,CAAA,CACpD,EAEF,YAEI7iB,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACglB,GAAA,CACC,WAAA9B,EACA,KAAME,EACN,SAAWF,GAAeC,EAAcD,CAAU,EAClD,OAASniB,GAAU,CACjBsiB,EAAkBtiB,CAAK,EACfqF,EAAA,CAAA,CACV,CACF,EACC8D,GAEG7J,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiX,GAAc,EAAA,EACdjX,EAAAiH,GAAA,CACC,SAACjH,EAAAuD,EAAA,CAAO,QAAS,IAAMigB,EAAiB,EAAI,EACzC,SAAA/kB,EAAE,gBAAgB,CACrB,CAAA,EACF,IACCwI,GACC,CAAA,SAAAjH,EAACilB,GAAA,CACC,SAAAlW,EACA,aAAA2U,EACA,QAAAtd,CAAA,CAAA,EAEJ,IACCa,GACC,CAAA,SAAAjH,EAAC0V,GAAA,CACC,aAAe/U,GAAWmjB,EAAanjB,CAAM,EAC7C,OAASC,GACPZ,EAACa,GAAA,CACC,cAAY,QACZ,aAAW,eACX,IAAAD,EACA,QAAQ,QACR,QAAS,IAAMkjB,EAAa,CAACD,CAAS,EACtC,WAAYA,EAEZ,WAACqB,GAAc,CAAA,CAAA,CAAA,CACjB,EAEF,OAAQrB,EAER,WAACxM,GACC,CAAA,SAAArX,EAACsX,GAAA,CAEC,WAAYoM,EAAa,SAAW,EACpC,QAAS,SAAY,CACf,GAAA,CACF,MAAM,QAAQ,IACZA,EAAa,IAAK9N,GAChBiP,GACExmB,EACA0Q,EACA,CAAE,GAAG6G,CAAI,EACTA,EAAI,IAAA,CACN,CAEJ,EAEAkO,EAAa,EAAK,EAClBF,EAAgB,CAAA,CAAE,EACTjf,EAAAlG,EAAE,0BAA0B,CAAC,EAC9B2H,EAAA,QACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAAA,CAE5C,EAEC,WAAE,QAAQ,CAAA,EAxBP,WAAA,CA0BR,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAAA,CAAA,EAEJ,EAEF,QAAS,CACP,CACE,KAAM,OACN,WAAY,sBACZ,aAAe2Q,GACT+M,EAAe/M,CAAG,EAElB5V,EAACkP,GAAK,CAAA,GAAIiW,GAAiB,CAAE,MAAA5mB,EAAO,SAAAwQ,CAAU,CAAA,EAC3C,SAAA6G,EAAI,IACP,CAAA,EAGGA,EAAI,IAEf,EACA,CACE,KAAM,OACN,WAAY,eACZ,aAAeA,GACb5V,EAACyiB,IAAa,SAAA1T,EAAoB,QAAA3I,EAAmB,GAAGwP,CAAK,CAAA,CAEjE,EACA,CAAE,KAAM,cAAe,eAAgB,CAACwP,GAAqB3mB,CAAC,CAAC,CAAE,CACnE,EACA,QACEyL,EACI,CACE,CACE,MAAOzL,EAAE,QAAQ,EACjB,WAAY,MAAOmX,IACDgO,EAAA,CAAChO,CAAG,CAAC,EACFoB,EAAA,EACZ,GACT,CACF,EAEF,CAAC,EAEP,WACEhX,EAACmH,GAAA,CACC,QAAS1I,EAAE,mBAAmB,EAC9B,aAAcA,EAAE,+BAA+B,EAC/C,kBAAmBA,EAAE,gCAAgC,EACrD,gBAAiB,IAAM+kB,EAAiB,EAAI,CAAA,CAAA,CAC9C,EA1IGtd,CAAA,CA4IP,EACF,CAEJ,EC1Xamf,GAAmB,CAAC,CAC/B,KAAAC,EACA,KAAAC,EACA,MAAAva,CACF,IAA6B,CACrB,KAAA,CAAE,CAAE,EAAItM,EAAe,EAE7B,OAAO6mB,EACLvlB,EAAClD,GAAA,CACC,GAAIkO,EACJ,UACGzN,GACC,CAAA,SAAAyC,EAACib,IAAsB,GAAG,OAAO,KAAAqK,EAAY,MAAAta,CAAA,CAAc,CAC7D,CAAA,EAGF,SAAAhL,EAACmB,GAAA,CACC,GAAI,aAAa6J,CAAK,GACtB,KAAM,GACN,MAAOsa,EACP,aAAYta,CAAA,CAAA,CACd,CAAA,EAGD3K,EAAAyU,GAAA,CAAW,QAAQ,KAAK,GAAI9J,EAC3B,SAAA,CAAChL,EAAA+U,GAAA,CAAiB,UAAW/U,EAAAgD,EAAA,CAAG,SAAE,EAAA,GAAGgI,CAAK,IAAI,CAAE,CAAA,EAAK,aAAa,KAAK,IACtEiK,GAAgB,CAAA,SAAA,EAAE,GAAGjK,CAAK,YAAY,CAAE,CAAA,CAAA,EAC3C,CAEJ,ECCMwa,GAAkB,CAAC,CACvB,gBAAAC,CACF,IAEM,CACJ,KAAM,CAACvf,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAChC,OAAAc,GAAU,IAAM,CACdoG,EAAOD,EAAM,CAAC,CAAA,EACb,CAACuf,CAAe,CAAC,EAElBzlB,EAAC+G,GAAA,CAEC,OAAQ,IAAM,QAAQ,QAAQ0e,CAAe,EAC7C,aAAa,2BACb,qBAAqB,oBACrB,cAAY,6BACZ,QAAS,CACP,CACE,KAAM,aACN,WAAY,MACd,EACA,CACE,KAAM,gBACN,WAAY,mBACd,EACA,CACE,KAAM,gBACN,WAAY,UACd,EACA,CACE,KAAM,gBACN,WAAY,UAAA,CACd,CACF,EAtBKvf,CAuBP,CAEJ,EAEMwf,GAAiB,CAAC,CACtB,eAAAC,CACF,IAEM,CACJ,KAAM,CAACzf,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAChC,OAAAc,GAAU,IAAM,CACdoG,EAAOD,EAAM,CAAC,CAAA,EACb,CAACyf,CAAc,CAAC,EAGjB3lB,EAAC+G,GAAA,CAEC,OAAQ,IAAM,QAAQ,QAAQ4e,CAAc,EAC5C,aAAa,6BACb,qBAAqB,gBACrB,cAAY,gCACZ,QAAS,CACP,CACE,KAAM,OACN,WAAY,MACd,EACA,CACE,KAAM,cACN,WAAY,QAAA,CACd,CACF,EAdKzf,CAeP,CAEJ,EAEa0f,GAAiB,CAAC,CAAE,SAAA7W,EAAU,SAAA3Q,KAAoC,CACvE,KAAA,CAAE,YAAAC,CAAY,EAAIC,EAAe,EAEjCunB,EAAS,SACT,CAAE,EAAApnB,CAAE,EAAIC,EAAe,EACvB,CAAE,QAAAC,CAAQ,EAAIC,GAAQ,EACtB,CAAE,MAAAL,CAAM,EAAIC,GAAS,EACrBsnB,EAAchnB,KAAgB,oBAAqBV,CAAQ,EAE3D,CAAC2nB,EAAkBC,CAAmB,EAAI/mB,EAE9C,CAAA,CAAE,EACE,CAACgnB,EAAaC,CAAc,EAAIjnB,EAAS,EAAK,EAC9C,CAACF,EAAUC,CAAW,EAAIC,EAAmB,CAAC4mB,CAAM,CAAC,EACrD,CAACM,EAAWC,CAAY,EAAInnB,EAAS,CAAC,EAEtC,CAACiH,EAAKC,CAAM,EAAIlH,EAAS,EAAE,EAC3BmH,EAAU,IAAMD,EAAO,OAAO,KAAK,EAAE,QAAS,CAAA,EAAE,EAChD,CAACwf,EAAgBU,CAAiB,EAAIpnB,EAC1C,CAAA,CACF,EACM,CAACwmB,EAAiBa,CAAkB,EAAIrnB,EAE5C,CAAA,CAAE,EACE,CAACod,EAAaC,CAAc,EAAIrd,EAAS,EAAE,EAC3C,CAACsnB,EAAUC,CAAW,EAAIvnB,EAAS,EAAE,EACrC,CAACwnB,EAASC,CAAU,EAAIznB,EAAS,EAAE,EAEnC0nB,EAAcC,GAAO,IAAI,EACzBC,EAAcD,GAAO,IAAI,EACzBE,EAAcF,GAAO,IAAI,EACzBG,GAAcH,GAAO,IAAI,EACzBI,EAAcJ,GAAO,IAAI,EAEzBtiB,EAAOC,GAAQ,EAEf,CAAE,UAAAyF,EAAU,EAAIC,GAAU,EAC1Bgd,GAAejd,GAAU,YAAY,EAE3CtK,OAAAA,GACE,IAAMrB,EAAY,QAAQ,yBAAyB,CAAE,GAAI0Q,EAAU,EAClEmV,GAAyB8B,EAAoB9B,CAAoB,EAClE,CAAA,CACF,EAEAxkB,GACE,SAAY,CACJ,MAAAmN,EAAQ9N,EAAS,KAAK,GAAG,EACzB4mB,EAAiB,MAAMtnB,EAAY,QAAQ,mBAAmB,CAClE,GAAI0Q,EACJ,cAAexQ,EACf,MAAAsO,EACA,KAAM,SAAA,CACP,EASM,MAAA,CACL,WARkB,MAAMxO,EAAY,QAAQ,2BAA2B,CACvE,GAAI0Q,EACJ,MAAAlC,CAAA,CACD,EAMC,eAAA8Y,CACF,CACF,EACA,CAAC,CAAE,WAAAuB,EAAY,eAAAvB,KAAqB,CAClCU,EAAkBV,CAAc,EACrBuB,EAAA,IAAKC,IAAW,CACzBA,GAAO,KAAOrB,EAAY,KACvBnc,IAASA,GAAK,KAAOwd,GAAO,cAC/B,CAAA,CACD,EAEDb,EAAmBY,CAAU,EACrB9gB,EAAA,CACV,EACA,CAACrH,CAAQ,CACX,EAEAW,GACE,SAAY,CACJ,MAAAmN,EAAQ9N,EAAS,KAAK,GAAG,EACzBwmB,EAAOjhB,EAAK,UAAU,MAAM,EAC9B,OAACihB,EAEE,MAAM,QAAQ,IAAI,CACvBlnB,EAAY,QAAQ,4BAA4B,CAC9C,GAAI0Q,EACJ,OAAQwW,EAAK,CAAC,EACd,MAAA1Y,CAAA,CACD,EACDxO,EAAY,QAAQ,yBAAyB,CAC3C,GAAI0Q,EACJ,OAAQwW,EAAK,CAAC,EACd,MAAA1Y,CAAA,CACD,EACDxO,EAAY,QAAQ,wBAAwB,CAC1C,GAAI0Q,EACJ,OAAQwW,EAAK,CAAC,EACd,MAAA1Y,CACD,CAAA,CAAA,CACF,EAlBiB,CAAC,CAmBrB,EACA,CAAC,CAACwP,EAAakK,EAAUE,EAAO,IAAM,CACrBnK,EAAAxc,GAAgBuc,CAAW,CAAC,EAC/BmK,EAAA1mB,GAAgBymB,CAAQ,CAAC,EAC1BG,EAAA5mB,GAAgB2mB,EAAO,CAAC,CACrC,EACA,CAACniB,EAAK,UAAU,MAAM,EAAGvF,CAAQ,CACnC,EAIIsB,EAAA2C,EAAA,CAAA,SAAA,CAAC3C,EAAA6I,GAAA,CAAY,QAAQ,QAClB,SAAA,CAAAvK,GACEqB,EAAA0O,GAAA,CAAY,UAAU,gCACrB,WAACtF,GACC,CAAA,SAAA,CAAApJ,EAAConB,GAAmB,EAAA,EAAE,IAAE3oB,EAAE,iBAAiB,CAAA,CAAA,CAC7C,CACF,CAAA,EAEF4B,EAACD,GAAK,CAAA,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAO/B,EAAE,gBAAgB,EACzB,QAAQ,iBACR,UACEuB,EAACS,EAAA,CACC,SAAUhC,EAAE,oBAAoB,EAChC,aAAa,gBAAA,CACf,EAGF,SAAA4B,EAAC+B,GAAM,CAAA,UAAS,GACd,SAAA,CAACpC,EAAAqC,GAAA,CAAU,SAAQ,GACjB,SAAArC,EAACkN,GAAA,CACC,SAAS,iBACT,QAASC,GAAc,eACvB,mBAAoB1O,EAAE,gBAAgB,EACtC,SAAU,IAAMynB,EAAe,CAACD,CAAW,EAC3C,OAAQA,EACR,WAAYlnB,EACZ,SAAWgC,GAAU,CACnB,MAAMgb,EAAShb,EACXhC,EAAS,SAASgd,CAAM,EACtBA,IAAW8J,GACb7mB,EAAYD,EAAS,OAAQwQ,IAASA,KAASwM,CAAM,CAAC,EAGxD/c,EAAY,CAAC,GAAGD,EAAUgd,CAAM,CAAC,CAErC,EACA,kBAAiBtd,EAAE,gBAAgB,EACnC,gBAAiBA,EAAE,2BAA2B,EAE7C,SAAiBsnB,EAAA,IAAI,CAAChK,EAAQtE,IAC7BzX,EAACkB,GAAyB,CAAA,MAAO6a,EAAO,KACrC,SAAOA,EAAA,IAAA,EADStE,CAEnB,CACD,CAAA,CAAA,EAEL,EACAzX,EAACqC,GACC,CAAA,SAAArC,EAACwd,GAAc,CAAA,UAAU,4CACtB,SAASze,EAAA,KAAK,GAAG,CACpB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EACCkoB,IACCjnB,EAACoF,GAAc,CAAA,GAAGd,EAChB,SAAAtE,EAACiT,GAAA,CACC,KAAK,OACL,MAAM,QACN,SAAUxU,EAAE,UAAU,EACtB,aAAa,GACb,QAAS0O,GAAc,UACvB,WAAU,EAAA,CAAA,CAEd,CAAA,CAAA,CAEJ,CAAA,CAAA,EACF,EAEC9M,EAAAgnB,GAAA,CAAK,UAAS,GAAC,UAAU,kCACxB,SAAA,CAAChnB,EAAAinB,GAAA,CAAS,KAAM,EACd,SAAA,CAAAtnB,EAACunB,GAAA,CACC,kBAAgB,oCAChB,SAAU,EACV,GAAG,2BACH,IAAKZ,EAEL,SAAA3mB,EAACwlB,IAAgB,gBAAAC,CAAkC,CAAA,CAAA,CACrD,EACAzlB,EAACunB,GAAA,CACC,kBAAgB,sCAChB,SAAU,EACV,GAAG,6BACH,IAAKV,EACL,OAAM,GAEN,SAAA7mB,EAAC0lB,IAAe,eAAAC,CAAgC,CAAA,CAAA,CAClD,EACA3lB,EAACunB,GAAA,CACC,kBAAiB9oB,EAAE,sBAAsB,EACzC,SAAU,EACV,GAAG,6BACH,IAAKqoB,EACL,OAAM,GAEN,SAAA9mB,EAACqlB,GAAA,CACC,KAAMhJ,EACN,KAAM/X,EAAK,UAAU,MAAM,EAC3B,MAAM,sBAAA,CAAA,CACR,CACF,EACAtE,EAACunB,GAAA,CACC,kBAAiB9oB,EAAE,kBAAkB,EACrC,SAAU,EACV,GAAG,yBACH,IAAKsoB,GACL,OAAM,GAEN,SAAA/mB,EAACqlB,GAAA,CACC,KAAMoB,EACN,KAAMniB,EAAK,UAAU,MAAM,EAC3B,MAAM,kBAAA,CAAA,CACR,CACF,EACAtE,EAACunB,GAAA,CACC,kBAAiB9oB,EAAE,mBAAmB,EACtC,SAAU,EACV,GAAG,0BACH,IAAKuoB,EACL,OAAM,GAEN,SAAAhnB,EAACqlB,GAAA,CACC,KAAMkB,EACN,KAAMjiB,EAAK,UAAU,MAAM,EAC3B,MAAM,mBAAA,CAAA,CACR,CAAA,CACF,EACF,EACAtE,EAACsnB,GAAS,CAAA,KAAM,EACd,SAAAjnB,EAACmnB,GAAA,CACC,GAAG,OAEH,WAAU,GACV,UAAWrB,EACX,SAAU,CAACrlB,EAAGoF,IAAQkgB,EAAalgB,CAAa,EAEhD,SAAA,CAAAlG,EAACynB,EAAA,CACC,GAAG,2BACH,gBAAc,2BACd,cAAY,iCACZ,SAAU,EACV,QACGC,EACE,CAAA,SAAA,CAAAjpB,EAAE,0BAA0B,EAAG,IAChCuB,EAACS,EAAA,CACC,aAAa,2BACb,SAAUhC,EAAE,8BAA8B,EAC1C,gBAAiB,GACjB,OAAM,EAAA,CAAA,CACR,EACF,EAEF,cAAekoB,CAAA,CACjB,EACA3mB,EAACynB,EAAA,CACC,GAAG,6BACH,gBAAc,6BACd,cAAY,oCACZ,SAAU,EACV,QACGC,EACE,CAAA,SAAA,CAAAjpB,EAAE,4BAA4B,EAAG,IAClCuB,EAACS,EAAA,CACC,aAAa,6BACb,SAAUhC,EAAE,gCAAgC,EAC5C,gBAAiB,GACjB,OAAM,EAAA,CAAA,CACR,EACF,EAEF,cAAeooB,CAAA,CAChB,EACD7mB,EAACynB,EAAA,CACC,GAAG,uBACH,gBAAc,uBACd,cAAY,6BACZ,SAAU,EACV,QACGC,EACE,CAAA,SAAA,CAAAjpB,EAAE,sBAAsB,EAAG,IAC5BuB,EAACS,EAAA,CACC,aAAa,uBACb,SAAUhC,EAAE,0BAA0B,EACtC,gBAAiB,GACjB,OAAM,EAAA,CAAA,CACR,EACF,EAEF,cAAeqoB,CAAA,CACjB,EACA9mB,EAACynB,EAAA,CACC,GAAG,mBACH,gBAAc,mBACd,cAAY,yBACZ,SAAU,EACV,QACGC,EACE,CAAA,SAAA,CAAAjpB,EAAE,kBAAkB,EAAG,IACxBuB,EAACS,EAAA,CACC,aAAa,mBACb,SAAUhC,EAAE,sBAAsB,EAClC,gBAAiB,GACjB,OAAM,EAAA,CAAA,CACR,EACF,EAEF,cAAesoB,EAAA,CACjB,EACA/mB,EAACynB,EAAA,CACC,GAAG,oBACH,gBAAc,oBACd,cAAY,0BACZ,SAAU,EACV,QACGC,EACE,CAAA,SAAA,CAAAjpB,EAAE,mBAAmB,EAAG,IACzBuB,EAACS,EAAA,CACC,aAAa,oBACb,SAAUhC,EAAE,uBAAuB,EACnC,gBAAiB,GACjB,OAAM,EAAA,CAAA,CACR,EACF,EAEF,cAAeuoB,CAAA,CAAA,CACjB,CAAA,EA9FK9gB,CAAA,CAgGT,CAAA,CAAA,CACF,CAAA,CAAA,EACF,CAEJ,EC1bayhB,GAAiB,CAAC,CAAE,OAAAjf,KAAkC,CAC3D,KAAA,CAAE,YAAArK,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,CAAM,EAAIC,GAAS,EAErB,CAACopB,EAAgBC,CAAiB,EAAI5oB,EAA6B,EAEnE,CAAE,UAAA+K,CAAU,EAAIC,GAAU,EAC1B6d,EAAmB9d,EAAU,gBAAgB,EAEnDtK,GACE,IACErB,EAAY,QAAQ,sBAAsB,CACxC,GAAIqK,EAAO,EAAA,CACZ,EACFkf,GAAmBC,EAAkBD,CAAc,EACpD,CAAA,CACF,EAEM,MAAAG,EAAc,MAAOvQ,GAAgB,CACrC,GAAA,CACF,MAAMwQ,EAAaxQ,EAChB,OAAQ5B,GAAQA,EAAI,SAAW,MAAS,EACxC,IAAKA,GAAQA,EAAI,IAA0B,EAC3C,KAAK,EACF,MAAAvX,EAAY,MAAM,qBAAqB,CAC3C,GAAIupB,GAAgB,GACpB,MAAOI,CAAA,CACR,EACD,MAAM,QAAQ,IACZxQ,EACG,OAAQ5B,GAAQA,EAAI,SAAW,MAAS,EACxC,IAAKA,GACJvX,EAAY,MAAM,sBAAsB,CACtC,GAAIupB,GAAgB,GACpB,eAAgBhS,EAAI,OAAQ,GAC5B,MAAO,CAACA,EAAI,IAA0B,CACvC,CAAA,CAAA,CAEP,EACAjR,EAASlG,EAAE,2BAA2B,EAAGuG,EAAa,OAAO,QACtDC,EAAO,CACdL,EAAS,0BAA2BK,CAAK,CAAA,CAE7C,EACA,OAAO2iB,EAEHvnB,EAAA2C,EAAA,CAAA,SAAA,CAAC3C,EAAA6I,GAAA,CAAY,UAAU,eACrB,SAAA,CAAClJ,EAAAioB,GAAA,CAAe,UAAU,0DAA2D,CAAA,IACpF,OAAK,CAAA,UAAU,gBACd,SAAC5nB,EAAA6nB,GAAA,CAAM,QAAQ,2BACZ,SAAA,CAAA,GACDloB,EAACkP,GAAA,CACC,GAAIiZ,GAAO,CAAE,MAAA5pB,EAAO,GAAIqpB,EAAe,GAAK,IAAK,WAAY,EAE5D,SAAA,CAAE,KAAMA,EAAe,QAAS,CAAA,CAAA,CACnC,CAAA,CACF,CACF,CAAA,CAAA,EACF,EACA5nB,EAACooB,GAAA,CACC,KAAM1f,EAAO,SACb,GAAIkf,EAAe,GACnB,KAAK,QACL,UAAWE,GAAoBpf,EAAO,QAAQ,UAC9C,KAAMqf,CAAA,CAAA,CAEV,CAAA,CAAA,IAECrU,GAAgB,EAAA,CAErB,ECVM2U,GAAqB,CAAC,CAC1B,SAAAC,EACA,MAAAvnB,EACA,KAAAyB,EACA,OAAAkG,EACA,qBAAA6f,EACA,mBAAAvR,CACF,IAA+B,CACvB,KAAA,CAAE,EAAAvY,CAAE,EAAIC,EAAe,EACvB,CAACyjB,EAAqBC,CAAc,EAAI1b,GAAiB,CAC7D,SAAU,4BACV,WAAY,uBACZ,oBAAqB,UACrB,UAAW,IAAM,CACf4hB,EAAS,CAACvnB,CAAK,EACVyB,EAAA,CAAA,CACP,CACD,EAEKgmB,EAASjpB,GAA2B,IAAM,CAC9C,MAAMkpB,EAAeC,GACnBjqB,EACAiK,EAAO,UAAY,gBACrB,EAkBO,MAAA,CAAC,CAAE,KAhBGA,EAAO,WAClB1I,EAAC0U,GAAA,CACC,cAAY,gCACZ,QAASjW,EAAE,mBAAmB,EAE9B,SAAAuB,EAACoV,GAAA,CACC,cAAY,8BACZ,OAAO6S,GAAe,EAAA,EAErB,SAAAQ,CAAA,CAAA,CACH,CACF,EAECzoB,EAAAoV,GAAA,CAAO,SAAaqT,CAAA,CAAA,EAGP,CAAA,EACf,CAAC/f,EAAQjK,CAAC,CAAC,EAER,CAAE,UAAAuL,CAAU,EAAIC,GAAU,EAC1BC,EAAYF,EAAU,gBAAgB,GAAKtB,EAAO,QAAQ,UAE1DigB,EAAgB,GACnBrR,GAA4B,CAAA,QAASiR,EACnC,SAAE9pB,EAAA,uBAAuB,GADV,UAElB,EACAuB,EAACsX,GAA0B,CAAA,QAAS,IAAMsR,GAAalgB,CAAM,EAC1D,SAAAjK,EAAE,QAAQ,CAAA,EADK,QAElB,EACA,GAAI,CAACoqB,GAAcngB,CAAM,GAAKwB,EAC1B,CACElK,EAACqR,MAAY,SAAU,EACvBrR,EAACsX,GAAA,CACC,cAAY,gBAEZ,QAASN,EAER,WAAE,QAAQ,CAAA,EAHP,QAAA,CAIN,EAEF,CAAA,CACN,EAEA,OAEI3W,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoiB,EAAe,EAAA,EAChBpiB,EAAC8oB,GAAA,CACC,SAAUpgB,EAAO,SACjB,OAAO,iBACP,OAAA8f,EACA,QAAS,GACT,WAAY,CAACte,EACb,YAAY,gBACZ,cAAAye,EACA,UAAW5nB,EACX,SAAWA,GAAU,CACdA,GAGHunB,EAASvnB,CAAK,EACTyB,EAAA,GAHe2f,EAAA,CAItB,CACF,CAAA,CACF,EACF,CAEJ,EAYA,SAAwB4G,IAAgB,CAChC,KAAA,CAAE,YAAA1qB,CAAY,EAAIC,EAAe,EAEjC,CAAE,EAAAG,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAiG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAtG,EAAO,oBAAAyqB,CAAoB,EAAIxqB,GAAS,EAC1C,CAAE,UAAAwL,CAAU,EAAIC,GAAU,EAC1Bgf,EAAmBrmB,GAAoB,EAEvCsmB,EAAyBlf,EAAU,sBAAsB,EACzDmf,EAAuBnf,EAAU,oBAAoB,EACrD8d,EAAmB9d,EAAU,gBAAgB,EAC7Cof,EAAiBpf,EAAU,cAAc,EACzCid,EAAejd,EAAU,YAAY,EACrCqf,EACJJ,EAAiBpmB,GAAQ,qBAAqB,IAC7CqmB,GAA0BC,GAEvB7U,EAAWC,GAAY,EAEvB,CAAC+U,EAAoBC,CAAwB,EAAI9a,GAAU,EAC3D,CAAC+a,EAAyBC,CAA6B,EAAIhb,GAAU,EAErEnK,EAAOC,GAAoB,EAC3B,CAAE,SAAAwK,CAAS,EAAIC,GAAwB,EACvC,CAAC9I,EAAKC,CAAM,EAAIlH,EAAS,CAAC,EAE1B4c,EAA0BM,GAAS,CACvC,QAAS7X,EAAK,QACd,KAAM,0BACN,aAAc,eAAA,CACf,EAEK,CAACoE,EAAQghB,CAAS,EAAIzqB,EAA+B,EAErD+kB,EAAS,SAAY,CACnB,MAAA5R,EAAQ,MAAM/T,EAAY,QAAQ,UAAU,CAAE,GAAI0Q,EAAU,EAClE,OAAOlL,GAAOuO,EAAQc,IAASA,GAAK,MAAM,aAAa,CACzD,EAEMyW,EAAOA,GACXC,GAAS,CACP,MAAArrB,EACA,SAAAwQ,EACA,IAAA4a,CAAA,CACD,EAEGE,EAAcC,GAAeH,EAAI,UAAU,CAAC,EAC5CI,EAAUD,GAAeH,EAAI,MAAM,CAAC,EACpCK,EAAiBF,GAAeH,EAAI,aAAa,CAAC,EAClDM,EAAWH,GAAeH,EAAI,OAAO,CAAC,EACtCO,GAAkBJ,GAAeH,EAAI,cAAc,CAAC,EACpDQ,EAAmBL,GAAeH,EAAI,eAAe,CAAC,EACtDS,EAAoBN,GAAeH,EAAI,gBAAgB,CAAC,EACxDU,GAAcP,GAAeH,EAAI,UAAU,CAAC,EAC5CW,GAAiBR,GAAeH,EAAI,aAAa,CAAC,EAClDY,EAAcT,GAAeH,EAAI,UAAU,CAAC,EAC5Ca,EAAgBV,GAAeH,EAAI,aAAa,CAAC,EAEjDc,GAAwBd,GAC5Be,GAAkB,CAChB,MAAAnsB,EACA,SAAAwQ,EACA,IAAA4a,CAAA,CACD,EAEGgB,GAAuBb,GAAeW,GAAqB,OAAO,CAAC,EACnEG,GAA0Bd,GAC9BW,GAAqB,UAAU,CACjC,EAEMI,GAAyBlB,GAC7BmB,GAAmB,CACjB,MAAAvsB,EACA,SAAAwQ,EACA,IAAA4a,CAAA,CACD,EAEGoB,GAA2BjB,GAC/Be,GAAsB,UAAU,CAClC,EACMG,GAA4BlB,GAChCe,GAAsB,WAAW,CACnC,EACMI,GAAyBnB,GAC7Be,GAAsB,QAAQ,CAChC,EACMK,GAA2BpB,GAC/Be,GAAsB,UAAU,CAClC,EACMM,GAA8BrB,GAClCe,GAAsB,aAAa,CACrC,EACMO,GAA2BtB,GAC/Be,GAAsB,UAAU,CAClC,EACMQ,GAAyBvB,GAC7Be,GAAsB,QAAQ,CAChC,EAEM,CAAC7T,GAAoBC,EAAa,EAAIvQ,GAAiB,CAC3D,SAAU,2BACV,WAAY,sBACZ,oBAAqB,SACrB,sBAAuBvB,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACF,MAAM9G,EAAY,QAAQ,IAAI,CAAE,GAAI0Q,EAAU,EAC9CpK,EAASlG,EAAE,sBAAsB,EAAGuG,EAAa,OAAO,EACxDsP,EAASgX,GAAU,CAAE,MAAA/sB,CAAM,CAAC,CAAC,QACtB0G,EAAO,CACdL,EAAS,oBAAqBK,CAAK,CAAA,CACrC,CACF,CACD,EAEKsmB,GAAa7iB,GAAiC,CAClDpE,EAAK,MAAM,CAAE,GAAGoE,EAAQ,EACJA,GAAAA,EAAQpE,EAAK,QAAQ,EACrCoE,EAAO,aAAa,aAAa,GAC9BpE,EAAA,SACHvB,EAA2B,wBAAwB,EAEnD,OAAO,QAAQ,KAAK,MAAM2F,EAAO,WAAW,aAAa,CAAC,CAAC,EAAE,QAC3D,CAAC,CAACxC,GAAKnF,EAAK,KAAO,CAAE,IAAAmF,GAAK,MAAAnF,EAAM,EAAA,CAEpC,CAEJ,EAEArB,GACE,IAAMrB,EAAY,QAAQ,QAAQ,CAAE,GAAI0Q,EAAU,EACjDyc,GAAkB,CACjB,GAAI,CAACA,EACH,MAAM,IAAI,MAAM/sB,EAAE,UAAU,CAAC,EAErBirB,EAAA+B,GAAUD,CAAa,CAAC,EAClCD,GAAUC,CAAa,CACzB,EACA,CAACzc,EAAU7I,CAAG,CAChB,EAEA,MAAM1D,GAAO,MACX,CAAE,UAAAkpB,EAAY,GAAO,WAAAC,GAAa,qBAAqC,CACrE,UAAW,GACX,WAAY,mBAAA,IAEX,CACH,GAAI,CAAE,MAAMrnB,EAAK,UACf,OAGF,GACE,CAACoE,GAAQ,cACTA,GAAQ,0BAA4BmT,GACpC,CAAC6P,EACD,CAC8BjC,EAAA,EAC9B,MAAA,CAGF,MAAMld,GAASqf,GAA0BtnB,EAAK,UAAA,CAAW,EAEnDunB,GACJD,GAAgDrf,EAAM,EAEpDsf,GAAgB,aAAa,aAAa,IAC5BA,GAAA,WAAW,aAAa,EAAI,KAAK,UAC/C,OAAO,YACJA,GAAgB,WAAW,aAAa,EACtC,OAAO,CAAC,CAAE,IAAA3lB,EAAAA,IAAUA,KAAQ,EAAE,EAC9B,IAAI,CAAC,CAAE,IAAAA,GAAK,MAAAnF,MAAY,CAACmF,GAAKnF,EAAK,CAAC,CAAA,CAE3C,GAGE,GAAA,CACF,MAAM+qB,GAAkC,CACtC,GAAGpjB,EACH,GAAGmjB,EACL,EAEUC,GAAA,SAAWA,GAAU,UAAU,KAAK,EAE9C,MAAMztB,EAAY,QAAQ,OAAO,CAAE,GAAI0Q,GAAY+c,EAAS,EAC5DP,GAAUO,EAAS,EACnBpC,EAAUoC,EAAS,EACnBnnB,EAASlG,EAAEktB,EAAU,EAAG3mB,EAAa,OAAO,QACrCC,GAAO,CACdL,EAAS,kBAAmBK,EAAK,CAAA,CAErC,EAEA,OAAKyD,EAMDrI,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACC,GAAA,CACC,oBAAoB,MACpB,kBAAkB,KAClB,SAAUxB,EAAE,kCAAmC,CAC7C,wBAAAod,CAAA,CACD,EACD,KAAM2N,EACN,aAAcC,EACd,UAAW,IAAMjnB,GAAK,CAAE,UAAW,GAAM,EAEzC,SAAAxC,EAAAgD,EAAA,CACG,WAAE,6BAA8B,CAC/B,wBAAA6Y,CAAA,CACD,CACH,CAAA,CAAA,CACF,IACC5E,GAAc,EAAA,EACdqS,GACCtpB,EAAChC,GAAA,CACC,GAAI0K,EAAO,GACX,SAAUA,EAAO,SACjB,KAAI,GACJ,aAAc6gB,CAAA,CAChB,EAEFvpB,EAACkC,GAAA,CACC,KAAK,UACL,QAASoC,EAAK,QACd,aAAc,GACd,OAAQ,CAAC,CAAE,MAAAnC,CAAA,IACTnC,EAACqoB,GAAA,CACC,MAAOlmB,EAAM,MACb,SAAUA,EAAM,SAChB,OAAAuG,EACA,KAAAlG,GACA,mBAAAwU,GACA,qBAAsBuS,CAAA,CAAA,CACxB,CAEJ,EACAvpB,EAACkJ,IAAY,QAAQ,QAAQ,UAAU,cACrC,SAAAlJ,EAACoF,GAAc,CAAA,GAAGd,EAChB,SAAAjE,EAAC0rB,GAAA,CACC,cAAY,cACZ,aAAW,cACX,MAAK,GACL,aAAY,GAEZ,SAAA,CAAA/rB,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,oBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAGorB,EAEJ,SAAA7pB,EAACwL,GAAA,CACC,OAAA9C,EACA,KAAM,IAAMlG,GAAK,EACjB,MAAO,IAAM+oB,GAAU7iB,CAAM,CAAA,CAAA,CAC/B,CACF,GACG,CAACA,EAAO,cAAgB,CAACmgB,GAAcngB,CAAM,GAC9CA,EAAO,WAAa,SACpBrI,EAAConB,EAAA,CACC,GAAG,OACH,cAAY,UACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,MAAM,EAAE,EAC/B,GAAGsrB,EAEH,SAAA,CAAArhB,EAAO,WAAa,kBACnB1I,EAACmf,GAAA,CACC,SAAApQ,EACA,KAAAvM,GACA,mBAAoBkG,EAAO,QAAQ,SAAA,CACrC,EAEDA,EAAO,WAAa,QAClB1I,EAAA2hB,GAAA,CAAS,SAAA5S,EAAoB,KAAAvM,EAAY,CAAA,CAAA,CAAA,CAE9C,EAED,CAACkG,EAAO,cACP,CAACmgB,GAAcngB,CAAM,IACpB0gB,GACC1gB,EAAO,QAAQ,WACfA,EAAO,QAAQ,OACf1I,EAACynB,EAAA,CACC,GAAG,cACH,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,aAAa,EAAE,EACtC,GAAGurB,EAEJ,SAAAhqB,EAACic,GAAA,CAEC,OAAAvT,EACA,KAAAlG,GACA,QAAS,IAAM2D,EAAOD,EAAM,CAAC,CAAA,EAHxBA,CAAA,CAIP,CACF,EAEJlG,EAACynB,EAAA,CACC,GAAG,QACH,cAAY,WACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,OAAO,EAAE,EAChC,GAAGwrB,EAEJ,SAAAjqB,EAACgsB,GAAA,CACC,OAAAhI,EACA,UAAW,GACX,cAAc,SACd,SAAUiI,GAAa,CAAE,MAAA1tB,EAAO,SAAUmK,EAAO,GAAK,EACtD,SAAWwjB,GACTC,GAAa,CACX,MAAA5tB,EACA,SAAUmK,EAAO,GACjB,GAAIwjB,EACJ,IAAK,SAAA,CACN,EAEH,WAAY,EAAEpE,GAAoBpf,EAAO,QAAQ,UAAA,CAAA,CACnD,CACF,EACC,CAACmgB,GAAcngB,CAAM,GAAK,CAACA,EAAO,YACjC1I,EAACynB,EAAA,CACC,GAAG,eACH,cAAY,kBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,cAAc,EAAE,EACvC,GAAGyrB,GAEJ,SAAA7pB,EAAC0rB,GAAA,CACC,gBAAiBrB,GAAkB,CACjC,MAAAnsB,EACA,SAAAwQ,EACA,IAAK,OAAA,CACN,EAED,SAAA,CAAA/O,EAACynB,EAAA,CACC,GAAG,QACH,cAAY,uBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,OAAO,EAAE,EAChC,GAAGksB,GAEJ,SAAA3qB,EAAC8iB,GAAA,CACC,WAAYpa,EAAO,SACnB,SAAAqG,EACA,SAAUrG,EAAQ,SAClB,kBAAmBA,EAAQ,QAAQ,MAAA,CAAA,CACrC,CACF,EACA1I,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,0BACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAGmsB,GAEJ,SAAA5qB,EAAC4lB,GAAA,CACC,SAAA7W,EACA,SAAUrG,EAAQ,QAAA,CAAA,CACpB,CAAA,CACF,CAAA,CAAA,CACF,CACF,EAEDA,EAAQ,+BACNwgB,GAA0BC,IACzBnpB,EAACynB,EAAA,CACC,GAAG,gBACH,cAAY,mBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,eAAe,EAAE,EACxC,GAAG0rB,EAEJ,SAAA9pB,EAAC0rB,GAAA,CACC,aAAY,GACZ,cAAa,GACb,gBAAiBjB,GAAmB,CAClC,MAAAvsB,EACA,SAAAwQ,EACA,IAAK,UAAA,CACN,EAED,SAAA,CAAA/O,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAGssB,GAEJ,SAAA/qB,EAACsa,IAAsB,SAAAvL,CAAoB,CAAA,CAAA,CAC7C,EACA/O,EAACynB,EAAA,CACC,GAAG,YACH,cAAY,yBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,WAAW,EAAE,EACpC,GAAGusB,GAEJ,SAAAhrB,EAAC0Y,GAAA,CACC,SAAA3J,EACA,WAAY,CAACma,CAAA,CAAA,CACf,CACF,EACAlpB,EAACynB,EAAA,CACC,GAAG,SACH,cAAY,sBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,QAAQ,EAAE,EACjC,GAAGwsB,GAEJ,SAAAjrB,EAACiZ,GAAA,CACC,SAAAlK,EACA,WAAY,CAACma,CAAA,CAAA,CACf,CACF,EACAlpB,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAGysB,GAEJ,SAAAlrB,EAAC2X,GAAA,CACC,SAAA5I,EACA,WAAY,CAACma,CAAA,CAAA,CACf,CACF,EACAlpB,EAACynB,EAAA,CACC,GAAG,cACH,cAAY,2BACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,aAAa,EAAE,EACtC,GAAG0sB,GAEJ,SAAAnrB,EAAC6V,GAAA,CACC,SAAA9G,EACA,WAAY,CAACma,CAAA,CAAA,CACf,CACF,EACCjC,GACCjnB,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAG2sB,GAEJ,SAAAprB,EAACsR,GAAsB,CAAA,OAAA5I,EAAgB,KAAAlG,EAAY,CAAA,CAAA,CACrD,EAEDwH,EAAU,sBAAsB,GAC/BhK,EAACynB,EAAA,CACC,GAAG,SACH,cAAY,sBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,QAAQ,EAAE,EACjC,GAAG4sB,GAEJ,WAAClY,GAAoB,CAAA,CAAA,CAAA,CAAA,CACvB,CAAA,CAAA,CAEJ,CACF,EAEHzK,EAAQ,wBAA0Bue,GACjCjnB,EAACynB,EAAA,CACC,GAAG,iBACH,cAAY,oBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,gBAAgB,EAAE,EACzC,GAAG2rB,EAEJ,SAAApqB,EAAC2nB,IAAe,OAAAjf,CAAgB,CAAA,CAAA,CAClC,EAEF1I,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,cACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAG4rB,GAEJ,SAAArqB,EAACsJ,IAAe,OAAAZ,CAAgB,CAAA,CAAA,CAClC,EACC2gB,IACEvB,GAAoBpf,EAAO,QAAQ,SAClC1I,EAACynB,EAAA,CACC,GAAG,cACH,cAAY,iBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,aAAa,EAAE,EACtC,GAAG6rB,GAEJ,WAAC8B,GAAe,CAAA,GAAI1jB,EAAO,GAAK,KAAK,SAAU,CAAA,CAAA,CACjD,EAEJ1I,EAACynB,EAAA,CACC,GAAG,WACH,cAAY,cACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,UAAU,EAAE,EACnC,GAAG8rB,EAEJ,SAAAvqB,EAACyI,GAAY,CAAA,KAAAjG,GAAY,OAAAkG,CAAgB,CAAA,CAAA,CAC3C,EACCsB,EAAU,aAAa,GAAKgf,GAAqB,eAChDhpB,EAACynB,EAAA,CACC,cAAY,kBACZ,MAAOznB,EAAC0nB,EAAc,CAAA,SAAAjpB,EAAE,QAAQ,EAAE,EACjC,GAAG+rB,EAEJ,SAACxqB,EAAAqsB,GAAA,CAAW,OAAQ3jB,EAAO,QAAU,CAAA,CAAA,CAAA,CACvC,CAAA,GAGN,CACF,CAAA,CAAA,EACF,IAnTQgL,GAAgB,EAAA,CAqT5B","x_google_ignoreList":[0,1,2,3,4,5]}