{"version":3,"file":"differenceBy-BM_QxZMj.js","sources":["../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseDifference.js","../../../../../../../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/differenceBy.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.difference` except that it accepts `iteratee` which\n * is invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * **Note:** Unlike `_.pullAllBy`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\n * // => [1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');\n * // => [{ 'x': 2 }]\n */\nvar differenceBy = baseRest(function(array, values) {\n  var iteratee = last(values);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2))\n    : [];\n});\n\nexport default differenceBy;\n"],"names":["LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","arrayIncludes","isCommon","length","result","valuesLength","arrayMap","baseUnary","cacheHas","SetCache","outer","value","computed","valuesIndex","differenceBy","baseRest","last","isArrayLikeObject","baseFlatten","baseIteratee"],"mappings":"uJAQA,IAAIA,EAAmB,IAavB,SAASC,EAAeC,EAAOC,EAAQC,EAAUC,EAAY,CAC3D,IAAIC,EAAQ,GACRC,EAAWC,EACXC,EAAW,GACXC,EAASR,EAAM,OACfS,EAAS,CAAE,EACXC,EAAeT,EAAO,OAE1B,GAAI,CAACO,EACH,OAAOC,EAELP,IACFD,EAASU,EAASV,EAAQW,EAAUV,CAAQ,CAAC,GAMtCD,EAAO,QAAUH,IACxBO,EAAWQ,EACXN,EAAW,GACXN,EAAS,IAAIa,EAASb,CAAM,GAE9Bc,EACA,KAAO,EAAEX,EAAQI,GAAQ,CACvB,IAAIQ,EAAQhB,EAAMI,CAAK,EACnBa,EAAWf,GAAY,KAAOc,EAAQd,EAASc,CAAK,EAGxD,GADAA,EAAuBA,IAAU,EAAKA,EAAQ,EAC1CT,GAAYU,IAAaA,EAAU,CAErC,QADIC,EAAcR,EACXQ,KACL,GAAIjB,EAAOiB,CAAW,IAAMD,EAC1B,SAASF,EAGbN,EAAO,KAAKO,CAAK,CACvB,MACcX,EAASJ,EAAQgB,EAAUd,CAAU,GAC7CM,EAAO,KAAKO,CAAK,CAEvB,CACE,OAAOP,CACT,CC/BG,IAACU,EAAeC,EAAS,SAASpB,EAAOC,EAAQ,CAClD,IAAIC,EAAWmB,EAAKpB,CAAM,EAC1B,OAAIqB,EAAkBpB,CAAQ,IAC5BA,EAAW,QAENoB,EAAkBtB,CAAK,EAC1BD,EAAeC,EAAOuB,EAAYtB,EAAQ,EAAGqB,EAAmB,EAAI,EAAGE,EAAatB,CAAW,CAAC,EAChG,CAAE,CACR,CAAC","x_google_ignoreList":[0,1]}